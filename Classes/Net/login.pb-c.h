/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: login.proto */

#ifndef PROTOBUF_C_login_2eproto__INCLUDED
#define PROTOBUF_C_login_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _ConfigJsonMd5 ConfigJsonMd5;
typedef struct _ConfigJsonResult ConfigJsonResult;
typedef struct _EmailLogin EmailLogin;
typedef struct _Activity Activity;
typedef struct _Task Task;
typedef struct _SysMessage SysMessage;
typedef struct _City City;
typedef struct _SeaEventDefine SeaEventDefine;
typedef struct _SeaBlockInfo SeaBlockInfo;
typedef struct _DailyRewardData DailyRewardData;
typedef struct _LoginFirstData LoginFirstData;
typedef struct _EmailLoginResult EmailLoginResult;
typedef struct _RegisterUser RegisterUser;
typedef struct _ProtoSample ProtoSample;
typedef struct _ProtoSampleResult ProtoSampleResult;
typedef struct _RegisterUserResult RegisterUserResult;
typedef struct _CreateCharacter CreateCharacter;
typedef struct _CreateCharacterFailed CreateCharacterFailed;
typedef struct _GetFleetCargo GetFleetCargo;
typedef struct _FleetCaptain FleetCaptain;
typedef struct _ShipDefine ShipDefine;
typedef struct _GoodsDefine GoodsDefine;
typedef struct _ShipGoods ShipGoods;
typedef struct _GetFleetCargoResult GetFleetCargoResult;
typedef struct _GetGoodsForShip GetGoodsForShip;
typedef struct _GetGoodsForShipResult GetGoodsForShipResult;
typedef struct _ExchangeGoodsForShips ExchangeGoodsForShips;
typedef struct _ExchangeGoodsForShipsResult ExchangeGoodsForShipsResult;
typedef struct _CheckMailBox CheckMailBox;
typedef struct _CheckMailBoxResult CheckMailBoxResult;
typedef struct _GetMailList GetMailList;
typedef struct _MailDefine MailDefine;
typedef struct _GetMailListResult GetMailListResult;
typedef struct _SendMail SendMail;
typedef struct _SendMailResult SendMailResult;
typedef struct _SalvageItem SalvageItem;
typedef struct _MarkMailStatus MarkMailStatus;
typedef struct _MarkMailStatusResult MarkMailStatusResult;
typedef struct _GetItemsBeingSold GetItemsBeingSold;
typedef struct _BeingSoldItemsDefine BeingSoldItemsDefine;
typedef struct _GetItemsBeingSoldResult GetItemsBeingSoldResult;
typedef struct _GetLastPrice GetLastPrice;
typedef struct _GetLastPriceResult GetLastPriceResult;
typedef struct _GetOrderList GetOrderList;
typedef struct _OrderDefine OrderDefine;
typedef struct _GetOrderListResult GetOrderListResult;
typedef struct _BuyItemShipDetail BuyItemShipDetail;
typedef struct _BuyItem BuyItem;
typedef struct _BuyItemResult BuyItemResult;
typedef struct _SellItem SellItem;
typedef struct _SellItemResult SellItemResult;
typedef struct _CreateOrder CreateOrder;
typedef struct _CreateOrderResult CreateOrderResult;
typedef struct _SearchTradeItems SearchTradeItems;
typedef struct _SearchTradeItemsResult SearchTradeItemsResult;
typedef struct _GetItemsToSell GetItemsToSell;
typedef struct _ToSellItemsDefine ToSellItemsDefine;
typedef struct _GetItemsToSellResult GetItemsToSellResult;
typedef struct _GetPriceData GetPriceData;
typedef struct _PriceDataDefine PriceDataDefine;
typedef struct _ShipSizeInfo ShipSizeInfo;
typedef struct _GetPriceDataResult GetPriceDataResult;
typedef struct _GetPersonalItem GetPersonalItem;
typedef struct _HatchItemsDefine HatchItemsDefine;
typedef struct _EquipmentDefine EquipmentDefine;
typedef struct _DrawingItemsDefine DrawingItemsDefine;
typedef struct _SpecialItemsDefine SpecialItemsDefine;
typedef struct _GetPersonalItemResult GetPersonalItemResult;
typedef struct _CancelOrder CancelOrder;
typedef struct _CancelOrderResult CancelOrderResult;
typedef struct _WarehouseOpration WarehouseOpration;
typedef struct _WarehouseOprationResult WarehouseOprationResult;
typedef struct _GetWarehouseItems GetWarehouseItems;
typedef struct _CityGoodsDefine CityGoodsDefine;
typedef struct _CityGoods CityGoods;
typedef struct _GetWarehouseItemsResult GetWarehouseItemsResult;
typedef struct _BarConsume BarConsume;
typedef struct _BarConsumeResult BarConsumeResult;
typedef struct _GetBarInfo GetBarInfo;
typedef struct _BarMenuDefine BarMenuDefine;
typedef struct _BarCaptainDefine BarCaptainDefine;
typedef struct _GetBarInfoResult GetBarInfoResult;
typedef struct _GetCrew GetCrew;
typedef struct _ShipCrewDefine ShipCrewDefine;
typedef struct _GetCrewResult GetCrewResult;
typedef struct _TreatBargirl TreatBargirl;
typedef struct _TreatBargirlResult TreatBargirlResult;
typedef struct _GiveBargirlGift GiveBargirlGift;
typedef struct _GiveBargirlGiftResult GiveBargirlGiftResult;
typedef struct _GetAvailCrewNum GetAvailCrewNum;
typedef struct _GetAvailCrewNumResult GetAvailCrewNumResult;
typedef struct _GetTaskList GetTaskList;
typedef struct _TaskDefine TaskDefine;
typedef struct _GetTaskListResult GetTaskListResult;
typedef struct _GetIntelligence GetIntelligence;
typedef struct _IntelligenceDefine IntelligenceDefine;
typedef struct _GetIntelligenceResult GetIntelligenceResult;
typedef struct _GetCaptain GetCaptain;
typedef struct _GetCaptainResult GetCaptainResult;
typedef struct _HandleTask HandleTask;
typedef struct _TaskRewardItems TaskRewardItems;
typedef struct _HandleTaskResult HandleTaskResult;
typedef struct _MainTaskItems MainTaskItems;
typedef struct _CurrentMainTaskInfo CurrentMainTaskInfo;
typedef struct _CurrentCompanionTaskInfo CurrentCompanionTaskInfo;
typedef struct _GetCurrentCityData GetCurrentCityData;
typedef struct _GetCurrentCityDataResult GetCurrentCityDataResult;
typedef struct _GetShipList GetShipList;
typedef struct _GetShipListResult GetShipListResult;
typedef struct _RepairShip RepairShip;
typedef struct _RepairShipResult RepairShipResult;
typedef struct _RepairAllShips RepairAllShips;
typedef struct _RepairAllShipsResult RepairAllShipsResult;
typedef struct _ShipName ShipName;
typedef struct _FleetFormation FleetFormation;
typedef struct _FleetFormationResult FleetFormationResult;
typedef struct _ParkShip ParkShip;
typedef struct _ParkShipResult ParkShipResult;
typedef struct _GetDrawings GetDrawings;
typedef struct _ItemDefine ItemDefine;
typedef struct _PredefinedShip PredefinedShip;
typedef struct _ShipdrawingDefine ShipdrawingDefine;
typedef struct _EquipdrawingDefine EquipdrawingDefine;
typedef struct _GetDrawingsResult GetDrawingsResult;
typedef struct _BuildShip BuildShip;
typedef struct _BuildShipResult BuildShipResult;
typedef struct _GetBuildingShips GetBuildingShips;
typedef struct _BuildingShipDefine BuildingShipDefine;
typedef struct _GetBuildingShipsResult GetBuildingShipsResult;
typedef struct _FinishBuilding FinishBuilding;
typedef struct _FinishBuildingResult FinishBuildingResult;
typedef struct _GetBuildingEquipment GetBuildingEquipment;
typedef struct _BuildingEquipmentDefine BuildingEquipmentDefine;
typedef struct _GetBuildingEquipmentResult GetBuildingEquipmentResult;
typedef struct _CancelBuild CancelBuild;
typedef struct _CancelBuildResult CancelBuildResult;
typedef struct _CaptainDefine CaptainDefine;
typedef struct _GetFleetAndDockShips GetFleetAndDockShips;
typedef struct _GetFleetAndDockShipsResult GetFleetAndDockShipsResult;
typedef struct _GetReinforceShipList GetReinforceShipList;
typedef struct _ReinforceShipDefine ReinforceShipDefine;
typedef struct _GetReinforceShipListResult GetReinforceShipListResult;
typedef struct _ReinforceShip ReinforceShip;
typedef struct _ReinforceShipResult ReinforceShipResult;
typedef struct _RerollShip RerollShip;
typedef struct _RerollShipResult RerollShipResult;
typedef struct _GetReinforceEquipList GetReinforceEquipList;
typedef struct _ReinforceEquipDefine ReinforceEquipDefine;
typedef struct _GetReinforceEquipListResult GetReinforceEquipListResult;
typedef struct _ReinforceEquip ReinforceEquip;
typedef struct _ReinforceEquipResult ReinforceEquipResult;
typedef struct _RerollEquip RerollEquip;
typedef struct _RerollEquipResult RerollEquipResult;
typedef struct _EquipShip EquipShip;
typedef struct _EquipShipResult EquipShipResult;
typedef struct _GetEquipShipInfo GetEquipShipInfo;
typedef struct _EquipDetailInfo EquipDetailInfo;
typedef struct _EquipShipInfo EquipShipInfo;
typedef struct _GetEquipShipInfoResult GetEquipShipInfoResult;
typedef struct _GetEquipableItems GetEquipableItems;
typedef struct _EquipableItem EquipableItem;
typedef struct _GetEquipableItemsResult GetEquipableItemsResult;
typedef struct _GetVisitedCities GetVisitedCities;
typedef struct _CityDefine CityDefine;
typedef struct _CityInfo CityInfo;
typedef struct _GetVisitedCitiesResult GetVisitedCitiesResult;
typedef struct _AddSupply AddSupply;
typedef struct _AddSupplyResult AddSupplyResult;
typedef struct _ShipPoint ShipPoint;
typedef struct _ShipRoutine ShipRoutine;
typedef struct _GetNextMapBlock GetNextMapBlock;
typedef struct _NearbyPlayer NearbyPlayer;
typedef struct _GetNextMapBlockShipInfo GetNextMapBlockShipInfo;
typedef struct _GetNextMapBlockResult GetNextMapBlockResult;
typedef struct _ShipBowIconInfo ShipBowIconInfo;
typedef struct _LeaveCity LeaveCity;
typedef struct _LeaveCityResult LeaveCityResult;
typedef struct _ReachCity ReachCity;
typedef struct _ReachCityResult ReachCityResult;
typedef struct _TriggerSeaEvent TriggerSeaEvent;
typedef struct _SeaEventLootDefine SeaEventLootDefine;
typedef struct _SeaEventShipStatus SeaEventShipStatus;
typedef struct _SeaEventLossDefine SeaEventLossDefine;
typedef struct _ShipEquipInfo ShipEquipInfo;
typedef struct _ShipEquipArray ShipEquipArray;
typedef struct _OutOfDurableItemDefine OutOfDurableItemDefine;
typedef struct _TriggerSeaEventResult TriggerSeaEventResult;
typedef struct _FinishSeaEvent FinishSeaEvent;
typedef struct _FinishSeaEventResult FinishSeaEventResult;
typedef struct _GetPalaceInfo GetPalaceInfo;
typedef struct _GetPalaceInfoResult GetPalaceInfoResult;
typedef struct _InvestCity InvestCity;
typedef struct _InvestCityResult InvestCityResult;
typedef struct _GetRankList GetRankList;
typedef struct _RankInfoDefine RankInfoDefine;
typedef struct _GetRankListResult GetRankListResult;
typedef struct _GetVoteList GetVoteList;
typedef struct _GetVoteListResult GetVoteListResult;
typedef struct _VoteMayor VoteMayor;
typedef struct _VoteMayorResult VoteMayorResult;
typedef struct _ChangeDevDir ChangeDevDir;
typedef struct _ChangeDevDirResult ChangeDevDirResult;
typedef struct _GetLabourUnion GetLabourUnion;
typedef struct _LabourDefine LabourDefine;
typedef struct _GetLabourUnionResult GetLabourUnionResult;
typedef struct _CreateLabourUnion CreateLabourUnion;
typedef struct _CreateLabourUnionResult CreateLabourUnionResult;
typedef struct _DeleteLabourUnion DeleteLabourUnion;
typedef struct _DeleteLabourUnionResult DeleteLabourUnionResult;
typedef struct _InviteLabour InviteLabour;
typedef struct _InviteLabourResult InviteLabourResult;
typedef struct _ApplyLabourUnion ApplyLabourUnion;
typedef struct _ApplyLabourUnionResult ApplyLabourUnionResult;
typedef struct _QuitLabourUnion QuitLabourUnion;
typedef struct _QuitLabourUnionResult QuitLabourUnionResult;
typedef struct _KickOutMember KickOutMember;
typedef struct _KickOutMemberResult KickOutMemberResult;
typedef struct _AdjustPrivilege AdjustPrivilege;
typedef struct _AdjustPrivilegeResult AdjustPrivilegeResult;
typedef struct _DepositMoney DepositMoney;
typedef struct _DepositMoneyResult DepositMoneyResult;
typedef struct _WithdrawMoney WithdrawMoney;
typedef struct _WithdrawMoneyResult WithdrawMoneyResult;
typedef struct _DepositItem DepositItem;
typedef struct _DepositItemResult DepositItemResult;
typedef struct _WithdrawItem WithdrawItem;
typedef struct _WithdrawItemResult WithdrawItemResult;
typedef struct _ExpandBank ExpandBank;
typedef struct _ExpandBankResult ExpandBankResult;
typedef struct _GetBankInfo GetBankInfo;
typedef struct _BankItemDefine BankItemDefine;
typedef struct _GetBankInfoResult GetBankInfoResult;
typedef struct _GetBankLog GetBankLog;
typedef struct _GetBankLogResult GetBankLogResult;
typedef struct _SetMainTaskStatus SetMainTaskStatus;
typedef struct _SetMainTaskStatusResult SetMainTaskStatusResult;
typedef struct _PropsInfo PropsInfo;
typedef struct _FightSummary FightSummary;
typedef struct _FightCannonInfo FightCannonInfo;
typedef struct _BattleCaptainInfo BattleCaptainInfo;
typedef struct _FightShipInfo FightShipInfo;
typedef struct _EngageInFight EngageInFight;
typedef struct _EngageInFightResult EngageInFightResult;
typedef struct _EndFightShipInfo EndFightShipInfo;
typedef struct _BattleLogItem BattleLogItem;
typedef struct _BattleLog BattleLog;
typedef struct _EndFight EndFight;
typedef struct _LootDefine LootDefine;
typedef struct _LostGoodsDefine LostGoodsDefine;
typedef struct _SunkShipDetails SunkShipDetails;
typedef struct _SurvivedShipdetails SurvivedShipdetails;
typedef struct _CaptainInfo CaptainInfo;
typedef struct _EndFightResult EndFightResult;
typedef struct _StartAutoFight StartAutoFight;
typedef struct _AutoFightShipInfo AutoFightShipInfo;
typedef struct _StartAutoFightResult StartAutoFightResult;
typedef struct _GetSkillsDetails GetSkillsDetails;
typedef struct _SkillDefine SkillDefine;
typedef struct _GetSkillsDetailsResult GetSkillsDetailsResult;
typedef struct _AddSkillPoint AddSkillPoint;
typedef struct _AddSkillPointResult AddSkillPointResult;
typedef struct _ResetSkillPoints ResetSkillPoints;
typedef struct _ResetSkillPointsResult ResetSkillPointsResult;
typedef struct _NotifyBattleLog NotifyBattleLog;
typedef struct _NotifyBattleLogResult NotifyBattleLogResult;
typedef struct _GetPersonalInfo GetPersonalInfo;
typedef struct _FriendValue FriendValue;
typedef struct _GetPersonalInfoResult GetPersonalInfoResult;
typedef struct _SetBioInfo SetBioInfo;
typedef struct _SetBioInfoResult SetBioInfoResult;
typedef struct _CancelFight CancelFight;
typedef struct _CancelFightResult CancelFightResult;
typedef struct _GuildInfoDefine GuildInfoDefine;
typedef struct _GetGuildList GetGuildList;
typedef struct _GetGuildListResult GetGuildListResult;
typedef struct _GetMyGuildDetails GetMyGuildDetails;
typedef struct _GuildPersonalInfoDefine GuildPersonalInfoDefine;
typedef struct _GuildRelationDefine GuildRelationDefine;
typedef struct _GetMyGuildDetailsResult GetMyGuildDetailsResult;
typedef struct _GetApplyInfo GetApplyInfo;
typedef struct _ApplyPersonInfoDefine ApplyPersonInfoDefine;
typedef struct _GetApplyInfoResult GetApplyInfoResult;
typedef struct _CreateNewGuild CreateNewGuild;
typedef struct _CreateNewGuildResult CreateNewGuildResult;
typedef struct _JoinGuildRequest JoinGuildRequest;
typedef struct _JoinGuildRequestResult JoinGuildRequestResult;
typedef struct _GetGuildDetails GetGuildDetails;
typedef struct _GetGuildDetailsResult GetGuildDetailsResult;
typedef struct _ChangeGuildIntro ChangeGuildIntro;
typedef struct _ChangeGuildIntroResult ChangeGuildIntroResult;
typedef struct _ExpandGuildCapacity ExpandGuildCapacity;
typedef struct _ExpandGuildCapacityResult ExpandGuildCapacityResult;
typedef struct _GuildMemberPermissionDefine GuildMemberPermissionDefine;
typedef struct _GetGuildMemberPermission GetGuildMemberPermission;
typedef struct _GetGuildMemberPermissionResult GetGuildMemberPermissionResult;
typedef struct _SetGuildPermissionDefine SetGuildPermissionDefine;
typedef struct _SetGuildMemberPermission SetGuildMemberPermission;
typedef struct _SetGuildMemberPermissionResult SetGuildMemberPermissionResult;
typedef struct _GetHiredCaptains GetHiredCaptains;
typedef struct _GetHiredCaptainsResult GetHiredCaptainsResult;
typedef struct _DealWithGuildJoin DealWithGuildJoin;
typedef struct _DealWithGuildJoinResult DealWithGuildJoinResult;
typedef struct _ChangeGuildAnnouncement ChangeGuildAnnouncement;
typedef struct _ChangeGuildAnnouncementResult ChangeGuildAnnouncementResult;
typedef struct _RemoveGuildMember RemoveGuildMember;
typedef struct _RemoveGuildMemberResult RemoveGuildMemberResult;
typedef struct _ExitFromGuild ExitFromGuild;
typedef struct _ExitFromGuildResult ExitFromGuildResult;
typedef struct _DismissGuild DismissGuild;
typedef struct _DismissGuildResult DismissGuildResult;
typedef struct _GetSearchGuildList GetSearchGuildList;
typedef struct _GetSearchGuildListResult GetSearchGuildListResult;
typedef struct _RefreshCaptainList RefreshCaptainList;
typedef struct _RefreshCaptainListResult RefreshCaptainListResult;
typedef struct _GetFriendsList GetFriendsList;
typedef struct _FriendsDefine FriendsDefine;
typedef struct _GetFriendsListResult GetFriendsListResult;
typedef struct _GetBlackList GetBlackList;
typedef struct _GetBlackListResult GetBlackListResult;
typedef struct _FriendsOperation FriendsOperation;
typedef struct _FriendsOperationResult FriendsOperationResult;
typedef struct _GetFriendsReqList GetFriendsReqList;
typedef struct _GetFriendsReqListResult GetFriendsReqListResult;
typedef struct _FireCaptain FireCaptain;
typedef struct _FireCaptainResult FireCaptainResult;
typedef struct _DestoryItems DestoryItems;
typedef struct _DestoryItemsResult DestoryItemsResult;
typedef struct _SearchUserByName SearchUserByName;
typedef struct _SearchUserByNameResult SearchUserByNameResult;
typedef struct _TakeAllAttachment TakeAllAttachment;
typedef struct _TakeAllAttachmentResult TakeAllAttachmentResult;
typedef struct _GetItemsDetailInfo GetItemsDetailInfo;
typedef struct _GetItemsDetailInfoResult GetItemsDetailInfoResult;
typedef struct _GetDevGoodsInfo GetDevGoodsInfo;
typedef struct _DevGoodsDetails DevGoodsDetails;
typedef struct _GetDevGoodsInfoResult GetDevGoodsInfoResult;
typedef struct _ProvideDevGoods ProvideDevGoods;
typedef struct _ProvideDevGoodsResult ProvideDevGoodsResult;
typedef struct _GetDevGoodsCount GetDevGoodsCount;
typedef struct _GetDevGoodsCountResult GetDevGoodsCountResult;
typedef struct _GetFriendValue GetFriendValue;
typedef struct _GetFriendValueResult GetFriendValueResult;
typedef struct _GetUserInfoById GetUserInfoById;
typedef struct _GetUserInfoByIdResult GetUserInfoByIdResult;
typedef struct _TestCreateNewGuild TestCreateNewGuild;
typedef struct _TestCreateNewGuildResult TestCreateNewGuildResult;
typedef struct _InviteUserToGuild InviteUserToGuild;
typedef struct _InviteUserToGuildResult InviteUserToGuildResult;
typedef struct _GetInvitationList GetInvitationList;
typedef struct _InvitationDefine InvitationDefine;
typedef struct _GetInvitationListResult GetInvitationListResult;
typedef struct _DealWithInvitation DealWithInvitation;
typedef struct _DealWithInvitationResult DealWithInvitationResult;
typedef struct _GetVTicketMarketItems GetVTicketMarketItems;
typedef struct _VTicketMarketItemDefine VTicketMarketItemDefine;
typedef struct _BlackMarketRandomShipAndEquipDefine BlackMarketRandomShipAndEquipDefine;
typedef struct _GetVTicketMarketItemsResult GetVTicketMarketItemsResult;
typedef struct _BuyVTicketMarketItem BuyVTicketMarketItem;
typedef struct _BuyVTicketMarketItemResult BuyVTicketMarketItemResult;
typedef struct _GetCurrentInvestData GetCurrentInvestData;
typedef struct _GetCurrentInvestDataResult GetCurrentInvestDataResult;
typedef struct _GetUserTasks GetUserTasks;
typedef struct _AttackBossInfo AttackBossInfo;
typedef struct _CompanionTaskDefine CompanionTaskDefine;
typedef struct _GetUserTasksResult GetUserTasksResult;
typedef struct _UseSudanMask UseSudanMask;
typedef struct _UseSudanMaskResult UseSudanMaskResult;
typedef struct _EquipHero EquipHero;
typedef struct _EquipHeroResult EquipHeroResult;
typedef struct _GetHeroEquip GetHeroEquip;
typedef struct _ItemIdPair ItemIdPair;
typedef struct _GetHeroEquipResult GetHeroEquipResult;
typedef struct _BuyCityLicense BuyCityLicense;
typedef struct _BuyCityLicenseResult BuyCityLicenseResult;
typedef struct _DeleteUser DeleteUser;
typedef struct _DeleteUserResult DeleteUserResult;
typedef struct _ChangePassword ChangePassword;
typedef struct _ChangePasswordResult ChangePasswordResult;
typedef struct _SelectHeroPositiveSkill SelectHeroPositiveSkill;
typedef struct _SelectHeroPositiveSkillResult SelectHeroPositiveSkillResult;
typedef struct _GetHeroPositiveSkillList GetHeroPositiveSkillList;
typedef struct _GetHeroPositiveSkillListResult GetHeroPositiveSkillListResult;
typedef struct _GetSelectedPositiveSkills GetSelectedPositiveSkills;
typedef struct _PositiveSkill PositiveSkill;
typedef struct _GetSelectedPositiveSkillsResult GetSelectedPositiveSkillsResult;
typedef struct _GetSailInfo GetSailInfo;
typedef struct _GetSailInfoResult GetSailInfoResult;
typedef struct _InsertUserName InsertUserName;
typedef struct _InsertUserNameResult InsertUserNameResult;
typedef struct _GetLeaderboard GetLeaderboard;
typedef struct _LeaderboardItem LeaderboardItem;
typedef struct _GetLeaderboardResult GetLeaderboardResult;
typedef struct _GetCityStatus GetCityStatus;
typedef struct _GetCityStatusResult GetCityStatusResult;
typedef struct _GetDiscoveredCities GetDiscoveredCities;
typedef struct _GetDiscoveredCitiesResult GetDiscoveredCitiesResult;
typedef struct _AddDiscoveredCity AddDiscoveredCity;
typedef struct _AddDiscoveredCityResult AddDiscoveredCityResult;
typedef struct _ForceFightStatus ForceFightStatus;
typedef struct _ForceFightStatusResult ForceFightStatusResult;
typedef struct _GetCityProduces GetCityProduces;
typedef struct _CityProduceDefine CityProduceDefine;
typedef struct _GetCityProducesResult GetCityProducesResult;
typedef struct _GetCityDemands GetCityDemands;
typedef struct _CityDemandsDefine CityDemandsDefine;
typedef struct _GetCityDemandsResult GetCityDemandsResult;
typedef struct _GetMainTask GetMainTask;
typedef struct _GetMainTaskResult GetMainTaskResult;
typedef struct _CompleteMainTask CompleteMainTask;
typedef struct _CompleteMainTaskResult CompleteMainTaskResult;
typedef struct _GetMainTaskReward GetMainTaskReward;
typedef struct _GetMainTaskRewardResult GetMainTaskRewardResult;
typedef struct _GetEventTaskList GetEventTaskList;
typedef struct _EventTaskListDefine EventTaskListDefine;
typedef struct _GetEventTaskListResult GetEventTaskListResult;
typedef struct _HandleEventTask HandleEventTask;
typedef struct _HandleEventTaskResult HandleEventTaskResult;
typedef struct _GetNpcScore GetNpcScore;
typedef struct _GetNpcScoreResult GetNpcScoreResult;
typedef struct _GetServerInfo GetServerInfo;
typedef struct _GetServerInfoResult GetServerInfoResult;
typedef struct _PingServer PingServer;
typedef struct _PingServerResult PingServerResult;
typedef struct _ExpandPackageSize ExpandPackageSize;
typedef struct _ExpandPackageSizeResult ExpandPackageSizeResult;
typedef struct _GetPretaskItems GetPretaskItems;
typedef struct _PretaskItemDefine PretaskItemDefine;
typedef struct _GetPretaskItemsResult GetPretaskItemsResult;
typedef struct _GetOnsaleItems GetOnsaleItems;
typedef struct _OnsaleItemDefine OnsaleItemDefine;
typedef struct _OnsaleItemPackageDefine OnsaleItemPackageDefine;
typedef struct _GetOnsaleItemsResult GetOnsaleItemsResult;
typedef struct _BuyOnsaleItems BuyOnsaleItems;
typedef struct _BuyOnsaleItemsResult BuyOnsaleItemsResult;
typedef struct _SendCustomServiceInfo SendCustomServiceInfo;
typedef struct _SendCustomServiceInfoResult SendCustomServiceInfoResult;
typedef struct _GetIABItem GetIABItem;
typedef struct _GetIABItemResult GetIABItemResult;
typedef struct _ChangeEmail ChangeEmail;
typedef struct _ChangeEmailResult ChangeEmailResult;
typedef struct _TokenLogin TokenLogin;
typedef struct _EngageInFightForTask EngageInFightForTask;
typedef struct _EngageInFightForTaskResult EngageInFightForTaskResult;
typedef struct _AuthenticateAccount AuthenticateAccount;
typedef struct _AuthenticateAccountResult AuthenticateAccountResult;
typedef struct _Salvage Salvage;
typedef struct _SalvageResult SalvageResult;
typedef struct _GetEmailVerifiedReward GetEmailVerifiedReward;
typedef struct _GetEmailVerifiedRewardResult GetEmailVerifiedRewardResult;
typedef struct _StartSalvage StartSalvage;
typedef struct _StartSalvageResult StartSalvageResult;
typedef struct _GetEmailVerifiedInfo GetEmailVerifiedInfo;
typedef struct _GetEmailVerifiedInfoResult GetEmailVerifiedInfoResult;
typedef struct _GetSalvageCondition GetSalvageCondition;
typedef struct _GetSalvageConditionResult GetSalvageConditionResult;
typedef struct _GetActivitiesProps GetActivitiesProps;
typedef struct _GetActivitiesPropsResult GetActivitiesPropsResult;
typedef struct _GetActivitiesGiftInfo GetActivitiesGiftInfo;
typedef struct _GetActivitiesGiftInfoResult GetActivitiesGiftInfoResult;
typedef struct _GetActivitiesPrayInfo GetActivitiesPrayInfo;
typedef struct _GetActivitiesPrayInfoResult GetActivitiesPrayInfoResult;
typedef struct _GetPray GetPray;
typedef struct _GetPrayResult GetPrayResult;
typedef struct _SendActivitiesGift SendActivitiesGift;
typedef struct _SendActivitiesGiftResult SendActivitiesGiftResult;
typedef struct _GetPirateAttackInfo GetPirateAttackInfo;
typedef struct _GetPirateAttackInfoResult GetPirateAttackInfoResult;
typedef struct _GetAttackPirateInfo GetAttackPirateInfo;
typedef struct _GetAttackPirateInfoResult GetAttackPirateInfoResult;
typedef struct _GetVTicketMarketActivities GetVTicketMarketActivities;
typedef struct _VTicketMarketActivitiesDefine VTicketMarketActivitiesDefine;
typedef struct _GetVTicketMarketActivitiesResult GetVTicketMarketActivitiesResult;
typedef struct _BuyVTicketMarketActivities BuyVTicketMarketActivities;
typedef struct _BuyVTicketMarketActivitiesResult BuyVTicketMarketActivitiesResult;
typedef struct _FinalMyExploitScore FinalMyExploitScore;
typedef struct _FinalMyExploitScoreResult FinalMyExploitScoreResult;
typedef struct _FindLootPlayer FindLootPlayer;
typedef struct _CharacterInfo CharacterInfo;
typedef struct _FindLootPlayerResult FindLootPlayerResult;
typedef struct _LootPlayer LootPlayer;
typedef struct _LootPlayerResult LootPlayerResult;
typedef struct _GetLootPlayerLog GetLootPlayerLog;
typedef struct _LootLog LootLog;
typedef struct _GetLootPlayerLogResult GetLootPlayerLogResult;
typedef struct _StartRevengeOnLootPlayer StartRevengeOnLootPlayer;
typedef struct _AttackPirateDataInfo AttackPirateDataInfo;
typedef struct _GetAttackPirateRankInfo GetAttackPirateRankInfo;
typedef struct _GetAttackPirateRankInfoResult GetAttackPirateRankInfoResult;
typedef struct _GetAttackPirateBossInfo GetAttackPirateBossInfo;
typedef struct _GetAttackPirateBossInfoResult GetAttackPirateBossInfoResult;
typedef struct _InsuranceItem InsuranceItem;
typedef struct _InsuranceItemStatus InsuranceItemStatus;
typedef struct _BuyInsurance BuyInsurance;
typedef struct _BuyInsuranceResult BuyInsuranceResult;
typedef struct _CompleteDialogs CompleteDialogs;
typedef struct _CompleteDialogsResult CompleteDialogsResult;
typedef struct _ObtainLottoMessage ObtainLottoMessage;
typedef struct _LottoMessage LottoMessage;
typedef struct _ObtainLottoMessageResult ObtainLottoMessageResult;
typedef struct _GetInviteBonus GetInviteBonus;
typedef struct _GetInviteBonusResult GetInviteBonusResult;
typedef struct _CompanyDefine CompanyDefine;
typedef struct _GetCompanies GetCompanies;
typedef struct _GetCompaniesResult GetCompaniesResult;
typedef struct _EquipCompany EquipCompany;
typedef struct _EquipCompanyResult EquipCompanyResult;
typedef struct _UnlockCompany UnlockCompany;
typedef struct _UnlockCompanyResult UnlockCompanyResult;
typedef struct _GetCompanionsStatus GetCompanionsStatus;
typedef struct _CompanionsStatus CompanionsStatus;
typedef struct _GetCompanionsStatusResult GetCompanionsStatusResult;
typedef struct _UnlockShipCabin UnlockShipCabin;
typedef struct _UnlockShipCabinResult UnlockShipCabinResult;
typedef struct _GetShipCompanions GetShipCompanions;
typedef struct _ShipGearDetail ShipGearDetail;
typedef struct _GetShipCompanionsResult GetShipCompanionsResult;
typedef struct _SetShipCompanions SetShipCompanions;
typedef struct _SetShipCompanionsResult SetShipCompanionsResult;
typedef struct _SaveFailedFight SaveFailedFight;
typedef struct _SaveFailedFightResult SaveFailedFightResult;
typedef struct _EndFailedFightByVTicket EndFailedFightByVTicket;
typedef struct _EndFailedFightByVTicketResult EndFailedFightByVTicketResult;
typedef struct _CompleteCompanionTask CompleteCompanionTask;
typedef struct _CompleteCompanionTaskResult CompleteCompanionTaskResult;
typedef struct _DeductCoins DeductCoins;
typedef struct _DeductCoinsResult DeductCoinsResult;
typedef struct _UpdateUserSelection UpdateUserSelection;
typedef struct _UpdateDataVersion UpdateDataVersion;
typedef struct _UpdateDataVersionResult UpdateDataVersionResult;
typedef struct _CalFastHireCrew CalFastHireCrew;
typedef struct _CalFastHireCrewResult CalFastHireCrewResult;
typedef struct _CompanionRebirth CompanionRebirth;
typedef struct _CompanionRebirthResult CompanionRebirthResult;
typedef struct _RepairEquipment RepairEquipment;
typedef struct _RepairEquipmentResult RepairEquipmentResult;
typedef struct _GetRepairEquipmentNeed GetRepairEquipmentNeed;
typedef struct _GetRepairEquipmentNeedResult GetRepairEquipmentNeedResult;
typedef struct _RecentOrderDefine RecentOrderDefine;
typedef struct _GetRecentOrder GetRecentOrder;
typedef struct _GetRecentOrderResult GetRecentOrderResult;
typedef struct _GetDropIncreaseRateInfo GetDropIncreaseRateInfo;
typedef struct _GetDropIncreaseRateInfoResult GetDropIncreaseRateInfoResult;
typedef struct _GetDailyActivitiesReward GetDailyActivitiesReward;
typedef struct _GetDailyActivitiesRewardResult GetDailyActivitiesRewardResult;
typedef struct _AddProficiency AddProficiency;
typedef struct _AddProficiencyResult AddProficiencyResult;
typedef struct _GetProficiencyValues GetProficiencyValues;
typedef struct _ProficiencyDefine ProficiencyDefine;
typedef struct _GetProficiencyValuesResult GetProficiencyValuesResult;
typedef struct _GetProficiencyBook GetProficiencyBook;
typedef struct _GetProficiencyBookResult GetProficiencyBookResult;
typedef struct _RepairCityDefenseInWar RepairCityDefenseInWar;
typedef struct _RepairCityDefenseInWarResult RepairCityDefenseInWarResult;
typedef struct _EnhanceAttack EnhanceAttack;
typedef struct _EnhanceAttackResult EnhanceAttackResult;
typedef struct _GetCityPrepareStatus GetCityPrepareStatus;
typedef struct _NationWarPair NationWarPair;
typedef struct _GetCityPrepareStatusResult GetCityPrepareStatusResult;
typedef struct _StartAttackCity StartAttackCity;
typedef struct _CityStatus CityStatus;
typedef struct _StartAttackCityResult StartAttackCityResult;
typedef struct _GetEnemyNation GetEnemyNation;
typedef struct _EnemyNation EnemyNation;
typedef struct _GetEnemyNationResult GetEnemyNationResult;
typedef struct _AddCityRepairPool AddCityRepairPool;
typedef struct _AddCityRepairPoolResult AddCityRepairPoolResult;
typedef struct _AddCityAttackPool AddCityAttackPool;
typedef struct _AddCityAttackPoolResult AddCityAttackPoolResult;
typedef struct _GetPackageInfo GetPackageInfo;
typedef struct _GetPackageInfoResult GetPackageInfoResult;
typedef struct _ApplyStateWar ApplyStateWar;
typedef struct _ApplyStateWarResult ApplyStateWarResult;
typedef struct _ContributionRankInfo ContributionRankInfo;
typedef struct _GetContributionRank GetContributionRank;
typedef struct _GetContributionRankResult GetContributionRankResult;
typedef struct _AddSupplyStation AddSupplyStation;
typedef struct _AddSupplyStationResult AddSupplyStationResult;
typedef struct _HireArmy HireArmy;
typedef struct _HireArmyResult HireArmyResult;
typedef struct _GetNationWarEntrance GetNationWarEntrance;
typedef struct _GetNationWarEntranceResult GetNationWarEntranceResult;
typedef struct _EndAttackCity EndAttackCity;
typedef struct _EndAttackCityResult EndAttackCityResult;
typedef struct _EnterDepotRepair EnterDepotRepair;
typedef struct _EnterDepotRepairResult EnterDepotRepairResult;
typedef struct _GetNationWarCityLost GetNationWarCityLost;
typedef struct _CityLost CityLost;
typedef struct _GetNationWarCityLostResult GetNationWarCityLostResult;
typedef struct _NationWarCharacterShip NationWarCharacterShip;
typedef struct _NationWarCharacterStatus NationWarCharacterStatus;
typedef struct _NationWarBattleTurnResult NationWarBattleTurnResult;
typedef struct _ReachDepot ReachDepot;
typedef struct _ReachDepotResult ReachDepotResult;
typedef struct _ReduceInNationWar ReduceInNationWar;
typedef struct _ReduceInfo ReduceInfo;
typedef struct _ReduceInNationWarResult ReduceInNationWarResult;
typedef struct _GetMyNationWar GetMyNationWar;
typedef struct _GetMyNationWarResult GetMyNationWarResult;
typedef struct _FuncForTest FuncForTest;
typedef struct _FuncForTestResult FuncForTestResult;
typedef struct _CheckDeleteCharactersNum CheckDeleteCharactersNum;
typedef struct _CheckDeleteCharactersNumResult CheckDeleteCharactersNumResult;
typedef struct _GetPlayerEquipShipInfo GetPlayerEquipShipInfo;
typedef struct _GetPlayerEquipShipInfoResult GetPlayerEquipShipInfoResult;
typedef struct _GetPlayerShipList GetPlayerShipList;
typedef struct _PlayerShipSimpleInfo PlayerShipSimpleInfo;
typedef struct _GetPlayerShipListResult GetPlayerShipListResult;
typedef struct _FireCrew FireCrew;
typedef struct _FireCrewResult FireCrewResult;
typedef struct _GetForceCity GetForceCity;
typedef struct _GetForceCityResult GetForceCityResult;
typedef struct _SaveItemsToWarehouse SaveItemsToWarehouse;
typedef struct _SaveItemsToWarehouseResult SaveItemsToWarehouseResult;
typedef struct _ExpandWarehouse ExpandWarehouse;
typedef struct _ExpandWarehouseResult ExpandWarehouseResult;
typedef struct _GetChangeLog GetChangeLog;
typedef struct _GetChangeLogResult GetChangeLogResult;
typedef struct _CompleteSecondaryTask CompleteSecondaryTask;
typedef struct _CompleteSecondaryTaskResult CompleteSecondaryTaskResult;


/* --- enums --- */

typedef enum _ServerVerion {
  SERVER_VERION__VERSION = 150
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SERVER_VERION)
} ServerVerion;

/* --- messages --- */

struct  _ConfigJsonMd5
{
  ProtobufCMessage base;
  char *filename;
  ProtobufCBinaryData md5;
  int32_t version;
};
#define CONFIG_JSON_MD5__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config_json_md5__descriptor) \
    , NULL, {0,NULL}, 0 }


struct  _ConfigJsonResult
{
  ProtobufCMessage base;
  char *filename;
  ProtobufCBinaryData md5;
  int32_t version;
  ProtobufCBinaryData filecontent;
  int32_t fileorgsize;
};
#define CONFIG_JSON_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config_json_result__descriptor) \
    , NULL, {0,NULL}, 0, {0,NULL}, 0 }


struct  _EmailLogin
{
  ProtobufCMessage base;
  char *email;
  /*
   *required string passwd = 2;
   */
  ProtobufCBinaryData passwd1;
  char *networktype;
  ServerVerion version;
  char *changedemail;
  int32_t languagecode;
  char *apiurl;
  char *deviceinfo;
  char *refcode;
  char *device_hash;
  size_t n_jsonmd5;
  ConfigJsonMd5 **jsonmd5;
  char *notificationid;
  /*
   *android 0,ios 1,pc 2
   */
  int32_t ostype;
};
#define EMAIL_LOGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&email_login__descriptor) \
    , NULL, {0,NULL}, NULL, SERVER_VERION__VERSION, NULL, 0, NULL, NULL, NULL, NULL, 0,NULL, NULL, 0 }


struct  _Activity
{
  ProtobufCMessage base;
  int32_t type;
  int32_t index;
};
#define ACTIVITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&activity__descriptor) \
    , 0, 0 }


struct  _Task
{
  ProtobufCMessage base;
  int32_t type;
  int32_t index;
};
#define TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task__descriptor) \
    , 0, 0 }


struct  _SysMessage
{
  ProtobufCMessage base;
  int32_t type;
  int32_t index;
  /*
   *参数
   */
  char *param;
};
#define SYS_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sys_message__descriptor) \
    , 0, 0, NULL }


struct  _City
{
  ProtobufCMessage base;
  int32_t nameidx;
  int32_t nation;
  int32_t status;
  int32_t devlevel;
  int32_t investtotal;
  int32_t type;
  int32_t cityid;
};
#define CITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&city__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _SeaEventDefine
{
  ProtobufCMessage base;
  int32_t type;
  int32_t x;
  int32_t y;
  int32_t r;
  int32_t eventid;
  int32_t npcid;
  /*
   *0-100
   */
  int32_t rate;
  /*
   *for type 7-9
   */
  int32_t days;
  int32_t isfriendnpc;
  int32_t npcforceid;
  /*
   *required int32 npcLevelStart = 11;
   *required int32 npcLevelEnd = 12;
   */
  int32_t npclevel;
};
#define SEA_EVENT_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sea_event_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _SeaBlockInfo
{
  ProtobufCMessage base;
  int32_t x;
  int32_t y;
  int32_t width;
  int32_t height;
  size_t n_events;
  SeaEventDefine **events;
  int64_t eventversion;
  /*
   *required int32 fightNpcId = 7;//force exiting duration battle
   */
  int32_t tasknpcid;
};
#define SEA_BLOCK_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sea_block_info__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0, 0 }


struct  _DailyRewardData
{
  ProtobufCMessage base;
  int32_t tableindex;
  int32_t rewardindex;
  int32_t sid;
};
#define DAILY_REWARD_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&daily_reward_data__descriptor) \
    , 0, 0, 0 }


struct  _LoginFirstData
{
  ProtobufCMessage base;
  char *heroname;
  int64_t exp;
  int32_t level;
  int64_t gold;
  int64_t coin;
  int64_t prestige;
  int32_t packagesize;
  int32_t banksize;
  int32_t nation;
  int32_t gender;
  int32_t iconidx;
  City *lastcity;
  /*
   *optional SeaBlockInfo seaInfo = 13;
   */
  int32_t currentsupply;
  int32_t currentcrewnum;
  int32_t endurancedays;
  int32_t sailingdays;
  int32_t sid;
  int32_t speed;
  /*
   *repeated int32 visitedCityIds = 20;
   */
  int32_t guildid;
  int32_t cid;
  int32_t maxsupply;
  int32_t maxcrewnum;
  /*
   *required int32 totalContinuousDays = 25;
   *repeated DailyRewardData dailyRewardData = 26;
   *repeated int32 discoverdCityIds = 27;
   */
  int32_t requiredsailorcount;
  /*
   *required int32 fightNpcId = 29;//force exiting duration battle
   */
  size_t n_wantedforceids;
  int32_t *wantedforceids;
  int32_t shipnum;
  int32_t isgamemaster;
};
#define LOGIN_FIRST_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login_first_data__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0 }


struct  _EmailLoginResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t userid;
  int32_t sessionid;
  /*
   *optional LoginFirstData data = 3;
   */
  int32_t lastcityid;
  int32_t shipx;
  int32_t shipy;
  int32_t needcreatecharacter;
  size_t n_dailyrewarddata;
  DailyRewardData **dailyrewarddata;
  int32_t totalcontinuousdays;
  int32_t maintaskstatus;
  /*
   *required int32 clientVersion = 9;
   */
  ServerVerion serverversion;
  int32_t guildid;
  char *heroname;
  int64_t exp;
  int32_t cid;
  int64_t gold;
  int64_t coin;
  int64_t prestige;
  int32_t packagesize;
  int32_t banksize;
  int32_t nation;
  int32_t gender;
  int32_t iconidx;
  char *email;
  /*
   * 0,email, 1 token
   */
  int32_t logtype;
  char *password;
  char *chatservertoken;
  int32_t authenticated;
  int32_t waitforbattleseconds;
  int64_t delegatecoins;
  int32_t attackedtimes;
  char *fbinvitecode;
  int32_t currentserverdataversion;
  int32_t currentcharacterdataversion;
  size_t n_popuserselectversions;
  int32_t *popuserselectversions;
  int32_t isgamemaster;
  size_t n_refreshjson;
  ConfigJsonResult **refreshjson;
};
#define EMAIL_LOGIN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&email_login_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0, SERVER_VERION__VERSION, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, NULL, NULL, 0, 0, 0, 0, NULL, 0, 0, 0,NULL, 0, 0,NULL }


struct  _RegisterUser
{
  ProtobufCMessage base;
  char *email;
  char *networktype;
  ServerVerion version;
  ProtobufCBinaryData passwd1;
  char *recommendedname;
  int32_t fromtokenlogin;
  int32_t languagecode;
  char *apiurl;
  char *device_hash;
  char *deviceinfo;
  char *refcode;
  char *notificationid;
  /*
   *android 0,ios 1,pc 2
   */
  int32_t ostype;
};
#define REGISTER_USER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&register_user__descriptor) \
    , NULL, NULL, SERVER_VERION__VERSION, {0,NULL}, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, 0 }


struct  _ProtoSample
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t argu1;
};
#define PROTO_SAMPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_sample__descriptor) \
    , 0, 0, 0 }


struct  _ProtoSampleResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t result;
};
#define PROTO_SAMPLE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_sample_result__descriptor) \
    , 0, 0 }


struct  _RegisterUserResult
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t reason;
  /*
   *required string passwd = 4;
   *required int32 clientVersion = 5;
   */
  ServerVerion serverversion;
  /*
   *get name from google
   */
  char *recommendedname;
  /*
   * 0,email, 1 token
   */
  int32_t logtype;
};
#define REGISTER_USER_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&register_user_result__descriptor) \
    , 0, 0, 0, SERVER_VERION__VERSION, NULL, 0 }


struct  _CreateCharacter
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *1,战斗女，2 辅助女，3 战斗男，4，辅助男
   */
  int32_t companiontype;
  /*
   * 1-7
   */
  int32_t nationidx;
  /*
   *required int32  iconIdx = 5;
   *required int32  gender = 6;
   */
  char *notificationid;
  /*
   *android 0,ios 1,pc 2
   */
  int32_t ostype;
};
#define CREATE_CHARACTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_character__descriptor) \
    , 0, 0, 0, 0, NULL, 0 }


struct  _CreateCharacterFailed
{
  ProtobufCMessage base;
  int32_t reason;
};
#define CREATE_CHARACTER_FAILED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_character_failed__descriptor) \
    , 0 }


struct  _GetFleetCargo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_FLEET_CARGO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_fleet_cargo__descriptor) \
    , 0, 0 }


struct  _FleetCaptain
{
  ProtobufCMessage base;
  int32_t captainid;
  int32_t iscaptain;
};
#define FLEET_CAPTAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fleet_captain__descriptor) \
    , 0, 0 }


struct  _ShipDefine
{
  ProtobufCMessage base;
  int32_t id;
  int32_t sid;
  int32_t position;
  int32_t crew_num;
  char *cannon_id;
  int32_t cannon_num;
  char *armor_id;
  int32_t armor_num;
  int32_t rigged_id;
  int32_t rigged_num;
  char *spinnaker_id;
  int32_t spinnaker_num;
  int32_t bow_gun_id;
  int32_t aft_gun_id;
  int32_t bow_icon_id;
  FleetCaptain *captain_id;
  int32_t hp;
  int32_t name;
  int32_t current_cargo_size;
  int32_t current_cargo_kind;
  int32_t cargo_size;
  int32_t cargo_kind;
  int32_t speed;
  int32_t steer_speed;
  int32_t defence;
  int32_t hp_max;
  int32_t max_crew_num;
  int32_t max_cannon_num;
  int32_t max_armor_num;
  int32_t max_spinnaker_num;
  int32_t max_rigged_num;
  int32_t material;
  int32_t price;
  int32_t model_name;
  int32_t current_hp_max;
  char *user_define_name;
  int32_t supply;
  int64_t arrivedocktime;
  int32_t optionid1;
  int32_t optionid2;
  int32_t max_supply;
  int32_t crew_required;
  int32_t requiredlv;
  int32_t attack;
  int32_t optionalnum;
  char *optional_value;
  int32_t city_id;
  int32_t old_ship;
};
#define SHIP_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ship_define__descriptor) \
    , 0, 0, 0, 0, NULL, 0, NULL, 0, 0, 0, NULL, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0 }


struct  _GoodsDefine
{
  ProtobufCMessage base;
  int32_t id;
  int32_t nameidx;
  int32_t price;
  int32_t category;
  int32_t required_lv;
  int32_t weight;
  int32_t amount;
  int32_t proto_id;
};
#define GOODS_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&goods_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _ShipGoods
{
  ProtobufCMessage base;
  size_t n_goods;
  GoodsDefine **goods;
};
#define SHIP_GOODS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ship_goods__descriptor) \
    , 0,NULL }


struct  _GetFleetCargoResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_ships;
  ShipDefine **ships;
  size_t n_shipgoods;
  ShipGoods **shipgoods;
};
#define GET_FLEET_CARGO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_fleet_cargo_result__descriptor) \
    , 0, 0,NULL, 0,NULL }


struct  _GetGoodsForShip
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t shipid;
};
#define GET_GOODS_FOR_SHIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_goods_for_ship__descriptor) \
    , 0, 0, 0 }


struct  _GetGoodsForShipResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_goods;
  GoodsDefine **goods;
};
#define GET_GOODS_FOR_SHIP_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_goods_for_ship_result__descriptor) \
    , 0, 0,NULL }


struct  _ExchangeGoodsForShips
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t firestshipid;
  int32_t secondshipid;
  size_t n_firstshipgoodsids;
  int32_t *firstshipgoodsids;
  size_t n_secondshipgoodsids;
  int32_t *secondshipgoodsids;
  size_t n_firstshipgoodsamounts;
  int32_t *firstshipgoodsamounts;
  size_t n_secondshipgoodsamounts;
  int32_t *secondshipgoodsamounts;
};
#define EXCHANGE_GOODS_FOR_SHIPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&exchange_goods_for_ships__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _ExchangeGoodsForShipsResult
{
  ProtobufCMessage base;
  int32_t result;
};
#define EXCHANGE_GOODS_FOR_SHIPS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&exchange_goods_for_ships_result__descriptor) \
    , 0 }


struct  _CheckMailBox
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define CHECK_MAIL_BOX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&check_mail_box__descriptor) \
    , 0, 0 }


struct  _CheckMailBoxResult
{
  ProtobufCMessage base;
  int32_t failed;
  /*
   *repeated int32 mailIds = 2;
   */
  /*
   *ignored
   */
  int32_t dummy;
  int32_t newskillpoints;
  int32_t newfriendsreqs;
  int32_t newguildreqs;
  int32_t taskcompleted;
  int32_t newmailcount;
  int32_t authenticated;
  int32_t getemailverifiedreward;
  /*
   *1 start
   */
  int32_t startpirateattact;
  /*
   *1 start
   */
  int32_t startattackpirate;
  int32_t insurancestatus;
  int32_t sidetaskneedgoodsid;
  int32_t sidetaskoffernum;
  int32_t sidetaskneednum;
  int32_t sidetaskid;
  int32_t current_package_size;
  int32_t max_package_size;
  int32_t daily_activity_finish;
  int32_t can_pray;
};
#define CHECK_MAIL_BOX_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&check_mail_box_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetMailList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_MAIL_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_mail_list__descriptor) \
    , 0, 0 }


struct  _MailDefine
{
  ProtobufCMessage base;
  int32_t mailid;
  char *peername;
  /*
   *required string receiverName = 3;
   */
  char *title;
  char *message;
  int64_t sendtime;
  int32_t attachid;
  int32_t attachtype;
  int32_t attachamount;
  int64_t goodnum;
  int64_t coinnum;
  int32_t status;
  int32_t cantakeattachment;
  int32_t mailtype;
  int32_t peerid;
  int32_t peericon;
  int32_t optionalitemnum;
  int32_t uniqueid;
  int64_t fame;
  int64_t sailor_coin;
};
#define MAIL_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mail_define__descriptor) \
    , 0, NULL, NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetMailListResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_inbox;
  MailDefine **inbox;
  size_t n_outbox;
  MailDefine **outbox;
  size_t n_system;
  MailDefine **system;
  size_t n_coceral;
  MailDefine **coceral;
  /*
   *repeated MailDefine draft = 7;
   */
  size_t n_dustbin;
  MailDefine **dustbin;
};
#define GET_MAIL_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_mail_list_result__descriptor) \
    , 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _SendMail
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  char *receivername;
  /*
   *coceral or nomal
   */
  int32_t coceral;
  char *title;
  char *message;
  int32_t attachid;
  int32_t attachtype;
  int32_t attachamount;
  int64_t goldnum;
  int64_t coinnum;
};
#define SEND_MAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_mail__descriptor) \
    , 0, 0, NULL, 0, NULL, NULL, 0, 0, 0, 0, 0 }


struct  _SendMailResult
{
  ProtobufCMessage base;
  int32_t failed;
  MailDefine *mail;
  int64_t usercoins;
  int64_t usergolds;
  int64_t fame;
  int64_t exp;
};
#define SEND_MAIL_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_mail_result__descriptor) \
    , 0, NULL, 0, 0, 0, 0 }


struct  _SalvageItem
{
  ProtobufCMessage base;
  int32_t itemid;
  int32_t itemcount;
};
#define SALVAGE_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&salvage_item__descriptor) \
    , 0, 0 }


struct  _MarkMailStatus
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  size_t n_mailids;
  int32_t *mailids;
  /*
   *1,mark as read. 2, move to recycle bin. 3 ,delete permanently. 4,restore from recycle bin. 5, fetch attachment.
   */
  int32_t action;
};
#define MARK_MAIL_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mark_mail_status__descriptor) \
    , 0, 0, 0,NULL, 0 }


struct  _MarkMailStatusResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t action;
  int64_t usercoins;
  int64_t usergolds;
  int64_t fame;
  int64_t exp;
  int64_t addsailorcoins;
  int64_t sailorcoins;
  int64_t giftaddcoins;
  int64_t addgolds;
  SalvageItem *item;
  size_t n_succrecvmailids;
  int32_t *succrecvmailids;
};
#define MARK_MAIL_STATUS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mark_mail_status_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0,NULL }


struct  _GetItemsBeingSold
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t itemtype;
};
#define GET_ITEMS_BEING_SOLD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_items_being_sold__descriptor) \
    , 0, 0, 0 }


struct  _BeingSoldItemsDefine
{
  ProtobufCMessage base;
  int32_t itemid;
  int64_t lastprice;
  int32_t ispopular;
  int32_t charcteritemid;
  int32_t optionalnum;
  int32_t weight;
  /*
   *required int32 optionItemCount = 7;
   *optional ShipDefine ships = 7;
   *optional EquipmentDefine equipments = 8;
   *optional DrawingItemsDefine drawings = 9;
   */
  int32_t optionalitemnum;
};
#define BEING_SOLD_ITEMS_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&being_sold_items_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _GetItemsBeingSoldResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t itemtype;
  int64_t gold;
  int64_t coin;
  size_t n_items;
  BeingSoldItemsDefine **items;
  int64_t fame;
  /*
   *required int32 hasLicense = 8;
   *repeated HatchItemsDefine goods = 8;
   */
  int64_t exp;
};
#define GET_ITEMS_BEING_SOLD_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_items_being_sold_result__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0, 0 }


struct  _GetLastPrice
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t itemtype;
  size_t n_itemids;
  int32_t *itemids;
};
#define GET_LAST_PRICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_last_price__descriptor) \
    , 0, 0, 0, 0,NULL }


struct  _GetLastPriceResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t itemtype;
  size_t n_itemprices;
  int32_t *itemprices;
  size_t n_itemcurrencytype;
  int32_t *itemcurrencytype;
};
#define GET_LAST_PRICE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_last_price_result__descriptor) \
    , 0, 0, 0,NULL, 0,NULL }


struct  _GetOrderList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t issell;
};
#define GET_ORDER_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_order_list__descriptor) \
    , 0, 0, 0 }


struct  _OrderDefine
{
  ProtobufCMessage base;
  int32_t itemtype;
  int32_t itemid;
  int64_t price;
  int32_t currency;
  int64_t number;
  int64_t exptime;
  char *orderid;
  int32_t cityid;
  int64_t uniqueid;
  int32_t tax;
  int32_t optionalitemnum;
  char *item_name;
};
#define ORDER_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&order_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, NULL }


struct  _GetOrderListResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t maxordernum;
  int64_t fee;
  int64_t tax;
  int64_t gold;
  int64_t coin;
  size_t n_orders;
  OrderDefine **orders;
  size_t n_skills;
  SkillDefine **skills;
  int64_t fame;
  int64_t exp;
  int32_t currentordernum2;
  int32_t captain_special_skill_about_decrease_tax_id;
  /*
   *小伙伴技能,技能id是3或者4
   */
  int32_t captain_special_skill_about_decrease_tax_level;
  int32_t captain_special_skill_about_decrease_tax_captain_id;
};
#define GET_ORDER_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_order_list_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0 }


struct  _BuyItemShipDetail
{
  ProtobufCMessage base;
  int32_t shipid;
  int64_t count;
};
#define BUY_ITEM_SHIP_DETAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_item_ship_detail__descriptor) \
    , 0, 0 }


struct  _BuyItem
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t itemtype;
  int32_t itemid;
  float averageprice;
  size_t n_shipcount;
  BuyItemShipDetail **shipcount;
  int64_t count;
  int32_t characteritemid;
  int32_t optionalnum;
  int32_t npconly;
};
#define BUY_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_item__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0 }


struct  _BuyItemResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t itemtype;
  int32_t itemid;
  int64_t count;
  int64_t totalprice;
  int64_t usercoins;
  int64_t usergolds;
  int32_t characteritemid;
  int32_t optionalnum;
  float resaverageprice;
  int64_t fame;
  int64_t exp;
  int64_t taxamount;
  int64_t totalcount;
};
#define BUY_ITEM_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_item_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _SellItem
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t itemtype;
  int32_t itemid;
  int64_t count;
  float averageprice;
  /*
   *required int32 currencyType = 7;
   */
  int32_t characteritemid;
  int32_t optionalnum;
  int32_t npconly;
};
#define SELL_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sell_item__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _SellItemResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t itemtype;
  int32_t itemid;
  int64_t count;
  int64_t totalprice;
  int64_t usercoins;
  int64_t usergolds;
  int64_t earnings;
  int32_t characteritemid;
  int32_t optioinalnum;
  float resaverageprice;
  int64_t fame;
  int64_t exp;
  int64_t reqcount;
  int32_t newlevel;
  int64_t taxamount;
  int32_t expadded;
  int32_t fameadded;
  size_t n_captains;
  CaptainInfo **captains;
  int32_t new_fame_level;
};
#define SELL_ITEM_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sell_item_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0 }


struct  _CreateOrder
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t itemtype;
  int32_t itemid;
  int64_t count;
  int64_t price;
  int32_t currencytype;
  int32_t isbid;
  int32_t expdays;
  int32_t characteritemid;
  int32_t optionalnum;
};
#define CREATE_ORDER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_order__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _CreateOrderResult
{
  ProtobufCMessage base;
  int32_t failed;
  char *orderid;
};
#define CREATE_ORDER_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_order_result__descriptor) \
    , 0, NULL }


struct  _SearchTradeItems
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  size_t n_itemtypes;
  int32_t *itemtypes;
  size_t n_itemids;
  int32_t *itemids;
};
#define SEARCH_TRADE_ITEMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&search_trade_items__descriptor) \
    , 0, 0, 0,NULL, 0,NULL }


struct  _SearchTradeItemsResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_itemtypes;
  int32_t *itemtypes;
  size_t n_itemids;
  int32_t *itemids;
  size_t n_itemprices;
  int64_t *itemprices;
  size_t n_itemcurrencytype;
  int32_t *itemcurrencytype;
};
#define SEARCH_TRADE_ITEMS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&search_trade_items_result__descriptor) \
    , 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _GetItemsToSell
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t itemtype;
  int32_t fortrade;
};
#define GET_ITEMS_TO_SELL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_items_to_sell__descriptor) \
    , 0, 0, 0, 0 }


struct  _ToSellItemsDefine
{
  ProtobufCMessage base;
  /*
   *prototype id
   */
  int32_t itemid;
  int64_t amount;
  int64_t lastprice;
  int32_t ispopular;
  int32_t optionalnum;
  int32_t characteritemid;
  int32_t weight;
  float averagecost;
  char *optional_value;
  char *user_define_name;
  int32_t maxdurability;
  int32_t currentdurability;
  int32_t optionalitemnum;
};
#define TO_SELL_ITEMS_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&to_sell_items_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, NULL, NULL, 0, 0, 0 }


struct  _GetItemsToSellResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t itemtype;
  int64_t gold;
  int64_t coin;
  size_t n_items;
  ToSellItemsDefine **items;
  int64_t fame;
  int64_t exp;
};
#define GET_ITEMS_TO_SELL_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_items_to_sell_result__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0, 0 }


struct  _GetPriceData
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t itemtype;
  int32_t itemid;
  int64_t askedcount;
  int32_t issell;
  int32_t characteritemid;
  int32_t optionalnum;
};
#define GET_PRICE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_price_data__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _PriceDataDefine
{
  ProtobufCMessage base;
  int32_t count;
  int64_t price;
  char *tid;
  int32_t peerid;
  int32_t optionalitemnum;
};
#define PRICE_DATA_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&price_data_define__descriptor) \
    , 0, 0, NULL, 0, 0 }


struct  _ShipSizeInfo
{
  ProtobufCMessage base;
  int32_t usedsize;
  int32_t maxsize;
  int32_t shipid;
  int32_t sid;
};
#define SHIP_SIZE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ship_size_info__descriptor) \
    , 0, 0, 0, 0 }


struct  _GetPriceDataResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t itemtype;
  int32_t itemid;
  int64_t count;
  int64_t tax;
  int64_t gold;
  int64_t coin;
  float averagecost;
  int32_t weight;
  int32_t curpackagesize;
  int32_t maxpackagesize;
  size_t n_prices;
  PriceDataDefine **prices;
  size_t n_shipinfos;
  ShipSizeInfo **shipinfos;
  size_t n_skills;
  SkillDefine **skills;
  int64_t fame;
  int64_t exp;
  size_t n_npconlyprices;
  PriceDataDefine **npconlyprices;
  int32_t skill_expert_sellor;
  int32_t captain_skill_expert_sellor;
  int32_t captain_skill_expert_sellor_captain_id;
  int32_t captain_skill_expert_sellor_captain_type;
  /*
   *skill id:19
   */
  int32_t skill_tax_protocol;
  /*
   *skill id:10
   */
  int32_t caption_skill_good_reputation;
  int32_t caption_skill_good_reputation_captain_id;
  int32_t captain_skill_good_reputation_captain_type;
  int32_t captain_special_skill_about_decrease_tax_id;
  /*
   *小伙伴技能,技能id是3或者4
   */
  int32_t captain_special_skill_about_decrease_tax_level;
  int32_t captain_special_skill_about_decrease_tax_captain_id;
};
#define GET_PRICE_DATA_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_price_data_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetPersonalItem
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t itemtype;
  int32_t fortrade;
};
#define GET_PERSONAL_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_personal_item__descriptor) \
    , 0, 0, 0, 0 }


struct  _HatchItemsDefine
{
  ProtobufCMessage base;
  int32_t goodsid;
  int32_t amount;
  int64_t refprice;
  int32_t ispopular;
  /*
   *required int64 npcPrice = 6;
   */
  float averagecost;
};
#define HATCH_ITEMS_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hatch_items_define__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _EquipmentDefine
{
  ProtobufCMessage base;
  /*
   *itemId
   */
  int32_t equipmentid;
  int32_t amount;
  int64_t refprice;
  int32_t optionalnum;
  int32_t attack;
  int32_t defense;
  int32_t durable;
  int32_t speed;
  int32_t steer_speed;
  int32_t uniqueid;
  int32_t optionalid;
  char *optionalvalue;
  int32_t maxdurable;
  int32_t requiredlv;
};
#define EQUIPMENT_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equipment_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0 }


struct  _DrawingItemsDefine
{
  ProtobufCMessage base;
  int32_t iid;
  int32_t amount;
  int64_t refprice;
  int32_t requireditem1;
  int32_t requireditem2;
  int32_t reqitem1num;
  int32_t reqitem2num;
  int64_t needcoin;
  int64_t needgolds;
  int32_t define_id;
  int32_t isship;
  char *citylist;
  int32_t requiredlv;
  /*
   *hours
   */
  int32_t buildtime;
  int32_t manufacturereq;
  int32_t uniqueid;
};
#define DRAWING_ITEMS_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drawing_items_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0 }


struct  _SpecialItemsDefine
{
  ProtobufCMessage base;
  int32_t itemid;
  int32_t amount;
  int64_t price;
};
#define SPECIAL_ITEMS_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&special_items_define__descriptor) \
    , 0, 0, 0 }


struct  _GetPersonalItemResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t itemtype;
  int64_t gold;
  int64_t coin;
  size_t n_goods;
  HatchItemsDefine **goods;
  size_t n_ships;
  ShipDefine **ships;
  size_t n_equipments;
  EquipmentDefine **equipments;
  int32_t curpackagesize;
  int32_t maxpackagesize;
  int64_t fame;
  int64_t exp;
  int32_t curgoodsweight;
  int32_t maxgoodsweight;
  size_t n_drawings;
  DrawingItemsDefine **drawings;
  size_t n_specials;
  SpecialItemsDefine **specials;
  /*
   * skill id:23
   */
  int32_t skill_technique_of_cargo;
  int32_t captain_skill_technique_of_cargo;
  int32_t captain_skill_technique_of_cargo_captain_id;
  int32_t captain_skill_technique_of_cargo_captain_type;
  int32_t skill_expert_sellor;
  int32_t captain_skill_expert_sellor;
  int32_t captain_skill_expert_sellor_captain_id;
  int32_t captain_skill_expert_sellor_captain_type;
  /*
   *skill id:19
   */
  int32_t skill_tax_protocol;
  /*
   *skill id:10
   */
  int32_t caption_skill_good_reputation;
  int32_t caption_skill_good_reputation_captain_id;
  int32_t captain_skill_good_reputation_captain_type;
};
#define GET_PERSONAL_ITEM_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_personal_item_result__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _CancelOrder
{
  ProtobufCMessage base;
  char *orderid;
  int32_t itemtype;
  int32_t itemid;
  /*
   *required int32 count = 4;
   */
  int32_t userid;
  int32_t sessionid;
  int32_t characteritemid;
  int32_t optionalnum;
};
#define CANCEL_ORDER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cancel_order__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0 }


struct  _CancelOrderResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t gold;
  int64_t coin;
  int64_t fame;
  int64_t exp;
};
#define CANCEL_ORDER_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cancel_order_result__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _WarehouseOpration
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *0 == fetch 1 == delete 2,fetch all
   */
  int32_t actioncode;
  int32_t id;
  /*
   *required int32 itemType = 4;
   *required int32 itemId = 5;
   */
  int64_t count;
};
#define WAREHOUSE_OPRATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&warehouse_opration__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _WarehouseOprationResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t count;
  int32_t actioncode;
};
#define WAREHOUSE_OPRATION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&warehouse_opration_result__descriptor) \
    , 0, 0, 0 }


struct  _GetWarehouseItems
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_WAREHOUSE_ITEMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_warehouse_items__descriptor) \
    , 0, 0 }


struct  _CityGoodsDefine
{
  ProtobufCMessage base;
  int32_t itemid;
  int32_t itemtype;
  int32_t amount;
  int32_t id;
  char *optional_value;
  int64_t destitemid;
  int32_t optionalitemnum;
};
#define CITY_GOODS_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&city_goods_define__descriptor) \
    , 0, 0, 0, 0, NULL, 0, 0 }


struct  _CityGoods
{
  ProtobufCMessage base;
  int32_t cityid;
  size_t n_goods;
  CityGoodsDefine **goods;
};
#define CITY_GOODS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&city_goods__descriptor) \
    , 0, 0,NULL }


struct  _GetWarehouseItemsResult
{
  ProtobufCMessage base;
  int32_t failed;
  CityGoods *curcitygoods;
  size_t n_othergoods;
  CityGoods **othergoods;
};
#define GET_WAREHOUSE_ITEMS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_warehouse_items_result__descriptor) \
    , 0, NULL, 0,NULL }


struct  _BarConsume
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t actioncode;
  int32_t itemid;
};
#define BAR_CONSUME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bar_consume__descriptor) \
    , 0, 0, 0, 0 }


struct  _BarConsumeResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t actioncode;
  int64_t cost;
  int64_t gold;
  int64_t coin;
  int64_t fame;
  int64_t exp;
};
#define BAR_CONSUME_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bar_consume_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _GetBarInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t refreshcaptain;
};
#define GET_BAR_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_bar_info__descriptor) \
    , 0, 0, 0 }


struct  _BarMenuDefine
{
  ProtobufCMessage base;
  int32_t id;
  int32_t price;
  int32_t nameid;
};
#define BAR_MENU_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bar_menu_define__descriptor) \
    , 0, 0, 0 }


struct  _BarCaptainDefine
{
  ProtobufCMessage base;
  int32_t id;
  int32_t name;
  int32_t level;
  int32_t exp;
  size_t n_skills;
  SkillDefine **skills;
  int32_t salary;
  int32_t uniqueid;
  int32_t position;
};
#define BAR_CAPTAIN_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bar_captain_define__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0, 0, 0 }


struct  _GetBarInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_foodmenu;
  BarMenuDefine **foodmenu;
  size_t n_drinkmenu;
  BarMenuDefine **drinkmenu;
  size_t n_barcaptain;
  BarCaptainDefine **barcaptain;
  /*
   * n_bartask in (0,1)
   */
  TaskDefine *bartask;
  int64_t gold;
  int64_t coin;
  int32_t treated;
  int32_t hastask;
  int32_t mycaptainnum;
  int32_t maxcaptainnum;
  int32_t refreshinterval;
  /*
   * captain list last refresh time
   */
  int64_t lastrefreshtime;
  int32_t employed;
  size_t n_mycaptain;
  BarCaptainDefine **mycaptain;
  int64_t fame;
  int64_t exp;
  int32_t bargirlprestige;
  /*
   *repeated int32 taskIds = 19;
   */
  char *taskids;
  int64_t taskrefreshinterval;
  int64_t surplusrefreshtime;
  int32_t bargirldrinkcost;
  int32_t treatforgetcrewcost;
  int32_t refreshcaptaincost;
  int32_t refreshtaskcost;
  int32_t hirecrewfee;
  int32_t bargirlprestigerequired;
  int32_t drinktimes;
  int32_t totalcrewnum;
  int32_t friendvalue;
  int32_t usedsudanmask;
  char *coretaskids;
  int32_t skill_mission_terminator_level;
  int32_t skill_late_submission;
  char *npcindexstr;
  char *targetcitystr;
  char *bonusstr;
  int32_t captain_skill_late_submission;
  int32_t captain_skill_late_submission_captain_id;
  int32_t captain_skill_late_submission_captain_type;
  /*
   *skill id :11
   */
  int32_t captain_mission_terminator_level;
  int32_t captain_mission_terminator_captain_id;
  int32_t captain_mission_terminator_captain_type;
  int32_t dialogid;
  int64_t distocaptainfinish;
};
#define GET_BAR_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_bar_info_result__descriptor) \
    , 0, 0,NULL, 0,NULL, 0,NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, NULL, NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetCrew
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t count;
  int32_t fasthire;
};
#define GET_CREW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_crew__descriptor) \
    , 0, 0, 0, 0 }


struct  _ShipCrewDefine
{
  ProtobufCMessage base;
  int32_t shipid;
  int32_t crewmax;
  int32_t crewrequire;
  int32_t crewreal;
  int32_t shiphp;
};
#define SHIP_CREW_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ship_crew_define__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _GetCrewResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t crewnum;
  size_t n_shipcrew;
  ShipCrewDefine **shipcrew;
  int64_t cost;
  int64_t gold;
  int64_t coin;
  int64_t fame;
  int64_t exp;
  int32_t needcrewnum;
};
#define GET_CREW_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_crew_result__descriptor) \
    , 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0 }


struct  _TreatBargirl
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define TREAT_BARGIRL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&treat_bargirl__descriptor) \
    , 0, 0 }


struct  _TreatBargirlResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cost;
  int64_t gold;
  int64_t coin;
  int64_t prestige;
  int64_t exp;
};
#define TREAT_BARGIRL_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&treat_bargirl_result__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _GiveBargirlGift
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t itemid;
  int32_t itemtype;
};
#define GIVE_BARGIRL_GIFT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&give_bargirl_gift__descriptor) \
    , 0, 0, 0, 0 }


struct  _GiveBargirlGiftResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t prestige;
  int32_t itemid;
  int32_t itemtype;
  int32_t addprestige;
};
#define GIVE_BARGIRL_GIFT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&give_bargirl_gift_result__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _GetAvailCrewNum
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_AVAIL_CREW_NUM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_avail_crew_num__descriptor) \
    , 0, 0 }


struct  _GetAvailCrewNumResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t crewprice;
  int32_t availcrewnum;
  int32_t currentcrewnum;
  int32_t maxcrewnum;
  int32_t totalrequired;
  int32_t totalsupply;
  int32_t onecrewsupply;
};
#define GET_AVAIL_CREW_NUM_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_avail_crew_num_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetTaskList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t actioncode;
  int32_t refresh;
};
#define GET_TASK_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_task_list__descriptor) \
    , 0, 0, 0, 0 }


struct  _TaskDefine
{
  ProtobufCMessage base;
  int32_t taskid;
  int32_t tasktype;
  int32_t completecityid;
  int32_t taskstatus;
  int64_t takentime;
  int64_t surplustime;
  int32_t completeamount;
  int32_t taskcoreid;
  int32_t npcindex;
  int32_t targetcity;
  /*
   *  required int32 title = 6;
   *  required int32 description = 7;
   *  required int32 goal = 8;
   *  required int32 type = 9;
   *  required int32 taskLevel = 10;
   */
  int32_t hasbonus;
};
#define TASK_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetTaskListResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t actioncode;
  TaskDefine *currunttask;
  int32_t cost;
  int64_t gold;
  int64_t coin;
  int32_t refreshinterval;
  int64_t surplusrefreshtime;
  int64_t fame;
  int64_t exp;
  /*
   *repeated int32 taskIds = 11;
   */
  char *taskids;
  char *coretaskids;
  int32_t skill_mission_terminator_level;
  int32_t skill_late_submission;
  char *npcindexstr;
  char *targetcitystr;
  char *bonusstr;
  int32_t captain_skill_late_submission;
  int32_t captain_skill_late_submission_captain_id;
  int32_t captain_skill_late_submission_captain_type;
};
#define GET_TASK_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_task_list_result__descriptor) \
    , 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, NULL, NULL, 0, 0, NULL, NULL, NULL, 0, 0, 0 }


struct  _GetIntelligence
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *0 原有不花钱的情报，1 城市位置 2 打捞点 3 主线任务提示 4 赏金任务提示 5 城市流行品信息 6 藏宝图信息
   */
  protobuf_c_boolean has_type;
  int32_t type;
};
#define GET_INTELLIGENCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_intelligence__descriptor) \
    , 0, 0, 0,0 }


struct  _IntelligenceDefine
{
  ProtobufCMessage base;
  int32_t intelligenceid;
  int32_t intelligencecontent;
};
#define INTELLIGENCE_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&intelligence_define__descriptor) \
    , 0, 0 }


struct  _GetIntelligenceResult
{
  ProtobufCMessage base;
  int32_t failed;
  /*
   *repeated IntelligenceDefine intelligence = 2;
   */
  /*
   *type =1,float cord, type = 2,popular goods, type=3,pirate cord, type 4 next task hint
   */
  size_t n_json;
  char **json;
};
#define GET_INTELLIGENCE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_intelligence_result__descriptor) \
    , 0, 0,NULL }


struct  _GetCaptain
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t index;
};
#define GET_CAPTAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_captain__descriptor) \
    , 0, 0, 0 }


struct  _GetCaptainResult
{
  ProtobufCMessage base;
  int32_t failed;
  BarCaptainDefine *barcaptain;
  int64_t cost;
  int64_t gold;
  int64_t coin;
  size_t n_captains;
  BarCaptainDefine **captains;
  int64_t fame;
  int64_t exp;
};
#define GET_CAPTAIN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_captain_result__descriptor) \
    , 0, NULL, 0, 0, 0, 0,NULL, 0, 0 }


struct  _HandleTask
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t taskid;
  /*
   * 0:get task, 1:submit task,2 get reward,3 give up task
   */
  int32_t actioncode;
};
#define HANDLE_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&handle_task__descriptor) \
    , 0, 0, 0, 0 }


struct  _TaskRewardItems
{
  ProtobufCMessage base;
  int32_t itemtype;
  int32_t itemid;
  int32_t amount;
};
#define TASK_REWARD_ITEMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task_reward_items__descriptor) \
    , 0, 0, 0 }


struct  _HandleTaskResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t actioncode;
  TaskDefine *task;
  int64_t coin;
  int64_t exp;
  int64_t fame;
  int64_t gold;
  int32_t taskid;
  size_t n_rewarditems;
  TaskRewardItems **rewarditems;
  int64_t rewardcoin;
  int32_t rewardexp;
  int64_t rewardgold;
  int32_t rewardfame;
  int32_t forceid;
  int32_t forceaffect;
  int32_t newlevel;
  size_t n_captains;
  CaptainInfo **captains;
  int32_t new_fame_level;
  /*
   *repeated int32 taskIds = 20;
   */
  char *taskids;
  int32_t dialogid;
};
#define HANDLE_TASK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&handle_task_result__descriptor) \
    , 0, 0, NULL, 0, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, NULL, 0 }


struct  _MainTaskItems
{
  ProtobufCMessage base;
  int32_t taskitemid;
  int32_t taskitemtype;
  int32_t taskitemamount;
};
#define MAIN_TASK_ITEMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&main_task_items__descriptor) \
    , 0, 0, 0 }


struct  _CurrentMainTaskInfo
{
  ProtobufCMessage base;
  int32_t taskid;
  int32_t completedpartnum;
  size_t n_items;
  MainTaskItems **items;
};
#define CURRENT_MAIN_TASK_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&current_main_task_info__descriptor) \
    , 0, 0, 0,NULL }


struct  _CurrentCompanionTaskInfo
{
  ProtobufCMessage base;
  size_t n_tasks;
  CompanionTaskDefine **tasks;
};
#define CURRENT_COMPANION_TASK_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&current_companion_task_info__descriptor) \
    , 0,NULL }


struct  _GetCurrentCityData
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_CURRENT_CITY_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_current_city_data__descriptor) \
    , 0, 0 }


struct  _GetCurrentCityDataResult
{
  ProtobufCMessage base;
  int32_t failed;
  LoginFirstData *data;
  int32_t warehousedailycost;
  int32_t dockdailycost;
  int32_t captainsdailycost;
  int32_t friendvalue;
  int32_t completetaskid;
  int32_t completecoretaskid;
  int32_t newmailcount;
  int32_t isnewlanding;
  size_t n_populargoodsids;
  int32_t *populargoodsids;
  int32_t sudanmasknum;
  int64_t sudanmaskid;
  int32_t hassudanmask;
  int32_t haslisence;
  /*
   *by defeat or something else
   */
  int32_t reason;
  int32_t skillpoints;
  /*
   *repeated OutOfDurableItemDefine brokenEquips = 17;
   */
  size_t n_wantedforceids;
  int32_t *wantedforceids;
  int32_t taskindex;
  CurrentMainTaskInfo *maintaskinfo;
  int64_t onsale_remain_time;
  int32_t authenticated;
  int32_t getemailverifiedreward;
  /*
   * 1 为启动委托剧情,剧情自动启动
   */
  int32_t insertdialogtype;
  int32_t needaddsailors;
  int32_t needrepiredship;
  int32_t dialogid;
  int32_t showlottomessage;
  int32_t haveinvitebonus;
  CurrentCompanionTaskInfo *companiontaskinfo;
  int32_t availmaxcrewnum;
  int64_t fasthireneedcoins;
  int32_t needcrewnum;
  int64_t drop_rate_increase_ramian_time;
  int32_t drop_rate_increase_type;
  int32_t consume_mark;
  int32_t current_package_size;
  int32_t max_package_size;
  int32_t maxcrewnum;
  int32_t currentcrewnum;
  int32_t is_in_state_war;
  int32_t license_can_use;
  int32_t current_city_nation;
};
#define GET_CURRENT_CITY_DATA_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_current_city_data_result__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetShipList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_SHIP_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_ship_list__descriptor) \
    , 0, 0 }


struct  _GetShipListResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_ship;
  ShipDefine **ship;
};
#define GET_SHIP_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_ship_list_result__descriptor) \
    , 0, 0,NULL }


struct  _RepairShip
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t shipid;
};
#define REPAIR_SHIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&repair_ship__descriptor) \
    , 0, 0, 0 }


struct  _RepairShipResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cost;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
};
#define REPAIR_SHIP_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&repair_ship_result__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _RepairAllShips
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *0 fleet,1 dock,2 fleet + dock
   */
  int32_t type;
};
#define REPAIR_ALL_SHIPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&repair_all_ships__descriptor) \
    , 0, 0, 0 }


struct  _RepairAllShipsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cost;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
};
#define REPAIR_ALL_SHIPS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&repair_all_ships_result__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _ShipName
{
  ProtobufCMessage base;
  int32_t shipid;
  char *utf8name;
};
#define SHIP_NAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ship_name__descriptor) \
    , 0, NULL }


struct  _FleetFormation
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  size_t n_shipids;
  int32_t *shipids;
  size_t n_deletedshipids;
  int32_t *deletedshipids;
  /*
   *  repeated int32 captainIds = 5;
   */
  size_t n_captainids;
  FleetCaptain **captainids;
  size_t n_shipnames;
  ShipName **shipnames;
  size_t n_catchshipid;
  int32_t *catchshipid;
};
#define FLEET_FORMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fleet_formation__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _FleetFormationResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t dropsailornum;
  size_t n_captainids;
  FleetCaptain **captainids;
};
#define FLEET_FORMATION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fleet_formation_result__descriptor) \
    , 0, 0, 0,NULL }


struct  _ParkShip
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t shipid;
  int32_t isunpark;
};
#define PARK_SHIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&park_ship__descriptor) \
    , 0, 0, 0, 0 }


struct  _ParkShipResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define PARK_SHIP_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&park_ship_result__descriptor) \
    , 0 }


/*
 *获取图纸相关信息
 */
struct  _GetDrawings
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *图纸类型
   */
  int32_t drawingtype;
  /*
   *图纸子类型
   */
  int32_t subtype;
};
#define GET_DRAWINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_drawings__descriptor) \
    , 0, 0, 0, 0 }


struct  _ItemDefine
{
  ProtobufCMessage base;
  int32_t item_id;
  int32_t currentnum;
  int32_t requirednum;
  int64_t uniqueid;
};
#define ITEM_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&item_define__descriptor) \
    , 0, 0, 0, 0 }


struct  _PredefinedShip
{
  ProtobufCMessage base;
  int32_t sid;
  int32_t type;
  int32_t speed;
  int32_t steer_speed;
  int32_t defence;
  int32_t hp_max;
  int32_t cargo_kinds;
  int32_t cargo_size;
  int32_t crew_max;
  int32_t cannon_num;
  int32_t armor_num;
  int32_t spinnaker_num;
  int32_t rigged_num;
  int32_t material;
  int32_t price;
  int32_t model_name;
  int32_t crew_require;
  int32_t supply_max;
};
#define PREDEFINED_SHIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&predefined_ship__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _ShipdrawingDefine
{
  ProtobufCMessage base;
  int32_t drawingid;
  ItemDefine *requireditem1;
  ItemDefine *requireditem2;
  int32_t optionalnum;
  int64_t coin;
  int64_t gold;
  float requiredtime;
  PredefinedShip *ship;
  char *cityidlist;
  int32_t drawinglevel;
  int32_t amount;
  int32_t itemid;
  int32_t requiredmanufacture;
  size_t n_addrequireditem;
  ItemDefine **addrequireditem;
};
#define SHIPDRAWING_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&shipdrawing_define__descriptor) \
    , 0, NULL, NULL, 0, 0, 0, 0, NULL, NULL, 0, 0, 0, 0, 0,NULL }


struct  _EquipdrawingDefine
{
  ProtobufCMessage base;
  int32_t drawingid;
  ItemDefine *requireditem1;
  ItemDefine *requireditem2;
  int32_t optionalnum;
  int64_t coin;
  int64_t gold;
  float requiredtime;
  int32_t equipmentid;
  int32_t equipmentname;
  char *equipmentproperties;
  char *cityidlist;
  int32_t drawinglevel;
  int32_t amount;
  int32_t itemid;
  int32_t requiredmanufacture;
  size_t n_addrequireditem;
  ItemDefine **addrequireditem;
};
#define EQUIPDRAWING_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equipdrawing_define__descriptor) \
    , 0, NULL, NULL, 0, 0, 0, 0, 0, 0, NULL, NULL, 0, 0, 0, 0, 0,NULL }


struct  _GetDrawingsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t drawingtype;
  int32_t subtype;
  size_t n_shipdrawing;
  ShipdrawingDefine **shipdrawing;
  size_t n_equipdrawing;
  EquipdrawingDefine **equipdrawing;
  int32_t currentcityid;
  int32_t currentcitymanufacture;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
};
#define GET_DRAWINGS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_drawings_result__descriptor) \
    , 0, 0, 0, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0 }


struct  _BuildShip
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t drawingid;
  int32_t usegold;
};
#define BUILD_SHIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&build_ship__descriptor) \
    , 0, 0, 0, 0 }


struct  _BuildShipResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cost;
  int64_t coin;
  int64_t gold;
  int32_t usegold;
  int64_t fame;
  int64_t exp;
  int32_t consumeditemid1;
  int32_t consumedcount1;
  int32_t consumeditemid2;
  int32_t consumedcount2;
  int32_t action;
  int32_t itemid;
  int32_t consumeditemid3;
  int32_t consumedcount3;
  int32_t consumeditemid4;
  int32_t consumedcount4;
  int32_t consumeditemid5;
  int32_t consumedcount5;
};
#define BUILD_SHIP_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&build_ship_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 *message SkillDefine{
 *  required int32 skillId = 1;
 *  required int32 skillLevel = 2;
 *}
 */
struct  _GetBuildingShips
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_BUILDING_SHIPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_building_ships__descriptor) \
    , 0, 0 }


struct  _BuildingShipDefine
{
  ProtobufCMessage base;
  int32_t shipmanafactureid;
  int32_t designid;
  int32_t starttime;
  int32_t endtime;
  PredefinedShip *ship;
  int32_t currenttime;
  int32_t cityid;
  int32_t buildcost;
};
#define BUILDING_SHIP_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&building_ship_define__descriptor) \
    , 0, 0, 0, 0, NULL, 0, 0, 0 }


struct  _GetBuildingShipsResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_ship;
  BuildingShipDefine **ship;
  size_t n_skills;
  SkillDefine **skills;
};
#define GET_BUILDING_SHIPS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_building_ships_result__descriptor) \
    , 0, 0,NULL, 0,NULL }


struct  _FinishBuilding
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t shipmanufactureid;
};
#define FINISH_BUILDING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&finish_building__descriptor) \
    , 0, 0, 0 }


struct  _FinishBuildingResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cost;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
};
#define FINISH_BUILDING_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&finish_building_result__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _GetBuildingEquipment
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t drawingtype;
  int32_t subtype;
};
#define GET_BUILDING_EQUIPMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_building_equipment__descriptor) \
    , 0, 0, 0, 0 }


struct  _BuildingEquipmentDefine
{
  ProtobufCMessage base;
  int32_t shipmanafactureid;
  int32_t designid;
  int32_t starttime;
  int32_t endtime;
  int32_t equipmentid;
  int32_t equipmentname;
  char *equipmentproperties;
  int32_t currenttime;
  int32_t cicyid;
  int32_t equipsubtype;
  int32_t buildcost;
};
#define BUILDING_EQUIPMENT_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&building_equipment_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0 }


struct  _GetBuildingEquipmentResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_equipment;
  BuildingEquipmentDefine **equipment;
  int32_t drawingtype;
  int32_t subtype;
  size_t n_skills;
  SkillDefine **skills;
};
#define GET_BUILDING_EQUIPMENT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_building_equipment_result__descriptor) \
    , 0, 0,NULL, 0, 0, 0,NULL }


struct  _CancelBuild
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t shipmanufactureid;
};
#define CANCEL_BUILD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cancel_build__descriptor) \
    , 0, 0, 0 }


struct  _CancelBuildResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
  int64_t refundcoins;
  int64_t refundgolds;
};
#define CANCEL_BUILD_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cancel_build_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _CaptainDefine
{
  ProtobufCMessage base;
  int32_t id;
  int32_t name;
  char *cname;
  int32_t level;
  int64_t exp;
  int32_t shipid;
  int32_t protoid;
  size_t n_skills;
  SkillDefine **skills;
  size_t n_specskills;
  SkillDefine **specskills;
  int32_t iscaptain;
};
#define CAPTAIN_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&captain_define__descriptor) \
    , 0, 0, NULL, 0, 0, 0, 0, 0,NULL, 0,NULL, 0 }


struct  _GetFleetAndDockShips
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_FLEET_AND_DOCK_SHIPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_fleet_and_dock_ships__descriptor) \
    , 0, 0 }


struct  _GetFleetAndDockShipsResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_fleetships;
  ShipDefine **fleetships;
  size_t n_dockships;
  ShipDefine **dockships;
  size_t n_captains;
  CaptainDefine **captains;
  size_t n_equipdetails;
  EquipDetailInfo **equipdetails;
  int32_t morale;
  int32_t incity;
  int64_t coins;
  int64_t golds;
  size_t n_catchships;
  ShipDefine **catchships;
  int32_t cantotalcatchshipnum;
  int32_t skill_armour_optimization;
  int32_t skill_reform_of_hull;
  int32_t all_city_dock_ship_num;
  float shipyard_repair_ship_cost_coin;
  float shipyard_repair_ship_cost_gold;
};
#define GET_FLEET_AND_DOCK_SHIPS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_fleet_and_dock_ships_result__descriptor) \
    , 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0 }


struct  _GetReinforceShipList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_REINFORCE_SHIP_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_reinforce_ship_list__descriptor) \
    , 0, 0 }


struct  _ReinforceShipDefine
{
  ProtobufCMessage base;
  int32_t shipid;
  char *shipname;
  int32_t optionalnum;
  int32_t optionalitem1;
  int32_t optionalitem2;
  int32_t defense;
  int32_t durable;
  int32_t speed;
  int32_t steering;
  int32_t sailors;
  int32_t maxcargosize;
  int32_t sid;
  int32_t amount;
  int32_t position;
  char *optionalvalue;
  int32_t maxdurable;
  int32_t maxsailors;
  int32_t definedmaxdurable;
  int32_t currentcargosize;
  int32_t supply;
  int32_t maxsupply;
  int32_t attack;
};
#define REINFORCE_SHIP_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reinforce_ship_define__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetReinforceShipListResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_ship;
  ReinforceShipDefine **ship;
  size_t n_item;
  ItemDefine **item;
  int64_t reinforceshipcostgold;
  int64_t rerollshipcostgold;
  int64_t reinforceshipcostcoin;
};
#define GET_REINFORCE_SHIP_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_reinforce_ship_list_result__descriptor) \
    , 0, 0,NULL, 0,NULL, 0, 0, 0 }


struct  _ReinforceShip
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t shipid;
  /*
   * 1, 2 => option1, option2
   */
  int32_t itemtype;
  /*
   * option1_id or option2_id
   */
  int32_t itemid;
  int32_t optionalnum;
};
#define REINFORCE_SHIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reinforce_ship__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _ReinforceShipResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cost;
  int64_t coin;
  int64_t gold;
  int32_t itemtype;
  int32_t itemid;
  ReinforceShipDefine *shipinfo;
  int64_t fame;
  int64_t exp;
};
#define REINFORCE_SHIP_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reinforce_ship_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, NULL, 0, 0 }


struct  _RerollShip
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t shipid;
  int32_t optionalitem1;
  int32_t optionalitem2;
  int32_t optinoalnum;
};
#define REROLL_SHIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reroll_ship__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _RerollShipResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cost;
  int64_t coin;
  int64_t gold;
  ReinforceShipDefine *shipinfo;
  int64_t fame;
  int64_t exp;
};
#define REROLL_SHIP_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reroll_ship_result__descriptor) \
    , 0, 0, 0, 0, NULL, 0, 0 }


struct  _GetReinforceEquipList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_REINFORCE_EQUIP_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_reinforce_equip_list__descriptor) \
    , 0, 0 }


struct  _ReinforceEquipDefine
{
  ProtobufCMessage base;
  int64_t equipmentid;
  int32_t equipmentname;
  int32_t optionalnum;
  int32_t optionalitem;
  int32_t attack;
  int32_t defense;
  int32_t durable;
  int32_t speed;
  int32_t steer_speed;
  int32_t iid;
  int32_t amount;
  char *optionalvalue;
  int32_t definedmaxdurable;
  int32_t maxdurable;
  int64_t shipid;
  int32_t shipsid;
  char *userdefinedshipname;
  /*
   * 1000x,cannon; 2000x,armor;3000x,spinnaker;4000x,bow_gun
   */
  int32_t equipposition;
  /*
   *5000x,tail gun;6000x bow icon;
   */
  int32_t shipposition;
};
#define REINFORCE_EQUIP_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reinforce_equip_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, NULL, 0, 0 }


struct  _GetReinforceEquipListResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_equipmentonship;
  ReinforceEquipDefine **equipmentonship;
  size_t n_equipmentsinbag;
  ReinforceEquipDefine **equipmentsinbag;
  int64_t reinforceequipcostgold;
  int64_t rerollequipcostgold;
  int64_t reinforceequipcostcoin;
  size_t n_item;
  ItemDefine **item;
};
#define GET_REINFORCE_EQUIP_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_reinforce_equip_list_result__descriptor) \
    , 0, 0,NULL, 0,NULL, 0, 0, 0, 0,NULL }


struct  _ReinforceEquip
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *character_item.id, not iid!
   */
  int32_t equipmentid;
  int32_t optionalnum;
  int32_t optionalitemid;
  int32_t shipid;
  int32_t position;
};
#define REINFORCE_EQUIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reinforce_equip__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _ReinforceEquipResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cost;
  int64_t coin;
  int64_t gold;
  ReinforceEquipDefine *equipinfo;
  int64_t fame;
  int64_t exp;
};
#define REINFORCE_EQUIP_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reinforce_equip_result__descriptor) \
    , 0, 0, 0, 0, NULL, 0, 0 }


struct  _RerollEquip
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t equipmentid;
  int32_t optionalnum;
  int32_t optionalitem;
  int32_t shipid;
  int32_t position;
};
#define REROLL_EQUIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reroll_equip__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _RerollEquipResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cost;
  int64_t coin;
  int64_t gold;
  ReinforceEquipDefine *equipinfo;
  int64_t fame;
  int64_t exp;
};
#define REROLL_EQUIP_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reroll_equip_result__descriptor) \
    , 0, 0, 0, 0, NULL, 0, 0 }


struct  _EquipShip
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t shipid;
  /*
   *character_item table's index
   */
  int32_t bowiconid;
  int32_t bowgunid;
  int32_t aftgunid;
  char *spinnakerids;
  char *armorids;
  /*
   *id1,id2,id,id,id
   */
  char *cannonids;
  char *allids;
};
#define EQUIP_SHIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equip_ship__descriptor) \
    , 0, 0, 0, 0, 0, 0, NULL, NULL, NULL, NULL }


struct  _EquipShipResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define EQUIP_SHIP_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equip_ship_result__descriptor) \
    , 0 }


struct  _GetEquipShipInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   */
  int32_t shipid;
};
#define GET_EQUIP_SHIP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_equip_ship_info__descriptor) \
    , 0, 0, 0 }


struct  _EquipDetailInfo
{
  ProtobufCMessage base;
  int32_t attack;
  int32_t defense;
  int32_t durable;
  int32_t speed;
  int32_t steer_speed;
  int32_t id;
  int32_t iid;
  int32_t requiredlv;
  int32_t maxdurable;
  int32_t optionalitemnum;
};
#define EQUIP_DETAIL_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equip_detail_info__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _EquipShipInfo
{
  ProtobufCMessage base;
  int32_t attack;
  int32_t defense;
  int32_t durable;
  int32_t speed;
  int32_t steering;
  int32_t sails;
  int32_t capacity;
  int32_t sid;
  char *shipname;
  int32_t maxdurable;
  int32_t definedmaxdurable;
  int32_t maxsails;
  int32_t maxcapacity;
  int32_t definedmaxcapacity;
  int32_t supply;
  int32_t maxsupply;
  char *optional_value;
};
#define EQUIP_SHIP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equip_ship_info__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, NULL }


struct  _GetEquipShipInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  /*
   * if not set, send_error_message's base_msg will be NULL
   */
  EquipShipInfo *shipinfo;
  size_t n_shiplist;
  int32_t *shiplist;
  int32_t bowiconid;
  int32_t bowgunid;
  int32_t aftgunid;
  char *spinnakerids;
  char *armorids;
  char *cannonids;
  size_t n_equipdetails;
  EquipDetailInfo **equipdetails;
  int32_t maxbowiconnum;
  int32_t maxbowgunnum;
  int32_t maxaftnum;
  int32_t maxrignum;
  int32_t maxarmornum;
  int32_t maxcannonnum;
  size_t n_sidlist;
  int32_t *sidlist;
  size_t n_optionitemcount;
  int32_t *optionitemcount;
  int32_t skill_armour_optimization;
  int32_t skill_reform_of_hull;
};
#define GET_EQUIP_SHIP_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_equip_ship_info_result__descriptor) \
    , 0, NULL, 0,NULL, 0, 0, 0, NULL, NULL, NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0, 0 }


struct  _GetEquipableItems
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *(itmes 表的 sub_type) 从1开始，依次。 bowIconId bowGunId =2  aftGunId spinnaker = 4 rigged armor = 6 cannonIds
   */
  int32_t type;
  int32_t isheroequip;
};
#define GET_EQUIPABLE_ITEMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_equipable_items__descriptor) \
    , 0, 0, 0, 0 }


struct  _EquipableItem
{
  ProtobufCMessage base;
  /*
   *character_item
   */
  int32_t id;
  int32_t num;
  int32_t iid;
};
#define EQUIPABLE_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equipable_item__descriptor) \
    , 0, 0, 0 }


struct  _GetEquipableItemsResult
{
  ProtobufCMessage base;
  size_t n_items;
  EquipableItem **items;
  size_t n_equipdetails;
  EquipDetailInfo **equipdetails;
  int32_t failed;
  int32_t isheroequip;
  int32_t type;
};
#define GET_EQUIPABLE_ITEMS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_equipable_items_result__descriptor) \
    , 0,NULL, 0,NULL, 0, 0, 0 }


struct  _GetVisitedCities
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_VISITED_CITIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_visited_cities__descriptor) \
    , 0, 0 }


struct  _CityDefine
{
  ProtobufCMessage base;
  int32_t cityid;
  int32_t friendvalue;
  int32_t status;
  int32_t nation;
  int64_t population;
  int64_t manufacture;
  int64_t trade;
};
#define CITY_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&city_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _CityInfo
{
  ProtobufCMessage base;
  int32_t city_id;
  int32_t nation;
};
#define CITY_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&city_info__descriptor) \
    , 0, 0 }


struct  _GetVisitedCitiesResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_city;
  CityDefine **city;
  int32_t currentsupply;
  int32_t maxsupply;
  int32_t currentcrewnum;
  int32_t maxcrewnum;
  int32_t endurancedays;
  int32_t costpersupply;
  int32_t costpercrew;
  int32_t sailorsisenough;
  size_t n_shipcrew;
  ShipCrewDefine **shipcrew;
  int64_t coins;
  int64_t gold;
  int64_t fame;
  int64_t exp;
  int32_t warehousedailycost;
  int32_t dockdailycost;
  int32_t captainsdailycost;
  int32_t dailycost;
  size_t n_wantedforceids;
  int32_t *wantedforceids;
  int32_t shipspeed;
  int32_t currentpackagesize;
  int32_t maxpackagesize;
  int32_t incity;
  int32_t currentgoodsweight;
  int32_t maxgoodsweight;
  int32_t visitedcitynum;
  int32_t secondspersailday;
  int32_t min_attack;
  int32_t min_defense;
  int32_t min_steer_speed;
  size_t n_cityinfo;
  CityInfo **cityinfo;
};
#define GET_VISITED_CITIES_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_visited_cities_result__descriptor) \
    , 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL }


struct  _AddSupply
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t addamount;
};
#define ADD_SUPPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_supply__descriptor) \
    , 0, 0, 0 }


struct  _AddSupplyResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cost;
  int64_t coin;
  int64_t gold;
  int32_t endurancedays;
  int64_t fame;
  int64_t exp;
  int32_t currentsupply;
  int32_t addedsupply;
};
#define ADD_SUPPLY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_supply_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _ShipPoint
{
  ProtobufCMessage base;
  int32_t x;
  int32_t y;
  /*
   *上一点到这一点花的毫秒数
   */
  int32_t millisec;
};
#define SHIP_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ship_point__descriptor) \
    , 0, 0, 0 }


struct  _ShipRoutine
{
  ProtobufCMessage base;
  size_t n_roads;
  ShipPoint **roads;
  /*
   *milliSec
   */
  int64_t starttime;
};
#define SHIP_ROUTINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ship_routine__descriptor) \
    , 0,NULL, 0 }


struct  _GetNextMapBlock
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *required int32 currentX = 3;
   *required int32 currentY = 4;
   */
  /*
   *上一次报告位置之后所走过的路径，ship的当前坐标在最后
   */
  ShipRoutine *roadmap;
  int32_t days;
};
#define GET_NEXT_MAP_BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_next_map_block__descriptor) \
    , 0, 0, NULL, 0 }


struct  _NearbyPlayer
{
  ProtobufCMessage base;
  int32_t cid;
  char *name;
  int32_t sid;
  /*
   *required int32 x = 4;
   *required int32 y = 5;
   */
  ShipRoutine *shiproutine;
  int32_t lv;
  int32_t guildid;
  int32_t nation;
  int32_t gender;
};
#define NEARBY_PLAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nearby_player__descriptor) \
    , 0, NULL, 0, NULL, 0, 0, 0, 0 }


struct  _GetNextMapBlockShipInfo
{
  ProtobufCMessage base;
  int32_t ship_id;
  int32_t sid;
  char *shipname;
  int32_t current_max_hp;
};
#define GET_NEXT_MAP_BLOCK_SHIP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_next_map_block_ship_info__descriptor) \
    , 0, 0, NULL, 0 }


struct  _GetNextMapBlockResult
{
  ProtobufCMessage base;
  SeaBlockInfo *blockinfo;
  int32_t failed;
  int32_t days;
  int32_t totalsailors;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
  int32_t eventchanged;
  int32_t currentsupply;
  int32_t maxsupply;
  int32_t maxsailornum;
  /*
   * required int32 requiredSailorCount = 19;
   */
  int32_t newlevel;
  size_t n_shipinfo;
  GetNextMapBlockShipInfo **shipinfo;
  size_t n_captains;
  CaptainInfo **captains;
  size_t n_brokenequips;
  OutOfDurableItemDefine **brokenequips;
  int32_t last_safe_city;
  size_t n_players;
  NearbyPlayer **players;
  int32_t sail_speed;
  int32_t shipx;
  int32_t shipy;
};
#define GET_NEXT_MAP_BLOCK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_next_map_block_result__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0, 0,NULL, 0, 0, 0 }


struct  _ShipBowIconInfo
{
  ProtobufCMessage base;
  int32_t shipid;
  int32_t position;
  int32_t bowiconiid;
};
#define SHIP_BOW_ICON_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ship_bow_icon_info__descriptor) \
    , 0, 0, 0 }


struct  _LeaveCity
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define LEAVE_CITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&leave_city__descriptor) \
    , 0, 0 }


struct  _LeaveCityResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cityx;
  int32_t cityy;
  SeaBlockInfo *blockinfo;
  int32_t shipid;
  int32_t speed;
  int32_t shipx;
  int32_t shipy;
  int32_t endurancedays;
  int32_t sailorcount;
  size_t n_visitedcityids;
  int32_t *visitedcityids;
  int32_t warehousedailycost;
  int32_t dockdailycost;
  int32_t captainsdailycost;
  int32_t dailycost;
  int32_t maxtotalsupply;
  int32_t maxsailorcount;
  int64_t exp;
  int64_t fame;
  int32_t expperday;
  size_t n_discoverdcityids;
  int32_t *discoverdcityids;
  int32_t requiredsailorcount;
  size_t n_wantedforceids;
  int32_t *wantedforceids;
  int32_t shipnum;
  int32_t fightnpcid;
  /*
   *skill id:9
   */
  int32_t captain_skill_good_cook;
  int32_t captain_skill_good_cook_captain_id;
  int32_t captain_skill_good_cook_captain_type;
  /*
   *skill id:27
   */
  int32_t skill_ocean_exploration;
  /*
   *skill id:28
   */
  int32_t skill_good_cook;
  int32_t tatalsupply;
  int32_t delegateactive;
  int32_t avoidrockrate;
  int32_t angelrate;
  int32_t avoidstormrate;
  int32_t reportintervalsec;
  size_t n_players;
  NearbyPlayer **players;
  int32_t secondspersailday;
  size_t n_bowicon;
  ShipBowIconInfo **bowicon;
  /*
   *skill 15
   */
  int32_t captain_skill_outlook;
  int32_t captain_skill_outlook_captain_id;
  int32_t captain_skill_outlook_captain_type;
  /*
   *skill 14
   */
  int32_t captain_skill_sail_operation;
  int32_t captain_skill_sail_operation_captain_id;
  int32_t captain_skill_sail_operation_captain_type;
  /*
   *skill id:17
   */
  int32_t captain_skill_logistics;
  int32_t captain_skill_logistics_captain_id;
  int32_t captain_skill_logistics_captain_type;
  int64_t drop_rate_increase_ramian_time;
  int32_t drop_rate_increase_type;
  int32_t current_package_size;
  /*
   * TODO
   */
  int32_t max_package_size;
};
#define LEAVE_CITY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&leave_city_result__descriptor) \
    , 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _ReachCity
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   * judge current city
   */
  int32_t currentx;
  int32_t currenty;
  int32_t maintaskflag;
};
#define REACH_CITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reach_city__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _ReachCityResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t currentcityid;
  int32_t maintaskstatus;
  int32_t sailingdays;
  size_t n_fleetships;
  ShipDefine **fleetships;
  int32_t warehousedailycost;
  int32_t dockdailycost;
  int32_t captainsdailycost;
  int32_t dailycost;
  int64_t exp;
  int64_t fame;
  int64_t coins;
  int64_t gold;
  int32_t expperday;
  int32_t addedexp;
  int32_t newlevel;
  size_t n_captains;
  CaptainInfo **captains;
  int32_t maintaskflag;
  int64_t addedfame;
  int32_t newfamelevel;
};
#define REACH_CITY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reach_city_result__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0, 0 }


struct  _TriggerSeaEvent
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t eventid;
  int32_t propid;
  int64_t version;
};
#define TRIGGER_SEA_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trigger_sea_event__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _SeaEventLootDefine
{
  ProtobufCMessage base;
  /*
   *prop or drawings
   */
  int32_t itemid;
  /*
   * == 1?
   */
  int32_t count;
};
#define SEA_EVENT_LOOT_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sea_event_loot_define__descriptor) \
    , 0, 0 }


struct  _SeaEventShipStatus
{
  ProtobufCMessage base;
  int32_t ship_id;
  int32_t sid;
  char *shipname;
  int32_t hp;
  int32_t current_max_hp;
  int32_t losthp;
  int32_t lostmaxhp;
  int32_t position;
};
#define SEA_EVENT_SHIP_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sea_event_ship_status__descriptor) \
    , 0, 0, NULL, 0, 0, 0, 0, 0 }


struct  _SeaEventLossDefine
{
  ProtobufCMessage base;
  int64_t coinloss;
  int32_t crewloss;
  int32_t durabilityloss;
  int32_t maxdurabilityloss;
  int32_t supplyloss;
  size_t n_shipstatus;
  SeaEventShipStatus **shipstatus;
};
#define SEA_EVENT_LOSS_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sea_event_loss_define__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL }


struct  _ShipEquipInfo
{
  ProtobufCMessage base;
  char *cannon_id;
  char *armor_id;
  char *spinnaker_id;
  int32_t rigger_id;
  int32_t bow_gun_id;
  int32_t aft_gun_id;
  int32_t bow_icon_id;
  int32_t position;
  char *name;
  int32_t sid;
  int32_t id;
};
#define SHIP_EQUIP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ship_equip_info__descriptor) \
    , NULL, NULL, NULL, 0, 0, 0, 0, 0, NULL, 0, 0 }


struct  _ShipEquipArray
{
  ProtobufCMessage base;
  size_t n_shipinfo;
  ShipEquipInfo **shipinfo;
};
#define SHIP_EQUIP_ARRAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ship_equip_array__descriptor) \
    , 0,NULL }


struct  _OutOfDurableItemDefine
{
  ProtobufCMessage base;
  int32_t iid;
  int32_t shipid;
  char *shipname;
  int32_t position;
  int32_t durability;
};
#define OUT_OF_DURABLE_ITEM_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&out_of_durable_item_define__descriptor) \
    , 0, 0, NULL, 0, 0 }


struct  _TriggerSeaEventResult
{
  ProtobufCMessage base;
  int32_t failed;
  SeaBlockInfo *seainfo;
  int64_t coin;
  int64_t gold;
  /*
   * TODO: 返回事件结果
   */
  SeaEventLootDefine *loot;
  SeaEventLossDefine *loss;
  int64_t fame;
  int64_t exp;
  int32_t eventid;
  int32_t eventchanged;
  int64_t lootcoins;
  int32_t type;
  int32_t useprop;
  int32_t usedpropid;
  int32_t usedpropremaincount;
  size_t n_brokenequips;
  OutOfDurableItemDefine **brokenequips;
  int32_t sail_speed;
  size_t n_bowicon;
  ShipBowIconInfo **bowicon;
  /*
   *  required int32 avoidRockRate = 20;
   *  required int32 angelRate = 21;
   *  required int32 avoidStormRate = 22;
   */
  int32_t whilewhale;
};
#define TRIGGER_SEA_EVENT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trigger_sea_event_result__descriptor) \
    , 0, NULL, 0, 0, NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0,NULL, 0 }


struct  _FinishSeaEvent
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define FINISH_SEA_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&finish_sea_event__descriptor) \
    , 0, 0 }


struct  _FinishSeaEventResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define FINISH_SEA_EVENT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&finish_sea_event_result__descriptor) \
    , 0 }


struct  _GetPalaceInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_PALACE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_palace_info__descriptor) \
    , 0, 0 }


struct  _GetPalaceInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t development;
  int32_t population;
  int32_t trade;
  int32_t manufacture;
  int64_t myinvestment;
  int64_t totalinvestment;
  int32_t ismayor;
  int32_t olddevdirection;
  int32_t newdevdirection;
  int32_t nationidx;
  int32_t canselectdevdirection;
  char *mayorname;
  int32_t mayorlevel;
  int32_t mayorfame;
  int32_t mayoricon;
  int32_t mayornation;
  /*
   *second
   */
  int64_t nextcycletime;
  int32_t isfirstday;
  int64_t lastsessiontopinvest;
  int32_t licenseprice;
  int32_t licenserequiredfamelv;
  int64_t coins;
  int64_t golds;
  int64_t totalinvestcycleseconds;
  int64_t fames;
  int64_t licenserequiredfame;
  int64_t haslisence;
  int32_t license_can_use;
};
#define GET_PALACE_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_palace_info_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _InvestCity
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int64_t investcoin;
};
#define INVEST_CITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&invest_city__descriptor) \
    , 0, 0, 0 }


struct  _InvestCityResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
  int64_t add_fame;
  int32_t new_fame_level;
  int32_t skill_public_speaking;
  int64_t investcoin;
};
#define INVEST_CITY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&invest_city_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetRankList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_RANK_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_rank_list__descriptor) \
    , 0, 0 }


struct  _RankInfoDefine
{
  ProtobufCMessage base;
  int32_t rank;
  char *name;
  int32_t level;
  int32_t country;
  int64_t investment;
  int32_t characterid;
  char *guild;
  char *signature;
  protobuf_c_boolean has_votenum;
  int32_t votenum;
  int32_t iconidx;
  int32_t guildicon;
  int64_t famelv;
  int64_t onlinesec;
  int32_t guildid;
  /*
   *0 request 1 friend 2 black 3 refuse 4 none
   */
  int32_t relationwithme;
};
#define RANK_INFO_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rank_info_define__descriptor) \
    , 0, NULL, 0, 0, 0, 0, NULL, NULL, 0,0, 0, 0, 0, 0, 0, 0 }


struct  _GetRankListResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_rankinfo;
  RankInfoDefine **rankinfo;
  int32_t myrank;
  int64_t myinvest;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
  int32_t myguildid;
  int32_t isadmin;
};
#define GET_RANK_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_rank_list_result__descriptor) \
    , 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetVoteList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_VOTE_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_vote_list__descriptor) \
    , 0, 0 }


struct  _GetVoteListResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_rankinfo;
  RankInfoDefine **rankinfo;
  char *mayorname;
};
#define GET_VOTE_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_vote_list_result__descriptor) \
    , 0, 0,NULL, NULL }


struct  _VoteMayor
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t candidateid;
};
#define VOTE_MAYOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vote_mayor__descriptor) \
    , 0, 0, 0 }


struct  _VoteMayorResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define VOTE_MAYOR_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vote_mayor_result__descriptor) \
    , 0 }


struct  _ChangeDevDir
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t newdevdirection;
};
#define CHANGE_DEV_DIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&change_dev_dir__descriptor) \
    , 0, 0, 0 }


struct  _ChangeDevDirResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t newdevdirection;
};
#define CHANGE_DEV_DIR_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&change_dev_dir_result__descriptor) \
    , 0, 0 }


struct  _GetLabourUnion
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_LABOUR_UNION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_labour_union__descriptor) \
    , 0, 0 }


struct  _LabourDefine
{
  ProtobufCMessage base;
  int32_t characterid;
  /*
   *required int32 isAdmin = 3;
   */
  int32_t charactername;
};
#define LABOUR_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&labour_define__descriptor) \
    , 0, 0 }


struct  _GetLabourUnionResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t labourunionid;
  char *labourunionname;
  size_t n_adminlist;
  LabourDefine **adminlist;
  size_t n_stufflist;
  LabourDefine **stufflist;
  int32_t createrid;
  char *creatername;
};
#define GET_LABOUR_UNION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_labour_union_result__descriptor) \
    , 0, 0, NULL, 0,NULL, 0,NULL, 0, NULL }


struct  _CreateLabourUnion
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  char *labourunionname;
};
#define CREATE_LABOUR_UNION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_labour_union__descriptor) \
    , 0, 0, NULL }


struct  _CreateLabourUnionResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t labourunionid;
  int64_t cost;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
};
#define CREATE_LABOUR_UNION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_labour_union_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _DeleteLabourUnion
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define DELETE_LABOUR_UNION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_labour_union__descriptor) \
    , 0, 0 }


struct  _DeleteLabourUnionResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define DELETE_LABOUR_UNION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_labour_union_result__descriptor) \
    , 0 }


struct  _InviteLabour
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t membercid;
};
#define INVITE_LABOUR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&invite_labour__descriptor) \
    , 0, 0, 0 }


struct  _InviteLabourResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define INVITE_LABOUR_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&invite_labour_result__descriptor) \
    , 0 }


struct  _ApplyLabourUnion
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t labourunionid;
};
#define APPLY_LABOUR_UNION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&apply_labour_union__descriptor) \
    , 0, 0, 0 }


struct  _ApplyLabourUnionResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define APPLY_LABOUR_UNION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&apply_labour_union_result__descriptor) \
    , 0 }


struct  _QuitLabourUnion
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define QUIT_LABOUR_UNION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quit_labour_union__descriptor) \
    , 0, 0 }


struct  _QuitLabourUnionResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define QUIT_LABOUR_UNION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quit_labour_union_result__descriptor) \
    , 0 }


struct  _KickOutMember
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t membercid;
};
#define KICK_OUT_MEMBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kick_out_member__descriptor) \
    , 0, 0, 0 }


struct  _KickOutMemberResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define KICK_OUT_MEMBER_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kick_out_member_result__descriptor) \
    , 0 }


struct  _AdjustPrivilege
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t membercid;
  /*
   * if is 0, do nothing
   */
  int32_t bankprivilege;
  int32_t inviteprivilege;
};
#define ADJUST_PRIVILEGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&adjust_privilege__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _AdjustPrivilegeResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t bankprivilege;
  int32_t inviteprivilege;
};
#define ADJUST_PRIVILEGE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&adjust_privilege_result__descriptor) \
    , 0, 0, 0 }


struct  _DepositMoney
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int64_t money;
  int32_t ispersonal;
};
#define DEPOSIT_MONEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&deposit_money__descriptor) \
    , 0, 0, 0, 0 }


struct  _DepositMoneyResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
};
#define DEPOSIT_MONEY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&deposit_money_result__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _WithdrawMoney
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int64_t money;
  int32_t ispersonal;
};
#define WITHDRAW_MONEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&withdraw_money__descriptor) \
    , 0, 0, 0, 0 }


struct  _WithdrawMoneyResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
};
#define WITHDRAW_MONEY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&withdraw_money_result__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _DepositItem
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t id;
  int32_t type;
  int32_t ispersonal;
  int32_t iid;
  int32_t num;
};
#define DEPOSIT_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&deposit_item__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _DepositItemResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t id;
  int32_t type;
  BankItemDefine *deposititem;
};
#define DEPOSIT_ITEM_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&deposit_item_result__descriptor) \
    , 0, 0, 0, NULL }


struct  _WithdrawItem
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t id;
  int32_t type;
  int32_t ispersonal;
  int32_t num;
};
#define WITHDRAW_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&withdraw_item__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _WithdrawItemResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t id;
  int32_t type;
  int32_t num;
};
#define WITHDRAW_ITEM_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&withdraw_item_result__descriptor) \
    , 0, 0, 0, 0 }


struct  _ExpandBank
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t ispersonal;
};
#define EXPAND_BANK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&expand_bank__descriptor) \
    , 0, 0, 0 }


struct  _ExpandBankResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t bankcapacity;
  int64_t cost;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
};
#define EXPAND_BANK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&expand_bank_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _GetBankInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t ispersonal;
};
#define GET_BANK_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_bank_info__descriptor) \
    , 0, 0, 0 }


struct  _BankItemDefine
{
  ProtobufCMessage base;
  int32_t iid;
  int32_t itemtype;
  int32_t characteritemid;
  int32_t num;
  int32_t durability;
  int32_t max_durability;
  int32_t speed;
  int32_t attack;
  int32_t defense;
  int32_t steer_speed;
  int32_t optional_item;
  int32_t optional_num;
  char *optional_value;
};
#define BANK_ITEM_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bank_item_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL }


struct  _GetBankInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t coin;
  int32_t bankid;
  int32_t maxitemnum;
  size_t n_bankitem;
  BankItemDefine **bankitem;
  int32_t ispersonal;
  int64_t fame;
  int64_t exp;
  int64_t gold;
  int32_t guildid;
  int32_t deposit_item;
  int32_t withdraw_item;
  int32_t deposit_cash;
  int32_t withdraw_cash;
  int32_t isadmin;
  int32_t friendvalue;
  int32_t usesudanprop;
  int32_t tax;
  size_t n_insurane;
  InsuranceItem **insurane;
  /*
   *银币换v票汇率
   */
  float cointovticketfactor;
  InsuranceItemStatus *myinsurance;
  int32_t delegateactived;
};
#define GET_BANK_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_bank_info_result__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, NULL, 0 }


struct  _GetBankLog
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t ispersonal;
};
#define GET_BANK_LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_bank_log__descriptor) \
    , 0, 0, 0 }


struct  _GetBankLogResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_log;
  char **log;
};
#define GET_BANK_LOG_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_bank_log_result__descriptor) \
    , 0, 0,NULL }


struct  _SetMainTaskStatus
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t status;
  char *shipname;
};
#define SET_MAIN_TASK_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_main_task_status__descriptor) \
    , 0, 0, 0, NULL }


struct  _SetMainTaskStatusResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t status;
  int64_t coins;
  int64_t golds;
  int32_t exp;
  int32_t fame;
};
#define SET_MAIN_TASK_STATUS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_main_task_status_result__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _PropsInfo
{
  ProtobufCMessage base;
  int32_t id;
  int32_t num;
  int32_t propid;
};
#define PROPS_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&props_info__descriptor) \
    , 0, 0, 0 }


struct  _FightSummary
{
  ProtobufCMessage base;
  int32_t sailnum;
  int32_t shipnum;
  int32_t power;
  int32_t level;
  int32_t isfriend;
  char *name;
};
#define FIGHT_SUMMARY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fight_summary__descriptor) \
    , 0, 0, 0, 0, 0, NULL }


struct  _FightCannonInfo
{
  ProtobufCMessage base;
  int32_t attack;
  int32_t range;
  int32_t cannonid;
  int32_t iid;
};
#define FIGHT_CANNON_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fight_cannon_info__descriptor) \
    , 0, 0, 0, 0 }


struct  _BattleCaptainInfo
{
  ProtobufCMessage base;
  int32_t proto_id;
  int32_t is_captain;
  int32_t battle_special_skill_idx;
  int32_t hp;
  int32_t attack;
  int32_t defense;
  /*
   *增加的单挑概率 除以100
   */
  int32_t add_prob;
};
#define BATTLE_CAPTAIN_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&battle_captain_info__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _FightShipInfo
{
  ProtobufCMessage base;
  int32_t sid;
  char *shipname;
  /*
   *船首，可能没有分配
   */
  FightCannonInfo *bowgun;
  size_t n_cannons;
  FightCannonInfo **cannons;
  /*
   *船尾，可能没有分配
   */
  FightCannonInfo *aftergun;
  int32_t speed;
  int32_t steer_speed;
  /*
   *普通技能和特殊技能用type来区分
   */
  size_t n_skills;
  SkillDefine **skills;
  size_t n_flagship_companion_skills;
  SkillDefine **flagship_companion_skills;
  int32_t sailornum;
  int32_t max_hp;
  int32_t current_hp;
  int32_t defense;
  int32_t shipid;
  int32_t captainid;
  int32_t bowiconiid;
  int32_t maxsailornum;
  int32_t current_max_hp;
  int32_t model_modify;
  int32_t position;
  /*
   *单挑信息
   */
  BattleCaptainInfo *battle_info;
  int32_t can_catch;
};
#define FIGHT_SHIP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fight_ship_info__descriptor) \
    , 0, NULL, NULL, 0,NULL, NULL, 0, 0, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0 }


struct  _EngageInFight
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t forcefight;
  int32_t eventid;
  int64_t version;
  /*
   *0 normal 1 for task 2 pirateattack 3 attackpirate
   */
  int32_t fighttype;
  /*
   * 1 simple 2 normal 3 hard
   */
  int32_t fightlevel;
};
#define ENGAGE_IN_FIGHT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&engage_in_fight__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _EngageInFightResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t forcefight;
  size_t n_props;
  PropsInfo **props;
  size_t n_myships;
  FightShipInfo **myships;
  size_t n_enemyships;
  FightShipInfo **enemyships;
  FightSummary *myinfo;
  FightSummary *enemyinfo;
  int32_t victorypercent;
  char *key;
  char *filename;
  int32_t morale;
  int32_t npcid;
  int32_t npcmorale;
  int32_t npcforceid;
  size_t n_positiveskills;
  SkillDefine **positiveskills;
  int32_t eventid;
  /*
   *0 normal 1 for task 2 for pirate attack 3 attackpirate,4 loot user
   */
  int32_t fighttype;
  int32_t fightlevel;
  /*
   *seconds
   */
  int32_t maxdurable;
  int32_t cancatchshipnum;
  int32_t cancelfightcost;
  int32_t saveshipcost;
  int64_t vtickets;
  int32_t userlv;
  int32_t userfamelv;
  int32_t supportransom;
  int32_t charge_initiative;
  int32_t battle_time;
};
#define ENGAGE_IN_FIGHT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&engage_in_fight_result__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, 0,NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _EndFightShipInfo
{
  ProtobufCMessage base;
  int32_t hp;
  int32_t sailornum;
  int32_t shipid;
};
#define END_FIGHT_SHIP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_fight_ship_info__descriptor) \
    , 0, 0, 0 }


struct  _BattleLogItem
{
  ProtobufCMessage base;
  int32_t idx;
  /*
   *0 炮打敌人 1,杀了敌人多少水手,2,技能杀,3单挑取胜 100,敌人打我，101 敌人杀了多少水手，102 敌人的技能 103敌人单挑取胜
   */
  int32_t type;
  int32_t myshipid;
  /*
   *可能是多个
   */
  size_t n_enemyshipids;
  int32_t *enemyshipids;
  int32_t hurt;
  int32_t killedsailornum;
  /*
   *捕获水手
   */
  int32_t addedsailornum;
  int32_t cannonitemid;
  int32_t skillid;
  /*
   *发技能的雇佣军或小伙伴id,如果是玩家本身的设置为0
   */
  int32_t skillownerid;
  int32_t myshipx;
  int32_t myshipy;
  int32_t enemyshipx;
  int32_t enemyshipy;
};
#define BATTLE_LOG_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&battle_log_item__descriptor) \
    , 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 *校验客户端战斗过程
 */
struct  _BattleLog
{
  ProtobufCMessage base;
  size_t n_logs;
  BattleLogItem **logs;
};
#define BATTLE_LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&battle_log__descriptor) \
    , 0,NULL }


struct  _EndFight
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   * 1 win, 2 lose ,3 tie
   */
  int32_t reason;
  size_t n_myships;
  EndFightShipInfo **myships;
  size_t n_usedprops;
  PropsInfo **usedprops;
  int32_t morale;
  int32_t isautofight;
  /*
   *0 normal 1 for task 2 for pirate attack,4 loot user
   */
  int32_t fighttype;
  int32_t remainsec;
  int32_t attack_hurt;
  int32_t attack_sailors;
  size_t n_catchshipids;
  int32_t *catchshipids;
  size_t n_catchgoodsshipids;
  int32_t *catchgoodsshipids;
  int32_t usesec;
  BattleLog *battlelog;
};
#define END_FIGHT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_fight__descriptor) \
    , 0, 0, 0, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0, NULL }


struct  _LootDefine
{
  ProtobufCMessage base;
  int32_t itemtype;
  int32_t itemid;
  int32_t count;
};
#define LOOT_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&loot_define__descriptor) \
    , 0, 0, 0 }


struct  _LostGoodsDefine
{
  ProtobufCMessage base;
  int32_t shipid;
  int32_t itemid;
  int32_t lostcount;
  int32_t remaincount;
};
#define LOST_GOODS_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lost_goods_define__descriptor) \
    , 0, 0, 0, 0 }


struct  _SunkShipDetails
{
  ProtobufCMessage base;
  int32_t shipid;
  int32_t sid;
  int32_t lostmaxhp;
  int32_t position;
  int32_t lostsailornum;
  int32_t losthp;
  int32_t maxhp;
  int32_t maxsailornum;
};
#define SUNK_SHIP_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sunk_ship_details__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _SurvivedShipdetails
{
  ProtobufCMessage base;
  int32_t shipid;
  int32_t sid;
  int32_t maxhp;
  int32_t hp;
  int32_t sailornum;
  int32_t position;
  int32_t lostsailornum;
  int32_t losthp;
  int32_t maxsailornum;
};
#define SURVIVED_SHIPDETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&survived_shipdetails__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _CaptainInfo
{
  ProtobufCMessage base;
  CaptainDefine *captain;
  int32_t newlevel;
  int32_t lootexp;
  int32_t position;
};
#define CAPTAIN_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&captain_info__descriptor) \
    , NULL, 0, 0, 0 }


struct  _EndFightResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t reason;
  int64_t lootcoins;
  size_t n_lootitemsarray;
  LootDefine **lootitemsarray;
  /*
   *optional LootDefine lootGoods = 5;
   */
  int32_t supply;
  int32_t addedsaildays;
  /*
   *optional LootDefine lootProps = 8;
   */
  int64_t lootfame;
  int64_t coins;
  SeaBlockInfo *seainfo;
  int64_t lostcoin;
  size_t n_lostships;
  SunkShipDetails **lostships;
  size_t n_lostgoods;
  LostGoodsDefine **lostgoods;
  /*
   *required int32 flagShipSid = 15;
   *required int32 speed = 16;
   */
  int32_t shipx;
  int32_t shipy;
  int32_t endurancedays;
  int32_t sailorcount;
  int64_t golds;
  int64_t lootexp;
  int64_t totalexp;
  int64_t totalfame;
  int32_t explv;
  int32_t famelv;
  int32_t newlevel;
  size_t n_captains;
  CaptainInfo **captains;
  int32_t new_fame_level;
  int32_t isautofight;
  size_t n_survivedships;
  SurvivedShipdetails **survivedships;
  int32_t totalsupply;
  size_t n_brokenequips;
  OutOfDurableItemDefine **brokenequips;
  int32_t npcid;
  int32_t isprotect;
  int32_t fighttype;
  int32_t last_safe_city;
  int32_t presentscore;
  int32_t defensepiratetimes;
  int32_t canattackpiratecount;
  int32_t hurtpirateallvalue;
  int32_t skill_plunder_master;
  int32_t skill_stealing_from_thieves;
  int32_t skill_food_plunder;
  int64_t extralootcoins;
  int32_t lootenemysupply;
  size_t n_catchshipdefine;
  ShipDefine **catchshipdefine;
  int32_t starforloot;
  int32_t addsailorcoinsforloot;
  int32_t current_package_size;
  /*
   *  required int32 avoidRockRate = 46;
   *  required int32 angelRate = 47;
   *  required int32 avoidStormRate = 48;
   *  repeated ShipBowIconInfo BowIcon = 49;
   */
  int32_t max_package_size;
};
#define END_FIGHT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_fight_result__descriptor) \
    , 0, 0, 0, 0,NULL, 0, 0, 0, 0, NULL, 0, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0, 0,NULL, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0 }


struct  _StartAutoFight
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t fighttype;
};
#define START_AUTO_FIGHT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&start_auto_fight__descriptor) \
    , 0, 0, 0 }


struct  _AutoFightShipInfo
{
  ProtobufCMessage base;
  int32_t sid;
  char *shipname;
  int32_t sailorcount;
  int32_t hp;
  int32_t speed;
};
#define AUTO_FIGHT_SHIP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&auto_fight_ship_info__descriptor) \
    , 0, NULL, 0, 0, 0 }


struct  _StartAutoFightResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t win;
  int32_t isflagshipchanged;
  int32_t lostsailorscount;
  size_t n_deadships;
  AutoFightShipInfo **deadships;
  size_t n_remainships;
  AutoFightShipInfo **remainships;
  int32_t prestige;
};
#define START_AUTO_FIGHT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&start_auto_fight_result__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0,NULL, 0 }


struct  _GetSkillsDetails
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_SKILLS_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_skills_details__descriptor) \
    , 0, 0 }


struct  _SkillDefine
{
  ProtobufCMessage base;
  int32_t id;
  int32_t level;
  /*
   *0 npc,1,captain,2,player,3,companion normal special,4,companion special
   */
  int32_t skilltype;
  int32_t level_up;
};
#define SKILL_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&skill_define__descriptor) \
    , 0, 0, 0, 0 }


struct  _GetSkillsDetailsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t skillpoints;
  size_t n_skills;
  SkillDefine **skills;
  int32_t freeresettimes;
};
#define GET_SKILLS_DETAILS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_skills_details_result__descriptor) \
    , 0, 0, 0,NULL, 0 }


struct  _AddSkillPoint
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t skillid;
  int32_t points;
};
#define ADD_SKILL_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_skill_point__descriptor) \
    , 0, 0, 0, 0 }


struct  _AddSkillPointResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t skillid;
  int32_t skilllv;
  int32_t remainskillpoints;
};
#define ADD_SKILL_POINT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_skill_point_result__descriptor) \
    , 0, 0, 0, 0 }


struct  _ResetSkillPoints
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define RESET_SKILL_POINTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reset_skill_points__descriptor) \
    , 0, 0 }


struct  _ResetSkillPointsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t totalpoints;
  int32_t costvtickets;
  int32_t freeresettimes;
};
#define RESET_SKILL_POINTS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reset_skill_points_result__descriptor) \
    , 0, 0, 0, 0 }


struct  _NotifyBattleLog
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t fighttype;
};
#define NOTIFY_BATTLE_LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&notify_battle_log__descriptor) \
    , 0, 0, 0 }


struct  _NotifyBattleLogResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define NOTIFY_BATTLE_LOG_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&notify_battle_log_result__descriptor) \
    , 0 }


struct  _GetPersonalInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_PERSONAL_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_personal_info__descriptor) \
    , 0, 0 }


struct  _FriendValue
{
  ProtobufCMessage base;
  int32_t nationid;
  /*
   * multiplied by 100*1000
   */
  int32_t value;
};
#define FRIEND_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_value__descriptor) \
    , 0, 0 }


struct  _GetPersonalInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  char *heroname;
  int32_t iconid;
  int64_t level;
  int64_t exp;
  int64_t fame;
  int64_t famelevel;
  char *bio;
  char *guildname;
  int32_t nationid;
  /*
   *在线时间，不是注册时间
   */
  int64_t regtime;
  int64_t dailycost;
  int64_t coins;
  int64_t golds;
  int64_t bankcoins;
  size_t n_nation;
  FriendValue **nation;
  size_t n_personal;
  FriendValue **personal;
  int32_t gender;
  int32_t guildid;
  int32_t warehousedailycost;
  int32_t dockdailycost;
  int32_t captainsdailycost;
  int32_t guildicon;
  int32_t skillpoints;
  int32_t isgamemaster;
  /*
   *拥有许可证的城市
   */
  size_t n_ownlicensecities;
  int32_t *ownlicensecities;
  /*
   *许可证失效城市
   */
  size_t n_loselicensecities;
  int32_t *loselicensecities;
  /*
   *没有许可证的城市
   */
  size_t n_withoutlicensecities;
  int32_t *withoutlicensecities;
  size_t n_cityinfo;
  CityInfo **cityinfo;
};
#define GET_PERSONAL_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_personal_info_result__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0, NULL, NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _SetBioInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  char *bio;
};
#define SET_BIO_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_bio_info__descriptor) \
    , 0, 0, NULL }


struct  _SetBioInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define SET_BIO_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_bio_info_result__descriptor) \
    , 0 }


struct  _CancelFight
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t type;
  int32_t eventid;
  EndFight *lastfightinfo;
};
#define CANCEL_FIGHT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cancel_fight__descriptor) \
    , 0, 0, 0, 0, NULL }


struct  _CancelFightResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t usegolds;
  size_t n_user_positive_skills;
  SkillDefine **user_positive_skills;
};
#define CANCEL_FIGHT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cancel_fight_result__descriptor) \
    , 0, 0, 0,NULL }


struct  _GuildInfoDefine
{
  ProtobufCMessage base;
  int32_t id;
  char *name;
  char *adminname;
  int32_t membernum;
  int32_t nation;
  int32_t maxmemnum;
  int32_t guildicon;
};
#define GUILD_INFO_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&guild_info_define__descriptor) \
    , 0, NULL, NULL, 0, 0, 0, 0 }


struct  _GetGuildList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_GUILD_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_guild_list__descriptor) \
    , 0, 0 }


struct  _GetGuildListResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t guildid;
  size_t n_guilds;
  GuildInfoDefine **guilds;
  /*
   *0 normal, 1 admin 2 creator
   */
  int32_t memberstatus;
  int32_t applicationnum;
  int32_t invitationnum;
};
#define GET_GUILD_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_guild_list_result__descriptor) \
    , 0, 0, 0,NULL, 0, 0, 0 }


struct  _GetMyGuildDetails
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_MY_GUILD_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_my_guild_details__descriptor) \
    , 0, 0 }


struct  _GuildPersonalInfoDefine
{
  ProtobufCMessage base;
  int32_t characterid;
  int32_t iconid;
  char *heroname;
  int32_t level;
  /*
   *0 normal, 1 admin 2 creator
   */
  int32_t memberstatus;
  int32_t online;
  int32_t nationid;
  int32_t isgamemaster;
};
#define GUILD_PERSONAL_INFO_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&guild_personal_info_define__descriptor) \
    , 0, 0, NULL, 0, 0, 0, 0, 0 }


struct  _GuildRelationDefine
{
  ProtobufCMessage base;
  int32_t forceid;
  int32_t forcerelationvalue;
};
#define GUILD_RELATION_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&guild_relation_define__descriptor) \
    , 0, 0 }


struct  _GetMyGuildDetailsResult
{
  ProtobufCMessage base;
  int32_t id;
  int32_t failed;
  int32_t maxmembernum;
  char *name;
  size_t n_members;
  GuildPersonalInfoDefine **members;
  char *intro;
  /*
   * required int32 forceId=7;
   */
  int32_t nation;
  int32_t currentmemnum;
  int32_t creatorid;
  char *creatorname;
  size_t n_relations;
  GuildRelationDefine **relations;
  int32_t mystatus;
  char *announcement;
  int32_t guildicon;
  int32_t applicationnum;
  int32_t invitationnum;
};
#define GET_MY_GUILD_DETAILS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_my_guild_details_result__descriptor) \
    , 0, 0, 0, NULL, 0,NULL, NULL, 0, 0, 0, NULL, 0,NULL, 0, NULL, 0, 0, 0 }


struct  _GetApplyInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_APPLY_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_apply_info__descriptor) \
    , 0, 0 }


struct  _ApplyPersonInfoDefine
{
  ProtobufCMessage base;
  int32_t id;
  int32_t characterid;
  int32_t iconid;
  char *heroname;
  int32_t level;
  int32_t nationid;
  int32_t isgamemaster;
};
#define APPLY_PERSON_INFO_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&apply_person_info_define__descriptor) \
    , 0, 0, 0, NULL, 0, 0, 0 }


struct  _GetApplyInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t guild_id;
  size_t n_applications;
  ApplyPersonInfoDefine **applications;
};
#define GET_APPLY_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_apply_info_result__descriptor) \
    , 0, 0, 0,NULL }


struct  _CreateNewGuild
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  char *guildname;
  int32_t guildiconidx;
  char *guildintro;
};
#define CREATE_NEW_GUILD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_new_guild__descriptor) \
    , 0, 0, NULL, 0, NULL }


struct  _CreateNewGuildResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t guildid;
  int64_t reqlv;
  int64_t reqfame;
  int64_t reqcoins;
  int64_t curlv;
  int64_t curfame;
  int64_t curcoins;
};
#define CREATE_NEW_GUILD_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_new_guild_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _JoinGuildRequest
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t guildid;
};
#define JOIN_GUILD_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&join_guild_request__descriptor) \
    , 0, 0, 0 }


struct  _JoinGuildRequestResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t maxmembernum;
  int64_t coins;
  int64_t gold;
};
#define JOIN_GUILD_REQUEST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&join_guild_request_result__descriptor) \
    , 0, 0, 0, 0 }


struct  _GetGuildDetails
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t guildid;
};
#define GET_GUILD_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_guild_details__descriptor) \
    , 0, 0, 0 }


struct  _GetGuildDetailsResult
{
  ProtobufCMessage base;
  int32_t id;
  int32_t failed;
  int32_t maxmembernum;
  char *name;
  char *intro;
  /*
   * required int32 forceId=7;
   */
  int32_t nation;
  int32_t currentmemnum;
  int32_t creatorid;
  char *creatorname;
  size_t n_relations;
  GuildRelationDefine **relations;
  int32_t mystatus;
  int32_t myguildid;
  int32_t guildicon;
};
#define GET_GUILD_DETAILS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_guild_details_result__descriptor) \
    , 0, 0, 0, NULL, NULL, 0, 0, 0, NULL, 0,NULL, 0, 0, 0 }


struct  _ChangeGuildIntro
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t guildid;
  char *newintro;
};
#define CHANGE_GUILD_INTRO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&change_guild_intro__descriptor) \
    , 0, 0, 0, NULL }


struct  _ChangeGuildIntroResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define CHANGE_GUILD_INTRO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&change_guild_intro_result__descriptor) \
    , 0 }


struct  _ExpandGuildCapacity
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define EXPAND_GUILD_CAPACITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&expand_guild_capacity__descriptor) \
    , 0, 0 }


struct  _ExpandGuildCapacityResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t newcapacity;
  int64_t coins;
  int64_t gold;
  int32_t curmembernum;
};
#define EXPAND_GUILD_CAPACITY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&expand_guild_capacity_result__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _GuildMemberPermissionDefine
{
  ProtobufCMessage base;
  int32_t character_id;
  int32_t level;
  int32_t iconidx;
  char *heroname;
  int32_t admin;
  int32_t deposit_item;
  int32_t withdraw_item;
  int32_t deposit_cash;
  int32_t withdraw_cash;
  int32_t is_creator;
  int32_t nation;
  int32_t isgamemaster;
};
#define GUILD_MEMBER_PERMISSION_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&guild_member_permission_define__descriptor) \
    , 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetGuildMemberPermission
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_GUILD_MEMBER_PERMISSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_guild_member_permission__descriptor) \
    , 0, 0 }


struct  _GetGuildMemberPermissionResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t create_id;
  char *creator_name;
  size_t n_members;
  GuildMemberPermissionDefine **members;
};
#define GET_GUILD_MEMBER_PERMISSION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_guild_member_permission_result__descriptor) \
    , 0, 0, NULL, 0,NULL }


struct  _SetGuildPermissionDefine
{
  ProtobufCMessage base;
  int32_t character_id;
  int32_t admin;
  int32_t deposit_item;
  int32_t withdraw_item;
  int32_t deposit_cash;
  int32_t withdraw_cash;
};
#define SET_GUILD_PERMISSION_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_guild_permission_define__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _SetGuildMemberPermission
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  size_t n_members;
  SetGuildPermissionDefine **members;
};
#define SET_GUILD_MEMBER_PERMISSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_guild_member_permission__descriptor) \
    , 0, 0, 0,NULL }


struct  _SetGuildMemberPermissionResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define SET_GUILD_MEMBER_PERMISSION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_guild_member_permission_result__descriptor) \
    , 0 }


struct  _GetHiredCaptains
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_HIRED_CAPTAINS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_hired_captains__descriptor) \
    , 0, 0 }


struct  _GetHiredCaptainsResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_mycaptains;
  BarCaptainDefine **mycaptains;
};
#define GET_HIRED_CAPTAINS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_hired_captains_result__descriptor) \
    , 0, 0,NULL }


struct  _DealWithGuildJoin
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t join_id;
  int32_t accept;
  int32_t character_id;
  int32_t guild_id;
};
#define DEAL_WITH_GUILD_JOIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&deal_with_guild_join__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _DealWithGuildJoinResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t action;
};
#define DEAL_WITH_GUILD_JOIN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&deal_with_guild_join_result__descriptor) \
    , 0, 0 }


struct  _ChangeGuildAnnouncement
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t guildid;
  char *newannouncement;
};
#define CHANGE_GUILD_ANNOUNCEMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&change_guild_announcement__descriptor) \
    , 0, 0, 0, NULL }


struct  _ChangeGuildAnnouncementResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define CHANGE_GUILD_ANNOUNCEMENT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&change_guild_announcement_result__descriptor) \
    , 0 }


struct  _RemoveGuildMember
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t guildid;
  int32_t membercharacterid;
};
#define REMOVE_GUILD_MEMBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remove_guild_member__descriptor) \
    , 0, 0, 0, 0 }


struct  _RemoveGuildMemberResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define REMOVE_GUILD_MEMBER_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remove_guild_member_result__descriptor) \
    , 0 }


struct  _ExitFromGuild
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t guildid;
};
#define EXIT_FROM_GUILD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&exit_from_guild__descriptor) \
    , 0, 0, 0 }


struct  _ExitFromGuildResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define EXIT_FROM_GUILD_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&exit_from_guild_result__descriptor) \
    , 0 }


struct  _DismissGuild
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t guildid;
};
#define DISMISS_GUILD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dismiss_guild__descriptor) \
    , 0, 0, 0 }


struct  _DismissGuildResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define DISMISS_GUILD_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dismiss_guild_result__descriptor) \
    , 0 }


struct  _GetSearchGuildList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  char *keyword;
};
#define GET_SEARCH_GUILD_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_search_guild_list__descriptor) \
    , 0, 0, NULL }


struct  _GetSearchGuildListResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t guildid;
  size_t n_guilds;
  GuildInfoDefine **guilds;
};
#define GET_SEARCH_GUILD_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_search_guild_list_result__descriptor) \
    , 0, 0, 0,NULL }


struct  _RefreshCaptainList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t usegold;
};
#define REFRESH_CAPTAIN_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&refresh_captain_list__descriptor) \
    , 0, 0, 0 }


struct  _RefreshCaptainListResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_captains;
  BarCaptainDefine **captains;
  int64_t coins;
  int64_t gold;
  int64_t costgold;
  int32_t refreshinterval;
  int64_t lastrefreshtime;
  int64_t distocaptainfinish;
};
#define REFRESH_CAPTAIN_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&refresh_captain_list_result__descriptor) \
    , 0, 0,NULL, 0, 0, 0, 0, 0, 0 }


struct  _GetFriendsList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_FRIENDS_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_friends_list__descriptor) \
    , 0, 0 }


struct  _FriendsDefine
{
  ProtobufCMessage base;
  int32_t characterid;
  int32_t level;
  int32_t fame;
  int32_t iconidx;
  int32_t nation;
  char *heroname;
  int32_t online;
  int32_t status;
  int32_t isgamemaster;
};
#define FRIENDS_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friends_define__descriptor) \
    , 0, 0, 0, 0, 0, NULL, 0, 0, 0 }


struct  _GetFriendsListResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_friends;
  FriendsDefine **friends;
  int32_t friendsrequestnum;
  int32_t can_send_gift_count;
  size_t n_can_not_send_cid;
  int32_t *can_not_send_cid;
};
#define GET_FRIENDS_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_friends_list_result__descriptor) \
    , 0, 0,NULL, 0, 0, 0,NULL }


struct  _GetBlackList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_BLACK_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_black_list__descriptor) \
    , 0, 0 }


struct  _GetBlackListResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_friends;
  FriendsDefine **friends;
};
#define GET_BLACK_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_black_list_result__descriptor) \
    , 0, 0,NULL }


struct  _FriendsOperation
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *0 add,1,delete,2,blacklist,3 accept friends req,4 refuse friends req,5 remove from blacklist
   */
  int32_t actioncode;
  int32_t characterid;
};
#define FRIENDS_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friends_operation__descriptor) \
    , 0, 0, 0, 0 }


struct  _FriendsOperationResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t actioncode;
  int32_t characterid;
};
#define FRIENDS_OPERATION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friends_operation_result__descriptor) \
    , 0, 0, 0 }


struct  _GetFriendsReqList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_FRIENDS_REQ_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_friends_req_list__descriptor) \
    , 0, 0 }


struct  _GetFriendsReqListResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_friends;
  FriendsDefine **friends;
};
#define GET_FRIENDS_REQ_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_friends_req_list_result__descriptor) \
    , 0, 0,NULL }


struct  _FireCaptain
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t captainid;
};
#define FIRE_CAPTAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fire_captain__descriptor) \
    , 0, 0, 0 }


struct  _FireCaptainResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_mycaptains;
  BarCaptainDefine **mycaptains;
};
#define FIRE_CAPTAIN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fire_captain_result__descriptor) \
    , 0, 0,NULL }


struct  _DestoryItems
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t uniqueid;
  int32_t itemtype;
  int64_t count;
};
#define DESTORY_ITEMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&destory_items__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _DestoryItemsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t count;
};
#define DESTORY_ITEMS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&destory_items_result__descriptor) \
    , 0, 0 }


struct  _SearchUserByName
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  char *heroname;
};
#define SEARCH_USER_BY_NAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&search_user_by_name__descriptor) \
    , 0, 0, NULL }


struct  _SearchUserByNameResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_friends;
  FriendsDefine **friends;
};
#define SEARCH_USER_BY_NAME_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&search_user_by_name_result__descriptor) \
    , 0, 0,NULL }


struct  _TakeAllAttachment
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t mailid;
};
#define TAKE_ALL_ATTACHMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&take_all_attachment__descriptor) \
    , 0, 0, 0 }


struct  _TakeAllAttachmentResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t usercoins;
  int64_t usergolds;
  int64_t fame;
  int64_t exp;
};
#define TAKE_ALL_ATTACHMENT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&take_all_attachment_result__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _GetItemsDetailInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t itemid;
  int32_t itemtype;
  int32_t uniqueid;
};
#define GET_ITEMS_DETAIL_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_items_detail_info__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _GetItemsDetailInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t itemtype;
  int32_t itemid;
  int32_t uniqueid;
  HatchItemsDefine *goods;
  ShipDefine *ship;
  EquipmentDefine *equipment;
  DrawingItemsDefine *drawing;
  SpecialItemsDefine *special;
};
#define GET_ITEMS_DETAIL_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_items_detail_info_result__descriptor) \
    , 0, 0, 0, 0, NULL, NULL, NULL, NULL, NULL }


struct  _GetDevGoodsInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_DEV_GOODS_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_dev_goods_info__descriptor) \
    , 0, 0 }


struct  _DevGoodsDetails
{
  ProtobufCMessage base;
  int32_t itemid;
  int64_t currentcount;
  int64_t requiredcount;
};
#define DEV_GOODS_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dev_goods_details__descriptor) \
    , 0, 0, 0 }


struct  _GetDevGoodsInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_goods;
  DevGoodsDetails **goods;
  int64_t nextcycletime;
  int64_t rewardcoins;
  int64_t rewardgolds;
  int32_t rewardfame;
  int32_t isfirstday;
  int32_t mayorid;
  int32_t olddevdirection;
  int32_t newdevdirection;
  int32_t skill_administration;
  int32_t captain_skill_good_reputation;
  int32_t captain_skill_good_reputation_captain_id;
  int32_t captain_skill_good_reputation_captain_type;
  int64_t totalinvestcycleseconds;
};
#define GET_DEV_GOODS_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_dev_goods_info_result__descriptor) \
    , 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _ProvideDevGoods
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t goodsindex;
  int32_t count;
};
#define PROVIDE_DEV_GOODS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&provide_dev_goods__descriptor) \
    , 0, 0, 0, 0 }


struct  _ProvideDevGoodsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t addedcount;
  int32_t currentcount;
  int32_t requiredcount;
  int32_t goodsid;
  int64_t addedcoins;
  int32_t addedfame;
  int64_t coins;
  int64_t fame;
  int32_t addedexp;
  int64_t exp;
  int32_t new_fame_level;
  int32_t skill_administration;
  int32_t captain_skill_good_reputation;
  int32_t captain_skill_good_reputation_captain_id;
};
#define PROVIDE_DEV_GOODS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&provide_dev_goods_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetDevGoodsCount
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t goodsindex;
};
#define GET_DEV_GOODS_COUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_dev_goods_count__descriptor) \
    , 0, 0, 0 }


struct  _GetDevGoodsCountResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t count;
  int32_t goodsid;
};
#define GET_DEV_GOODS_COUNT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_dev_goods_count_result__descriptor) \
    , 0, 0, 0 }


struct  _GetFriendValue
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t forcity;
};
#define GET_FRIEND_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_friend_value__descriptor) \
    , 0, 0, 0 }


struct  _GetFriendValueResult
{
  ProtobufCMessage base;
  int32_t failed;
  /*
   *repeated FriendValue personal = 3;
   */
  size_t n_nation;
  FriendValue **nation;
};
#define GET_FRIEND_VALUE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_friend_value_result__descriptor) \
    , 0, 0,NULL }


struct  _GetUserInfoById
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t cid;
};
#define GET_USER_INFO_BY_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_user_info_by_id__descriptor) \
    , 0, 0, 0 }


struct  _GetUserInfoByIdResult
{
  ProtobufCMessage base;
  int32_t failed;
  char *heroname;
  int32_t level;
  int64_t fame;
  char *bio;
  char *guildname;
  int32_t icon;
  /*
   * 1 为好友
   */
  int32_t relationstatus;
  int32_t nation;
  int32_t guildicon;
  int64_t onlinesecs;
  int32_t myguildid;
  int32_t caninvite;
  int32_t usercid;
};
#define GET_USER_INFO_BY_ID_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_user_info_by_id_result__descriptor) \
    , 0, NULL, 0, 0, NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _TestCreateNewGuild
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define TEST_CREATE_NEW_GUILD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test_create_new_guild__descriptor) \
    , 0, 0 }


struct  _TestCreateNewGuildResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t reqlv;
  int64_t reqfame;
  int64_t reqcoins;
  int64_t curlv;
  int64_t curfame;
  int64_t curcoins;
};
#define TEST_CREATE_NEW_GUILD_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test_create_new_guild_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _InviteUserToGuild
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t cid;
};
#define INVITE_USER_TO_GUILD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&invite_user_to_guild__descriptor) \
    , 0, 0, 0 }


struct  _InviteUserToGuildResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define INVITE_USER_TO_GUILD_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&invite_user_to_guild_result__descriptor) \
    , 0 }


struct  _GetInvitationList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_INVITATION_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_invitation_list__descriptor) \
    , 0, 0 }


struct  _InvitationDefine
{
  ProtobufCMessage base;
  int32_t invitationid;
  int32_t invitorid;
  int32_t iconid;
  char *name;
  int32_t invitorlevel;
  int32_t invitornationid;
  char *invitorname;
  int32_t invitorfamelv;
  int32_t guildid;
  int32_t invitoriconid;
  int32_t guildcurnum;
  int32_t guildmaxnum;
  int32_t isgamemaster;
};
#define INVITATION_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&invitation_define__descriptor) \
    , 0, 0, 0, NULL, 0, 0, NULL, 0, 0, 0, 0, 0, 0 }


struct  _GetInvitationListResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_invitations;
  InvitationDefine **invitations;
};
#define GET_INVITATION_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_invitation_list_result__descriptor) \
    , 0, 0,NULL }


struct  _DealWithInvitation
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t accept;
  int32_t invitationid;
};
#define DEAL_WITH_INVITATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&deal_with_invitation__descriptor) \
    , 0, 0, 0, 0 }


struct  _DealWithInvitationResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t accept;
};
#define DEAL_WITH_INVITATION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&deal_with_invitation_result__descriptor) \
    , 0, 0 }


struct  _GetVTicketMarketItems
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *  required int32 refresh = 4;
   */
  int32_t type;
};
#define GET_VTICKET_MARKET_ITEMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_vticket_market_items__descriptor) \
    , 0, 0, 0 }


struct  _VTicketMarketItemDefine
{
  ProtobufCMessage base;
  int32_t itemid;
  int64_t count;
  int32_t discount;
  /*
   *x 100
   */
  int32_t price;
  int32_t uniqueid;
  int32_t promotion;
  char *iabstring;
  int32_t sort;
};
#define VTICKET_MARKET_ITEM_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vticket_market_item_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, NULL, 0 }


struct  _BlackMarketRandomShipAndEquipDefine
{
  ProtobufCMessage base;
  int32_t uniqueid;
  int32_t itemid;
  int32_t price;
  int32_t count;
  int32_t sort;
};
#define BLACK_MARKET_RANDOM_SHIP_AND_EQUIP_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&black_market_random_ship_and_equip_define__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _GetVTicketMarketItemsResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_items;
  VTicketMarketItemDefine **items;
  int64_t golds;
  int64_t coins;
  int32_t type;
  /*
   *  required int32 refreshCost = 6;
   */
  int32_t currentpackagesize;
  int32_t maxpackagesize;
  int32_t deliverservicecd;
  size_t n_randomship;
  BlackMarketRandomShipAndEquipDefine **randomship;
  size_t n_randomequip;
  BlackMarketRandomShipAndEquipDefine **randomequip;
  size_t n_randomitem;
  BlackMarketRandomShipAndEquipDefine **randomitem;
  char *payload;
  int64_t blackmarketlefttime;
};
#define GET_VTICKET_MARKET_ITEMS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_vticket_market_items_result__descriptor) \
    , 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, NULL, 0 }


struct  _BuyVTicketMarketItem
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t type;
  int32_t uniqueid;
  int32_t count;
};
#define BUY_VTICKET_MARKET_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_vticket_market_item__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _BuyVTicketMarketItemResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t type;
  int32_t itemid;
  int64_t golds;
  int64_t coins;
  int32_t count;
  int32_t price;
  int64_t drop_rate_increase_ramian_time;
  int32_t drop_rate_increase_type;
};
#define BUY_VTICKET_MARKET_ITEM_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_vticket_market_item_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetCurrentInvestData
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_CURRENT_INVEST_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_current_invest_data__descriptor) \
    , 0, 0 }


struct  _GetCurrentInvestDataResult
{
  ProtobufCMessage base;
  int32_t failed;
  RankInfoDefine *thissessiontop;
  int64_t myinvest;
  /*
   *second
   */
  int64_t nextcycletime;
  int64_t lastsessiontopinvest;
  int32_t skill_public_speaking;
  int64_t totalinvestcycleseconds;
};
#define GET_CURRENT_INVEST_DATA_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_current_invest_data_result__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0 }


struct  _GetUserTasks
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_USER_TASKS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_user_tasks__descriptor) \
    , 0, 0 }


struct  _AttackBossInfo
{
  ProtobufCMessage base;
  int32_t bossid;
  int32_t positionx;
  int32_t positiony;
};
#define ATTACK_BOSS_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&attack_boss_info__descriptor) \
    , 0, 0, 0 }


struct  _CompanionTaskDefine
{
  ProtobufCMessage base;
  int32_t taskid;
  int32_t currentpartid;
  /*
   *0 normal,1 completed
   */
  int32_t taskstatus;
  int32_t protoid;
  int32_t completedtasknum;
  int32_t beatnpcnum;
};
#define COMPANION_TASK_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&companion_task_define__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _GetUserTasksResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t maintaskid;
  /*
   *0 normal,1 completed
   */
  int32_t maintaskstatus;
  int32_t maintaskcompletedpartid;
  TaskDefine *sidetask;
  /*
   *repeated TaskDefine dailyTasks = 4;
   */
  int64_t exp;
  int64_t fame;
  int64_t coins;
  int64_t golds;
  int32_t bargirlfelling;
  int32_t completedalltasks;
  int32_t cityid;
  int64_t prayremaintime;
  size_t n_exploitsection;
  int32_t *exploitsection;
  int32_t myexploitscore;
  int32_t attacktimes;
  /*
   *0 can not, 1 can attack
   */
  int32_t attackstatus;
  int64_t distozero;
  /*
   *0 can not 1 can attack
   */
  int32_t pirateattackstatus;
  int32_t lastpreyindex;
  AttackBossInfo *bossinfo;
  int32_t praycollingtime;
  int32_t levelenough;
  size_t n_companionstasks;
  CompanionTaskDefine **companionstasks;
  int32_t loot_count;
  int32_t sign_for_loot_reward;
  int32_t tavern_task_count;
  int32_t sign_for_tavern_task_reward;
  int64_t dis_to_oneday_finish;
  int32_t boss_alive;
};
#define GET_USER_TASKS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_user_tasks_result__descriptor) \
    , 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0 }


struct  _UseSudanMask
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int64_t sudanmaskid;
};
#define USE_SUDAN_MASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&use_sudan_mask__descriptor) \
    , 0, 0, 0 }


struct  _UseSudanMaskResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define USE_SUDAN_MASK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&use_sudan_mask_result__descriptor) \
    , 0 }


struct  _EquipHero
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t headid;
  int32_t clothesid;
  int32_t weaponid;
  int32_t accessid;
  int32_t shoeid;
};
#define EQUIP_HERO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equip_hero__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _EquipHeroResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t hp;
  int32_t attack;
  int32_t defense;
};
#define EQUIP_HERO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equip_hero_result__descriptor) \
    , 0, 0, 0, 0 }


struct  _GetHeroEquip
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *请求的玩家数据，如果没有提供则使用session里的character_id，也就是返回自己的数据
   */
  protobuf_c_boolean has_character_id;
  int32_t character_id;
};
#define GET_HERO_EQUIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_hero_equip__descriptor) \
    , 0, 0, 0,0 }


struct  _ItemIdPair
{
  ProtobufCMessage base;
  int32_t uniqueid;
  int32_t iid;
};
#define ITEM_ID_PAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&item_id_pair__descriptor) \
    , 0, 0 }


struct  _GetHeroEquipResult
{
  ProtobufCMessage base;
  int32_t failed;
  ItemIdPair *head;
  ItemIdPair *clothes;
  ItemIdPair *weapon;
  ItemIdPair *access;
  ItemIdPair *shoe;
  int32_t defense;
  int32_t hp;
  int32_t attack;
};
#define GET_HERO_EQUIP_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_hero_equip_result__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL, 0, 0, 0 }


struct  _BuyCityLicense
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define BUY_CITY_LICENSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_city_license__descriptor) \
    , 0, 0 }


struct  _BuyCityLicenseResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define BUY_CITY_LICENSE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_city_license_result__descriptor) \
    , 0 }


struct  _DeleteUser
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   * 1,delete account,2 delete character
   */
  int32_t deleteaccount;
  int32_t languagecode;
  char *apiurl;
};
#define DELETE_USER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_user__descriptor) \
    , 0, 0, 0, 0, NULL }


struct  _DeleteUserResult
{
  ProtobufCMessage base;
  int32_t failed;
  char *email;
  int32_t characterid;
  int32_t deleteaccount;
};
#define DELETE_USER_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_user_result__descriptor) \
    , 0, NULL, 0, 0 }


struct  _ChangePassword
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  char *password;
  int32_t languagecode;
  char *apiurl;
};
#define CHANGE_PASSWORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&change_password__descriptor) \
    , 0, 0, NULL, 0, NULL }


struct  _ChangePasswordResult
{
  ProtobufCMessage base;
  int32_t failed;
  char *password;
};
#define CHANGE_PASSWORD_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&change_password_result__descriptor) \
    , 0, NULL }


struct  _SelectHeroPositiveSkill
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t slotindex;
  int32_t skillid;
};
#define SELECT_HERO_POSITIVE_SKILL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&select_hero_positive_skill__descriptor) \
    , 0, 0, 0, 0 }


struct  _SelectHeroPositiveSkillResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t slotindex;
  int32_t skillid;
  int32_t skilllv;
};
#define SELECT_HERO_POSITIVE_SKILL_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&select_hero_positive_skill_result__descriptor) \
    , 0, 0, 0, 0 }


struct  _GetHeroPositiveSkillList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_HERO_POSITIVE_SKILL_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_hero_positive_skill_list__descriptor) \
    , 0, 0 }


struct  _GetHeroPositiveSkillListResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_skills;
  SkillDefine **skills;
};
#define GET_HERO_POSITIVE_SKILL_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_hero_positive_skill_list_result__descriptor) \
    , 0, 0,NULL }


struct  _GetSelectedPositiveSkills
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_SELECTED_POSITIVE_SKILLS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_selected_positive_skills__descriptor) \
    , 0, 0 }


struct  _PositiveSkill
{
  ProtobufCMessage base;
  int32_t id;
  int32_t level;
  int32_t slotindex;
};
#define POSITIVE_SKILL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&positive_skill__descriptor) \
    , 0, 0, 0 }


struct  _GetSelectedPositiveSkillsResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_skills;
  PositiveSkill **skills;
  int32_t skillpoints;
};
#define GET_SELECTED_POSITIVE_SKILLS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_selected_positive_skills_result__descriptor) \
    , 0, 0,NULL, 0 }


struct  _GetSailInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_SAIL_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_sail_info__descriptor) \
    , 0, 0 }


struct  _GetSailInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  LeaveCityResult *seadata;
  int32_t saildays;
  int32_t lastfighteventid;
  size_t n_wantedforceids;
  int32_t *wantedforceids;
  CurrentMainTaskInfo *maintaskinfo;
  int32_t failedlastfightwithoutcheck;
  int64_t gold;
  int64_t coins;
  int32_t saveshipcost;
  /*
   *required int32 delegateActive = 7;
   */
  CurrentCompanionTaskInfo *companiontaskinfo;
};
#define GET_SAIL_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_sail_info_result__descriptor) \
    , 0, NULL, 0, 0, 0,NULL, NULL, 0, 0, 0, 0, NULL }


struct  _InsertUserName
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  char *username;
  int32_t iconidx;
  int32_t gender;
};
#define INSERT_USER_NAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&insert_user_name__descriptor) \
    , 0, 0, NULL, 0, 0 }


struct  _InsertUserNameResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define INSERT_USER_NAME_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&insert_user_name_result__descriptor) \
    , 0 }


struct  _GetLeaderboard
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int64_t bycoins;
};
#define GET_LEADERBOARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_leaderboard__descriptor) \
    , 0, 0, 0 }


struct  _LeaderboardItem
{
  ProtobufCMessage base;
  int32_t rank;
  char *name;
  int32_t exp;
  int32_t country;
  int64_t coins;
  int32_t golds;
  int32_t iconidx;
  int64_t fame;
};
#define LEADERBOARD_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&leaderboard_item__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0, 0 }


struct  _GetLeaderboardResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_items;
  LeaderboardItem **items;
};
#define GET_LEADERBOARD_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_leaderboard_result__descriptor) \
    , 0, 0,NULL }


struct  _GetCityStatus
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t cityid;
};
#define GET_CITY_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_city_status__descriptor) \
    , 0, 0, 0 }


struct  _GetCityStatusResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t friendvalue;
  int32_t haslicense;
  int32_t cityid;
  int32_t iswanted;
  int32_t in_war;
  int32_t license_can_use;
  int32_t nation;
};
#define GET_CITY_STATUS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_city_status_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetDiscoveredCities
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_DISCOVERED_CITIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_discovered_cities__descriptor) \
    , 0, 0 }


struct  _GetDiscoveredCitiesResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_discoveredcityids;
  int32_t *discoveredcityids;
};
#define GET_DISCOVERED_CITIES_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_discovered_cities_result__descriptor) \
    , 0, 0,NULL }


struct  _AddDiscoveredCity
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t cityid;
};
#define ADD_DISCOVERED_CITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_discovered_city__descriptor) \
    , 0, 0, 0 }


struct  _AddDiscoveredCityResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cityid;
  int32_t addedexp;
  int32_t addedfame;
  int32_t totalexp;
  int32_t totalfame;
  int64_t coins;
  int64_t golds;
  int32_t newlevel;
  int32_t fameadded;
  size_t n_captains;
  CaptainInfo **captains;
  int32_t new_fame_level;
};
#define ADD_DISCOVERED_CITY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_discovered_city_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0 }


struct  _ForceFightStatus
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define FORCE_FIGHT_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&force_fight_status__descriptor) \
    , 0, 0 }


struct  _ForceFightStatusResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define FORCE_FIGHT_STATUS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&force_fight_status_result__descriptor) \
    , 0 }


struct  _GetCityProduces
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t cityid;
};
#define GET_CITY_PRODUCES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_city_produces__descriptor) \
    , 0, 0, 0 }


struct  _CityProduceDefine
{
  ProtobufCMessage base;
  int32_t goodsid;
  int32_t requiredtradelevel;
};
#define CITY_PRODUCE_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&city_produce_define__descriptor) \
    , 0, 0 }


struct  _GetCityProducesResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cityid;
  int32_t currenttradelevel;
  size_t n_produces;
  CityProduceDefine **produces;
};
#define GET_CITY_PRODUCES_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_city_produces_result__descriptor) \
    , 0, 0, 0, 0,NULL }


struct  _GetCityDemands
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t cityid;
};
#define GET_CITY_DEMANDS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_city_demands__descriptor) \
    , 0, 0, 0 }


struct  _CityDemandsDefine
{
  ProtobufCMessage base;
  int32_t goodsid;
  int32_t price;
  int32_t ispopular;
};
#define CITY_DEMANDS_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&city_demands_define__descriptor) \
    , 0, 0, 0 }


struct  _GetCityDemandsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cityid;
  int32_t currenttradelevel;
  size_t n_prices;
  CityDemandsDefine **prices;
};
#define GET_CITY_DEMANDS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_city_demands_result__descriptor) \
    , 0, 0, 0, 0,NULL }


struct  _GetMainTask
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_MAIN_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_main_task__descriptor) \
    , 0, 0 }


struct  _GetMainTaskResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t currenttaskid;
  /*
   *0 normal,1 completed
   */
  int32_t currenttaskstatus;
  int32_t completedtaskpart;
  int32_t totalpartnum;
};
#define GET_MAIN_TASK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_main_task_result__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _CompleteMainTask
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *if partId = 0, complete task immediately
   */
  int32_t partid;
};
#define COMPLETE_MAIN_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&complete_main_task__descriptor) \
    , 0, 0, 0 }


struct  _CompleteMainTaskResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t currenttaskid;
  /*
   * 0 if all parts are completed
   */
  int32_t nextpartid;
  int32_t shouldreachcity;
};
#define COMPLETE_MAIN_TASK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&complete_main_task_result__descriptor) \
    , 0, 0, 0, 0 }


struct  _GetMainTaskReward
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_MAIN_TASK_REWARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_main_task_reward__descriptor) \
    , 0, 0 }


struct  _GetMainTaskRewardResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t rewardtaskid;
  int32_t newtaskid;
  int64_t exp;
  int64_t coins;
  int32_t golds;
  int64_t fame;
  int64_t rewardcoin;
  int32_t rewardexp;
  int64_t rewardgold;
  int32_t rewardfame;
  int32_t forceid;
  int32_t forceaffect;
  int32_t newlevel;
  size_t n_captains;
  CaptainInfo **captains;
  int32_t new_fame_level;
};
#define GET_MAIN_TASK_REWARD_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_main_task_reward_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0 }


struct  _GetEventTaskList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_EVENT_TASK_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_event_task_list__descriptor) \
    , 0, 0 }


struct  _EventTaskListDefine
{
  ProtobufCMessage base;
  int32_t taskid;
  /*
   *0 normal,1 completed
   */
  int32_t taskstatus;
};
#define EVENT_TASK_LIST_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_task_list_define__descriptor) \
    , 0, 0 }


struct  _GetEventTaskListResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_acceptedtasklist;
  EventTaskListDefine **acceptedtasklist;
  size_t n_tasklist;
  EventTaskListDefine **tasklist;
};
#define GET_EVENT_TASK_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_event_task_list_result__descriptor) \
    , 0, 0,NULL, 0,NULL }


struct  _HandleEventTask
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t taskid;
  /*
   * 0:get task, 1:submit task,2 get reward,3 give up task
   */
  int32_t actioncode;
};
#define HANDLE_EVENT_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&handle_event_task__descriptor) \
    , 0, 0, 0, 0 }


struct  _HandleEventTaskResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t actioncode;
  int32_t taskid;
  int64_t coin;
  int64_t exp;
  int64_t fame;
  int64_t gold;
  int64_t rewardcoin;
  int32_t rewardexp;
  int64_t rewardgold;
  int32_t rewardfame;
  int32_t forceid;
  int32_t forceaffect;
  int32_t newlevel;
  size_t n_captains;
  CaptainInfo **captains;
  int32_t new_fame_level;
};
#define HANDLE_EVENT_TASK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&handle_event_task_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0 }


struct  _GetNpcScore
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   * 0 for player himself
   */
  size_t n_npcids;
  int32_t *npcids;
};
#define GET_NPC_SCORE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_npc_score__descriptor) \
    , 0, 0, 0,NULL }


struct  _GetNpcScoreResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_lowscores;
  int32_t *lowscores;
  size_t n_highescores;
  int32_t *highescores;
};
#define GET_NPC_SCORE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_npc_score_result__descriptor) \
    , 0, 0,NULL, 0,NULL }


struct  _GetServerInfo
{
  ProtobufCMessage base;
  ServerVerion clientversion;
};
#define GET_SERVER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_server_info__descriptor) \
    , SERVER_VERION__VERSION }


struct  _GetServerInfoResult
{
  ProtobufCMessage base;
  ServerVerion serverversion;
  ServerVerion clientversion;
  char *updateurl;
  int32_t extraflags;
};
#define GET_SERVER_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_server_info_result__descriptor) \
    , SERVER_VERION__VERSION, 0, NULL, 0 }


struct  _PingServer
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define PING_SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ping_server__descriptor) \
    , 0, 0 }


struct  _PingServerResult
{
  ProtobufCMessage base;
  int32_t timeoutseconds;
};
#define PING_SERVER_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ping_server_result__descriptor) \
    , 0 }


struct  _ExpandPackageSize
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define EXPAND_PACKAGE_SIZE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&expand_package_size__descriptor) \
    , 0, 0 }


struct  _ExpandPackageSizeResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t newpackagesize;
  int64_t cost;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
};
#define EXPAND_PACKAGE_SIZE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&expand_package_size_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _GetPretaskItems
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_PRETASK_ITEMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_pretask_items__descriptor) \
    , 0, 0 }


struct  _PretaskItemDefine
{
  ProtobufCMessage base;
  int32_t itemid;
  int32_t itemtype;
  int32_t itemamount;
};
#define PRETASK_ITEM_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pretask_item_define__descriptor) \
    , 0, 0, 0 }


struct  _GetPretaskItemsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t coin;
  /*
   */
  int64_t bank;
  size_t n_items;
  PretaskItemDefine **items;
  int64_t addcoin;
  int64_t addgolds;
  int64_t golds;
};
#define GET_PRETASK_ITEMS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_pretask_items_result__descriptor) \
    , 0, 0, 0, 0,NULL, 0, 0, 0 }


struct  _GetOnsaleItems
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_ONSALE_ITEMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_onsale_items__descriptor) \
    , 0, 0 }


struct  _OnsaleItemDefine
{
  ProtobufCMessage base;
  int32_t itemid;
  int32_t amount;
};
#define ONSALE_ITEM_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&onsale_item_define__descriptor) \
    , 0, 0 }


struct  _OnsaleItemPackageDefine
{
  ProtobufCMessage base;
  size_t n_onsaleship;
  OnsaleItemDefine **onsaleship;
  size_t n_onsaleequip;
  OnsaleItemDefine **onsaleequip;
  size_t n_onsaleitem;
  OnsaleItemDefine **onsaleitem;
  int32_t uniqueid;
  int32_t vticket;
  int32_t type;
};
#define ONSALE_ITEM_PACKAGE_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&onsale_item_package_define__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0, 0, 0 }


struct  _GetOnsaleItemsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t golds;
  int64_t coins;
  int32_t currentpackagesize;
  int32_t maxpackagesize;
  size_t n_goods;
  OnsaleItemPackageDefine **goods;
  OnsaleItemPackageDefine *timelevelgood;
  int64_t remaintime;
};
#define GET_ONSALE_ITEMS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_onsale_items_result__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL, NULL, 0 }


struct  _BuyOnsaleItems
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t uniqueid;
  int32_t type;
};
#define BUY_ONSALE_ITEMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_onsale_items__descriptor) \
    , 0, 0, 0, 0 }


struct  _BuyOnsaleItemsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t golds;
  int64_t coins;
  int32_t price;
};
#define BUY_ONSALE_ITEMS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_onsale_items_result__descriptor) \
    , 0, 0, 0, 0 }


struct  _SendCustomServiceInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  char *info;
  int32_t type;
  char *metadata;
  char *email;
};
#define SEND_CUSTOM_SERVICE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_custom_service_info__descriptor) \
    , 0, 0, NULL, 0, NULL, NULL }


struct  _SendCustomServiceInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define SEND_CUSTOM_SERVICE_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_custom_service_info_result__descriptor) \
    , 0 }


struct  _GetIABItem
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  char *name;
};
#define GET_IABITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_iabitem__descriptor) \
    , 0, 0, NULL }


struct  _GetIABItemResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t addedvtickets;
  int64_t addedcoins;
  int64_t gold;
};
#define GET_IABITEM_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_iabitem_result__descriptor) \
    , 0, 0, 0, 0 }


struct  _ChangeEmail
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  char *newemail;
  int32_t languagecode;
  char *apiurl;
};
#define CHANGE_EMAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&change_email__descriptor) \
    , 0, 0, NULL, 0, NULL }


struct  _ChangeEmailResult
{
  ProtobufCMessage base;
  int32_t failed;
  char *newemail;
  char *oldemail;
};
#define CHANGE_EMAIL_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&change_email_result__descriptor) \
    , 0, NULL, NULL }


struct  _TokenLogin
{
  ProtobufCMessage base;
  char *email;
  char *token;
  /*
   *maybe used as rc4 password
   */
  ProtobufCBinaryData passwd1;
  char *networktype;
  ServerVerion version;
  /*
   *google,apple ,facebook
   */
  int32_t tokentype;
  int32_t languagecode;
  char *apiurl;
  char *deviceinfo;
  char *refcode;
  char *device_hash;
  size_t n_jsonmd5;
  ConfigJsonMd5 **jsonmd5;
  char *notificationid;
  /*
   *android 0,ios 1,pc 2
   */
  int32_t ostype;
};
#define TOKEN_LOGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&token_login__descriptor) \
    , NULL, NULL, {0,NULL}, NULL, SERVER_VERION__VERSION, 0, 0, NULL, NULL, NULL, NULL, 0,NULL, NULL, 0 }


struct  _EngageInFightForTask
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t npcid;
};
#define ENGAGE_IN_FIGHT_FOR_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&engage_in_fight_for_task__descriptor) \
    , 0, 0, 0 }


struct  _EngageInFightForTaskResult
{
  ProtobufCMessage base;
  int32_t failed;
  EngageInFightResult *batteldata;
};
#define ENGAGE_IN_FIGHT_FOR_TASK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&engage_in_fight_for_task_result__descriptor) \
    , 0, NULL }


struct  _AuthenticateAccount
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t languagecode;
  char *apiurl;
  char *newemail;
  /*
   *异地登录验证
   */
  int32_t forsecurity;
};
#define AUTHENTICATE_ACCOUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&authenticate_account__descriptor) \
    , 0, 0, 0, NULL, NULL, 0 }


struct  _AuthenticateAccountResult
{
  ProtobufCMessage base;
  int32_t failed;
  char *newemail;
  char *oldemail;
  int32_t forsecurity;
};
#define AUTHENTICATE_ACCOUNT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&authenticate_account_result__descriptor) \
    , 0, NULL, NULL, 0 }


struct  _Salvage
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t position_x;
  int32_t position_y;
};
#define SALVAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&salvage__descriptor) \
    , 0, 0, 0, 0 }


struct  _SalvageResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t addcoins;
  int32_t addsupply;
  size_t n_item;
  SalvageItem **item;
  int64_t coins;
  int32_t supply;
  int32_t currentpackagesize;
  int32_t packagesize;
};
#define SALVAGE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&salvage_result__descriptor) \
    , 0, 0, 0, 0,NULL, 0, 0, 0, 0 }


struct  _GetEmailVerifiedReward
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_EMAIL_VERIFIED_REWARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_email_verified_reward__descriptor) \
    , 0, 0 }


struct  _GetEmailVerifiedRewardResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t addgolds;
  int64_t golds;
};
#define GET_EMAIL_VERIFIED_REWARD_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_email_verified_reward_result__descriptor) \
    , 0, 0, 0 }


struct  _StartSalvage
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t position_x;
  int32_t position_y;
};
#define START_SALVAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&start_salvage__descriptor) \
    , 0, 0, 0, 0 }


struct  _StartSalvageResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t needcoins;
  int64_t coins;
};
#define START_SALVAGE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&start_salvage_result__descriptor) \
    , 0, 0, 0 }


struct  _GetEmailVerifiedInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_EMAIL_VERIFIED_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_email_verified_info__descriptor) \
    , 0, 0 }


struct  _GetEmailVerifiedInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t addgolds;
  int32_t authenticated;
  int32_t getemailverifiedreward;
};
#define GET_EMAIL_VERIFIED_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_email_verified_info_result__descriptor) \
    , 0, 0, 0, 0 }


struct  _GetSalvageCondition
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t position_x;
  int32_t position_y;
};
#define GET_SALVAGE_CONDITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_salvage_condition__descriptor) \
    , 0, 0, 0, 0 }


struct  _GetSalvageConditionResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t needcoins;
  int32_t radius;
};
#define GET_SALVAGE_CONDITION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_salvage_condition_result__descriptor) \
    , 0, 0, 0 }


struct  _GetActivitiesProps
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_ACTIVITIES_PROPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_activities_props__descriptor) \
    , 0, 0 }


struct  _GetActivitiesPropsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t sailor_coins;
  int64_t treasure;
  int64_t treasure_key;
};
#define GET_ACTIVITIES_PROPS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_activities_props_result__descriptor) \
    , 0, 0, 0, 0 }


struct  _GetActivitiesGiftInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_ACTIVITIES_GIFT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_activities_gift_info__descriptor) \
    , 0, 0 }


struct  _GetActivitiesGiftInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t can_send_gift_count;
  size_t n_can_not_send_cid;
  int32_t *can_not_send_cid;
};
#define GET_ACTIVITIES_GIFT_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_activities_gift_info_result__descriptor) \
    , 0, 0, 0,NULL }


struct  _GetActivitiesPrayInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_ACTIVITIES_PRAY_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_activities_pray_info__descriptor) \
    , 0, 0 }


struct  _GetActivitiesPrayInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t remain_time;
  int32_t last_prey_index;
  int32_t prey_cooling_time;
};
#define GET_ACTIVITIES_PRAY_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_activities_pray_info_result__descriptor) \
    , 0, 0, 0, 0 }


struct  _GetPray
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t idx;
};
#define GET_PRAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_pray__descriptor) \
    , 0, 0, 0 }


struct  _GetPrayResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t add_sailer_coins;
  int64_t sailer_coins;
  SalvageItem *item;
  int64_t coins;
  int64_t add_coins;
  int64_t remain_time;
  int32_t lastpreyindex;
  int32_t praycollingtime;
};
#define GET_PRAY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_pray_result__descriptor) \
    , 0, 0, 0, NULL, 0, 0, 0, 0, 0 }


struct  _SendActivitiesGift
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t recipientscid;
};
#define SEND_ACTIVITIES_GIFT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_activities_gift__descriptor) \
    , 0, 0, 0 }


struct  _SendActivitiesGiftResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t can_send_gift_count;
};
#define SEND_ACTIVITIES_GIFT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_activities_gift_result__descriptor) \
    , 0, 0 }


struct  _GetPirateAttackInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_PIRATE_ATTACK_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_pirate_attack_info__descriptor) \
    , 0, 0 }


struct  _GetPirateAttackInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_exploitsection;
  int32_t *exploitsection;
  int32_t myexploitscore;
  int64_t distoend;
};
#define GET_PIRATE_ATTACK_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_pirate_attack_info_result__descriptor) \
    , 0, 0,NULL, 0, 0 }


struct  _GetAttackPirateInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t eventid;
};
#define GET_ATTACK_PIRATE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_attack_pirate_info__descriptor) \
    , 0, 0, 0 }


struct  _GetAttackPirateInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t attacktimes;
  int32_t canattackpirate;
  int64_t distostart;
  int64_t distoend;
  int32_t hurtvalue;
  int32_t levelenough;
  int32_t bossid;
  int32_t strength;
};
#define GET_ATTACK_PIRATE_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_attack_pirate_info_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetVTicketMarketActivities
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t type;
};
#define GET_VTICKET_MARKET_ACTIVITIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_vticket_market_activities__descriptor) \
    , 0, 0, 0 }


struct  _VTicketMarketActivitiesDefine
{
  ProtobufCMessage base;
  int32_t uniqueid;
  int32_t itemtype;
  int32_t itemid;
  int32_t price;
};
#define VTICKET_MARKET_ACTIVITIES_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vticket_market_activities_define__descriptor) \
    , 0, 0, 0, 0 }


struct  _GetVTicketMarketActivitiesResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t sailorcoins;
  int64_t treasure;
  int64_t treasurekey;
  int32_t type;
  size_t n_items;
  VTicketMarketItemDefine **items;
  size_t n_randomitems;
  VTicketMarketActivitiesDefine **randomitems;
  int64_t activitieslefttime;
};
#define GET_VTICKET_MARKET_ACTIVITIES_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_vticket_market_activities_result__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0 }


struct  _BuyVTicketMarketActivities
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t type;
  int32_t uniqueid;
  int32_t count;
};
#define BUY_VTICKET_MARKET_ACTIVITIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_vticket_market_activities__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _BuyVTicketMarketActivitiesResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t type;
  int64_t sailorcoins;
  int32_t itemid;
  int32_t count;
  /*
   *单价
   */
  int64_t price;
};
#define BUY_VTICKET_MARKET_ACTIVITIES_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_vticket_market_activities_result__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _FinalMyExploitScore
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define FINAL_MY_EXPLOIT_SCORE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&final_my_exploit_score__descriptor) \
    , 0, 0 }


struct  _FinalMyExploitScoreResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t exp;
  int64_t addexp;
  int64_t fame;
  int64_t addfame;
  int64_t sailorcoins;
  int64_t addsailorcoins;
  int32_t cantaken;
};
#define FINAL_MY_EXPLOIT_SCORE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&final_my_exploit_score_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _FindLootPlayer
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t fromrevenge;
};
#define FIND_LOOT_PLAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&find_loot_player__descriptor) \
    , 0, 0, 0 }


struct  _CharacterInfo
{
  ProtobufCMessage base;
  int32_t characterid;
  int32_t level;
  int32_t famelevel;
  int32_t iconidx;
  int32_t nation;
  char *heroname;
  int32_t gender;
  int32_t lootforbid;
};
#define CHARACTER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&character_info__descriptor) \
    , 0, 0, 0, 0, 0, NULL, 0, 0 }


struct  _FindLootPlayerResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cost;
  CharacterInfo *info;
  int32_t fromrevenge;
  int64_t canbelooted;
  EngageInFightResult *battledata;
};
#define FIND_LOOT_PLAYER_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&find_loot_player_result__descriptor) \
    , 0, 0, NULL, 0, 0, NULL }


struct  _LootPlayer
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define LOOT_PLAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&loot_player__descriptor) \
    , 0, 0 }


struct  _LootPlayerResult
{
  ProtobufCMessage base;
  /*
   *optional EngageInFightResult battleData = 2;  
   */
  int32_t failed;
};
#define LOOT_PLAYER_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&loot_player_result__descriptor) \
    , 0 }


struct  _GetLootPlayerLog
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *如果是获取自己打劫别人的log，set to 1
   */
  int32_t attackflag;
  int32_t displayalllog;
};
#define GET_LOOT_PLAYER_LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_loot_player_log__descriptor) \
    , 0, 0, 0, 0 }


struct  _LootLog
{
  ProtobufCMessage base;
  int32_t id;
  /*
   *required int32 looter_cid = 1;
   *required int32 lootee_cid = 2;
   */
  int64_t coins;
  int32_t secondsago;
  CharacterInfo *peerinfo;
  int32_t isattacked;
  /*
   *1 win,2 failed,3 even
   */
  int32_t result;
};
#define LOOT_LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&loot_log__descriptor) \
    , 0, 0, 0, NULL, 0, 0 }


struct  _GetLootPlayerLogResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_log;
  LootLog **log;
};
#define GET_LOOT_PLAYER_LOG_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_loot_player_log_result__descriptor) \
    , 0, 0,NULL }


/*
 *返回 LootPlayerResult
 */
struct  _StartRevengeOnLootPlayer
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t logid;
};
#define START_REVENGE_ON_LOOT_PLAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&start_revenge_on_loot_player__descriptor) \
    , 0, 0, 0 }


struct  _AttackPirateDataInfo
{
  ProtobufCMessage base;
  int32_t nation;
  char *username;
  int32_t hurt;
  int32_t level;
};
#define ATTACK_PIRATE_DATA_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&attack_pirate_data_info__descriptor) \
    , 0, NULL, 0, 0 }


struct  _GetAttackPirateRankInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_ATTACK_PIRATE_RANK_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_attack_pirate_rank_info__descriptor) \
    , 0, 0 }


struct  _GetAttackPirateRankInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_rankinfo;
  AttackPirateDataInfo **rankinfo;
  int32_t levelstart;
  int32_t levelend;
  int32_t headicon;
  int32_t myrank;
  int32_t mydamage;
  int32_t strength;
};
#define GET_ATTACK_PIRATE_RANK_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_attack_pirate_rank_info_result__descriptor) \
    , 0, 0,NULL, 0, 0, 0, 0, 0, 0 }


struct  _GetAttackPirateBossInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t eventid;
};
#define GET_ATTACK_PIRATE_BOSS_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_attack_pirate_boss_info__descriptor) \
    , 0, 0, 0 }


struct  _GetAttackPirateBossInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  char *bossname;
  int32_t bossmaxhp;
  int32_t bosscurrenthp;
  int32_t killercid;
  char *killername;
  int32_t killernation;
  int32_t pirateflags;
  /*
   *0可以攻击 1没有票 2boss没有hp 3时间没到
   */
  int32_t canattack;
  int32_t bossid;
};
#define GET_ATTACK_PIRATE_BOSS_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_attack_pirate_boss_info_result__descriptor) \
    , 0, NULL, 0, 0, 0, NULL, 0, 0, 0, 0 }


struct  _InsuranceItem
{
  ProtobufCMessage base;
  /*
   *赔付比例
   */
  int32_t insurepercent;
  /*
   *一天的保费 = 金额＊factor
   */
  float feefactor;
  /*
   *如果非0，保修需要用金币结算，
   */
  int32_t usevticket;
  /*
   *如果非0，保护离线委托需要的v票 （每万） 
   */
  int32_t protectdelegateprice;
};
#define INSURANCE_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&insurance_item__descriptor) \
    , 0, 0, 0, 0 }


struct  _InsuranceItemStatus
{
  ProtobufCMessage base;
  int32_t percent;
  int64_t lefttimeinseconds;
  int32_t protectdelegate;
  int64_t totalamount;
  int64_t leftamount;
};
#define INSURANCE_ITEM_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&insurance_item_status__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _BuyInsurance
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int64_t count;
  int32_t days;
  /*
   *赔付比例   
   */
  int32_t percent;
  int32_t protectdelegate;
};
#define BUY_INSURANCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_insurance__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _BuyInsuranceResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t costcoin;
  int64_t costvticket;
  int64_t coin;
  int64_t gold;
  int64_t fame;
  int64_t exp;
  int64_t lefttimeinseconds;
  int32_t protectdelegate;
  int32_t percent;
  int64_t count;
};
#define BUY_INSURANCE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_insurance_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _CompleteDialogs
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t dialogid;
};
#define COMPLETE_DIALOGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&complete_dialogs__descriptor) \
    , 0, 0, 0 }


struct  _CompleteDialogsResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_dialogids;
  int32_t *dialogids;
  int64_t exp;
  int64_t coins;
  int32_t golds;
  int64_t fame;
  int64_t rewardcoin;
  int32_t rewardexp;
  int64_t rewardgold;
  int32_t rewardfame;
  int32_t forceid;
  int32_t forceaffect;
  int32_t newlevel;
  size_t n_captains;
  CaptainInfo **captains;
  int32_t new_fame_level;
  int32_t bargirlprestige;
};
#define COMPLETE_DIALOGS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&complete_dialogs_result__descriptor) \
    , 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0 }


struct  _ObtainLottoMessage
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *0 eng 1 simpchn 19 tradchn
   */
  int32_t lang;
};
#define OBTAIN_LOTTO_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obtain_lotto_message__descriptor) \
    , 0, 0, 0 }


struct  _LottoMessage
{
  ProtobufCMessage base;
  /*
   *0 本周 1 下周
   */
  int32_t type;
  char *reward_text;
  char *require_text;
  int32_t time_zone;
};
#define LOTTO_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lotto_message__descriptor) \
    , 0, NULL, NULL, 0 }


struct  _ObtainLottoMessageResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_lottomsg;
  LottoMessage **lottomsg;
};
#define OBTAIN_LOTTO_MESSAGE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obtain_lotto_message_result__descriptor) \
    , 0, 0,NULL }


struct  _GetInviteBonus
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_INVITE_BONUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_invite_bonus__descriptor) \
    , 0, 0 }


struct  _GetInviteBonusResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t bonusnum;
  int64_t exp;
  int64_t coins;
  int64_t golds;
  int64_t fame;
};
#define GET_INVITE_BONUS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_invite_bonus_result__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _CompanyDefine
{
  ProtobufCMessage base;
  int32_t id;
  /*
   *所在的船在舰队中的位置 ， 1-5，0 表示不在船上
   */
  int32_t fleetposition;
  /*
   *船上面仓室的位置，具体定义待定
   */
  int32_t shipposition;
  /*
   *兼容老的captain
   */
  int32_t iscaptain;
  /*
   *captain 原型定义，或者 company 原型定义
   */
  int32_t protoid;
  int32_t exp;
  int32_t salary;
  int32_t hp;
  int32_t attack;
  int32_t defense;
  size_t n_normalskill;
  SkillDefine **normalskill;
  size_t n_specialskill;
  SkillDefine **specialskill;
  ItemIdPair *head;
  ItemIdPair *clothes;
  ItemIdPair *weapon;
  ItemIdPair *access;
  ItemIdPair *shoe;
  int32_t sid;
  int32_t rebirthgolds;
};
#define COMPANY_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&company_define__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, NULL, NULL, NULL, NULL, NULL, 0, 0 }


struct  _GetCompanies
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_COMPANIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_companies__descriptor) \
    , 0, 0 }


struct  _GetCompaniesResult
{
  ProtobufCMessage base;
  int32_t failed;
  /*
   *小伙伴
   */
  size_t n_infleet;
  CompanyDefine **infleet;
  size_t n_idlecaptains;
  CompanyDefine **idlecaptains;
  size_t n_idlecompanies;
  CompanyDefine **idlecompanies;
  size_t n_infleetcaptains;
  CompanyDefine **infleetcaptains;
  int32_t totalsalary;
};
#define GET_COMPANIES_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_companies_result__descriptor) \
    , 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0 }


struct  _EquipCompany
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t headid;
  int32_t clothesid;
  int32_t weaponid;
  int32_t accessid;
  int32_t shoeid;
  /*
   *伙伴id，或者船长 id
   */
  int32_t id;
  /*
   *如果是船长set 1
   */
  int32_t iscaptain;
};
#define EQUIP_COMPANY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equip_company__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _EquipCompanyResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t hp;
  int32_t defense;
  int32_t attack;
};
#define EQUIP_COMPANY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equip_company_result__descriptor) \
    , 0, 0, 0, 0 }


struct  _UnlockCompany
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t companyprotoid;
  /*
   *0 收集碎片解锁，1 ，金钱解锁
   */
  int32_t method;
};
#define UNLOCK_COMPANY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&unlock_company__descriptor) \
    , 0, 0, 0, 0 }


struct  _UnlockCompanyResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t method;
  int32_t companyprotoid;
  int32_t req_item1_price;
  int32_t req_item2_price;
  int32_t req_item3_price;
  int32_t bought_item1_num;
  int32_t bought_item2_num;
  int32_t bought_item3_num;
  int32_t totalcost;
  int64_t coins;
  int64_t golds;
};
#define UNLOCK_COMPANY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&unlock_company_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetCompanionsStatus
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_COMPANIONS_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_companions_status__descriptor) \
    , 0, 0 }


struct  _CompanionsStatus
{
  ProtobufCMessage base;
  CompanyDefine *define;
  int32_t req_item1_iid;
  int32_t req_item2_iid;
  int32_t req_item3_iid;
  int32_t req_item1_num;
  int32_t req_item2_num;
  int32_t req_item3_num;
  int32_t req_item1_price;
  int32_t req_item2_price;
  int32_t req_item3_price;
  /*
   *0,have pieces,1, owned,2 in task
   */
  int32_t status;
  int32_t currenttaskstep;
  /*
   *required int64 unlockCost = 8;//解锁需要多少v票
   */
  int32_t totaltasksteps;
};
#define COMPANIONS_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&companions_status__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetCompanionsStatusResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_companions;
  CompanionsStatus **companions;
};
#define GET_COMPANIONS_STATUS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_companions_status_result__descriptor) \
    , 0, 0,NULL }


struct  _UnlockShipCabin
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t shipid;
  int32_t sid;
  int32_t cabinno;
};
#define UNLOCK_SHIP_CABIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&unlock_ship_cabin__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _UnlockShipCabinResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t shipid;
  int32_t cabinno;
  int64_t coins;
  int64_t golds;
};
#define UNLOCK_SHIP_CABIN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&unlock_ship_cabin_result__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _GetShipCompanions
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_SHIP_COMPANIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_ship_companions__descriptor) \
    , 0, 0 }


struct  _ShipGearDetail
{
  ProtobufCMessage base;
  int32_t companionsid;
  int32_t iscaptain;
  /*
   *解锁的仓位编号
   */
  int32_t shipposition;
  int32_t proto_id;
  size_t n_normalskill;
  SkillDefine **normalskill;
  size_t n_specialskill;
  SkillDefine **specialskill;
  int32_t room_type;
};
#define SHIP_GEAR_DETAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ship_gear_detail__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0,NULL, 0 }


struct  _GetShipCompanionsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t shipid;
  /*
   *已经解锁的仓位
   */
  size_t n_details;
  ShipGearDetail **details;
  int64_t coins;
  int64_t golds;
};
#define GET_SHIP_COMPANIONS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_ship_companions_result__descriptor) \
    , 0, 0, 0,NULL, 0, 0 }


struct  _SetShipCompanions
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *unequip 0
   */
  int32_t companionsid;
  int32_t cabinno;
  int32_t iscaptain;
  int32_t shipid;
};
#define SET_SHIP_COMPANIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_ship_companions__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _SetShipCompanionsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t companionsid;
  int32_t cabinno;
  int32_t iscaptain;
  int32_t shipid;
};
#define SET_SHIP_COMPANIONS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_ship_companions_result__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _SaveFailedFight
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define SAVE_FAILED_FIGHT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&save_failed_fight__descriptor) \
    , 0, 0 }


struct  _SaveFailedFightResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define SAVE_FAILED_FIGHT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&save_failed_fight_result__descriptor) \
    , 0 }


struct  _EndFailedFightByVTicket
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t usevticket;
  int32_t fighttype;
};
#define END_FAILED_FIGHT_BY_VTICKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_failed_fight_by_vticket__descriptor) \
    , 0, 0, 0, 0 }


struct  _EndFailedFightByVTicketResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t last_safe_city;
  int64_t lostcoin;
  int32_t usevticket;
  size_t n_user_positive_skills;
  SkillDefine **user_positive_skills;
};
#define END_FAILED_FIGHT_BY_VTICKET_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_failed_fight_by_vticket_result__descriptor) \
    , 0, 0, 0, 0, 0,NULL }


struct  _CompleteCompanionTask
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *if partId = 0, complete task immediately
   */
  int32_t partid;
  /*
   *可能有多个小伙伴任务并行
   */
  int32_t taskid;
  /*
   *失败分支，可能要跳转part
   */
  int32_t missionfailed;
};
#define COMPLETE_COMPANION_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&complete_companion_task__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _CompleteCompanionTaskResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t currenttaskid;
  /*
   * 0 if all parts are completed
   */
  int32_t currentpartid;
  int32_t shouldreachcity;
  int32_t missionfailed;
};
#define COMPLETE_COMPANION_TASK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&complete_companion_task_result__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _DeductCoins
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t decuctcoins;
};
#define DEDUCT_COINS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&deduct_coins__descriptor) \
    , 0, 0, 0 }


struct  _DeductCoinsResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t deductcoins;
  int64_t coins;
};
#define DEDUCT_COINS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&deduct_coins_result__descriptor) \
    , 0, 0, 0 }


struct  _UpdateUserSelection
{
  ProtobufCMessage base;
  int32_t dataversion;
  size_t n_choices;
  int32_t *choices;
};
#define UPDATE_USER_SELECTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_user_selection__descriptor) \
    , 0, 0,NULL }


struct  _UpdateDataVersion
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  size_t n_update;
  UpdateUserSelection **update;
};
#define UPDATE_DATA_VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_data_version__descriptor) \
    , 0, 0, 0,NULL }


struct  _UpdateDataVersionResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define UPDATE_DATA_VERSION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_data_version_result__descriptor) \
    , 0 }


struct  _CalFastHireCrew
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define CAL_FAST_HIRE_CREW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cal_fast_hire_crew__descriptor) \
    , 0, 0 }


struct  _CalFastHireCrewResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t availmaxcrewnum;
  int64_t fasthireneedcoins;
  int32_t needcrewnum;
  int64_t fame;
  int32_t hirecrewfee;
  int32_t hirecrewnumonce;
  int32_t crewprice;
  int32_t owncrewnum;
};
#define CAL_FAST_HIRE_CREW_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cal_fast_hire_crew_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _CompanionRebirth
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t companionid;
  int32_t iscaptain;
};
#define COMPANION_REBIRTH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&companion_rebirth__descriptor) \
    , 0, 0, 0, 0 }


struct  _CompanionRebirthResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t golds;
  /*
   *  required CompanyDefine companionRebirth = 3;
   */
  int64_t usegolds;
};
#define COMPANION_REBIRTH_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&companion_rebirth_result__descriptor) \
    , 0, 0, 0 }


struct  _RepairEquipment
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t equipid;
  /*
   *1道具2v票
   */
  int32_t usetype;
};
#define REPAIR_EQUIPMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&repair_equipment__descriptor) \
    , 0, 0, 0, 0 }


struct  _RepairEquipmentResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t golds;
  int64_t useglods;
};
#define REPAIR_EQUIPMENT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&repair_equipment_result__descriptor) \
    , 0, 0, 0 }


struct  _GetRepairEquipmentNeed
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t equipid;
};
#define GET_REPAIR_EQUIPMENT_NEED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_repair_equipment_need__descriptor) \
    , 0, 0, 0 }


struct  _GetRepairEquipmentNeedResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t itemiid;
  int32_t itemneedcount;
  int32_t itemcurrentcount;
  int64_t goldneed;
  int32_t equipid;
};
#define GET_REPAIR_EQUIPMENT_NEED_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_repair_equipment_need_result__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _RecentOrderDefine
{
  ProtobufCMessage base;
  int32_t itemtype;
  int32_t itemid;
  int64_t price;
  int64_t number;
  int64_t exptime;
  char *orderid;
  int32_t cityid;
  int64_t uniqueid;
  int32_t cid;
  char *orderplayername;
};
#define RECENT_ORDER_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&recent_order_define__descriptor) \
    , 0, 0, 0, 0, 0, NULL, 0, 0, 0, NULL }


struct  _GetRecentOrder
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t type;
};
#define GET_RECENT_ORDER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_recent_order__descriptor) \
    , 0, 0, 0 }


struct  _GetRecentOrderResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t type;
  size_t n_orders;
  RecentOrderDefine **orders;
};
#define GET_RECENT_ORDER_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_recent_order_result__descriptor) \
    , 0, 0, 0,NULL }


struct  _GetDropIncreaseRateInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_DROP_INCREASE_RATE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_drop_increase_rate_info__descriptor) \
    , 0, 0 }


struct  _GetDropIncreaseRateInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t service_type;
  int64_t remain_time;
};
#define GET_DROP_INCREASE_RATE_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_drop_increase_rate_info_result__descriptor) \
    , 0, 0, 0 }


struct  _GetDailyActivitiesReward
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *1打劫2任务
   */
  int32_t reward_type;
};
#define GET_DAILY_ACTIVITIES_REWARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_daily_activities_reward__descriptor) \
    , 0, 0, 0 }


struct  _GetDailyActivitiesRewardResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t reward_golds;
  int64_t golds;
};
#define GET_DAILY_ACTIVITIES_REWARD_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_daily_activities_reward_result__descriptor) \
    , 0, 0, 0 }


/*
 *熟练度相关
 */
struct  _AddProficiency
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t proficiencyid;
  int32_t count;
};
#define ADD_PROFICIENCY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_proficiency__descriptor) \
    , 0, 0, 0, 0 }


struct  _AddProficiencyResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t value;
};
#define ADD_PROFICIENCY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_proficiency_result__descriptor) \
    , 0, 0 }


struct  _GetProficiencyValues
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_PROFICIENCY_VALUES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_proficiency_values__descriptor) \
    , 0, 0 }


struct  _ProficiencyDefine
{
  ProtobufCMessage base;
  int32_t proficiencyid;
  int32_t value;
};
#define PROFICIENCY_DEFINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proficiency_define__descriptor) \
    , 0, 0 }


struct  _GetProficiencyValuesResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_values;
  ProficiencyDefine **values;
};
#define GET_PROFICIENCY_VALUES_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_proficiency_values_result__descriptor) \
    , 0, 0,NULL }


struct  _GetProficiencyBook
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t proficiencyid;
};
#define GET_PROFICIENCY_BOOK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_proficiency_book__descriptor) \
    , 0, 0, 0 }


struct  _GetProficiencyBookResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t itemid;
  int32_t proficiencyid;
  int32_t uniqueid;
  int32_t count;
};
#define GET_PROFICIENCY_BOOK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_proficiency_book_result__descriptor) \
    , 0, 0, 0, 0, 0 }


/*
 *国战相关
 *战争中维修或者快速维修
 */
struct  _RepairCityDefenseInWar
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *0 coin 1,v ticket
   */
  int32_t type;
  int64_t consume;
};
#define REPAIR_CITY_DEFENSE_IN_WAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&repair_city_defense_in_war__descriptor) \
    , 0, 0, 0, 0 }


struct  _RepairCityDefenseInWarResult
{
  ProtobufCMessage base;
  int32_t failed;
  /*
   *慢速维修的时候，这个字段没有使用
   */
  int64_t defense;
  int32_t cityid;
  int32_t type;
  int64_t coins;
  int64_t golds;
  int32_t consume;
  int64_t max_defense;
  int64_t remain_time;
  int64_t obtain_score;
};
#define REPAIR_CITY_DEFENSE_IN_WAR_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&repair_city_defense_in_war_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 *增强攻击模式
 */
struct  _EnhanceAttack
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int64_t consume_coins;
  int32_t city;
};
#define ENHANCE_ATTACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&enhance_attack__descriptor) \
    , 0, 0, 0, 0 }


struct  _EnhanceAttackResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t consume_coins;
  int64_t coins;
  int64_t power_attack_pool;
  /*
   *0 不能使用 1 可以使用 2 正在冷却
   */
  int64_t status;
  /*
   *距离结束时间，小于300是在冷却，300-600可以使用
   */
  int64_t dis_to_end;
  int64_t attack;
  int64_t extra_attack_in_war;
  int64_t obtain_score;
};
#define ENHANCE_ATTACK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&enhance_attack_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetCityPrepareStatus
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_CITY_PREPARE_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_city_prepare_status__descriptor) \
    , 0, 0 }


struct  _NationWarPair
{
  ProtobufCMessage base;
  /*
   *nation_war中id
   */
  int32_t id;
  int32_t nation1;
  int32_t nation2;
  int64_t start_time;
  /*
   *0 prepare 1 in war
   */
  int32_t time_sign;
  int64_t dis_to_end;
};
#define NATION_WAR_PAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nation_war_pair__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _GetCityPrepareStatusResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_fight_nations;
  NationWarPair **fight_nations;
  NationWarPair *last_fight_info;
  int32_t remain_lanch_count;
  int32_t is_city_mayor;
  int64_t prepare_time;
  int64_t in_war_time;
  int64_t golds;
  int64_t coins;
  /*
   *0没有战争1战争准备阶段2战争进行阶段
   */
  int32_t is_in_war;
  int64_t one_mercenary_cost;
  int64_t mercenary_pool;
  int32_t depot_pool;
  int32_t max_depot;
  int64_t attack;
  int64_t max_attack;
  int32_t attack_star;
  int64_t current_hp;
  int64_t max_hp;
  int32_t hp_star;
  /*
   *战斗状态下power_attack值，2000万可以使用
   */
  int64_t power_attack_pool;
  /*
   *2000万
   */
  int64_t max_power_attack;
  /*
   *战斗状态hp_pool
   */
  int64_t hp_pool_in_war;
  /*
   *战斗状态距离下一次刷新hp的时间
   */
  int64_t dis_to_refresh_hp_pool;
  /*
   *0 不能使用 1 可以使用 2 正在冷却
   */
  int32_t power_attack_status;
  int64_t dis_to_power_attack_end;
  int64_t extra_attack_in_war;
  int64_t max_mercenary;
  /*
   *准备阶段使用
   */
  int64_t current_attack_pool;
  /*
   *准备阶段当前星级最大值
   */
  int64_t max_attack_pool;
  /*
   *准备阶段使用
   */
  int64_t current_hp_pool;
  /*
   *准备阶段当前星级最大值
   */
  int64_t max_hp_pool;
  /*
   *最终能加到最大的攻击力
   */
  int64_t final_max_attack;
  /*
   *最终能加到最大的hp
   */
  int64_t final_max_hp;
  /*
   *慢速维修能够增加的hp hp_pool_in_war/10
   */
  int64_t can_add_hp_in_war;
  int64_t dis_to_apply_war;
};
#define GET_CITY_PREPARE_STATUS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_city_prepare_status_result__descriptor) \
    , 0, 0,NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _StartAttackCity
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *被攻打城市的id
   */
  int32_t city_id;
};
#define START_ATTACK_CITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&start_attack_city__descriptor) \
    , 0, 0, 0 }


struct  _CityStatus
{
  ProtobufCMessage base;
  int32_t hp;
  int32_t max_hp;
  int32_t power_attack;
  /*
   *回合开始时的hp，用于计算恢复量
   */
  int32_t start_hp;
};
#define CITY_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&city_status__descriptor) \
    , 0, 0, 0, 0 }


struct  _StartAttackCityResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t mynation;
  int32_t enemynation;
  int32_t left_time;
  CityStatus *city_status;
  NationWarCharacterStatus *status;
  /*
   *雇佣军数量
   */
  protobuf_c_boolean has_left_npc_num;
  int32_t left_npc_num;
};
#define START_ATTACK_CITY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&start_attack_city_result__descriptor) \
    , 0, 0, 0, 0, NULL, NULL, 0,0 }


struct  _GetEnemyNation
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_ENEMY_NATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_enemy_nation__descriptor) \
    , 0, 0 }


struct  _EnemyNation
{
  ProtobufCMessage base;
  int32_t nations_id;
  int64_t can_robbed_coins;
};
#define ENEMY_NATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&enemy_nation__descriptor) \
    , 0, 0 }


struct  _GetEnemyNationResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_nations;
  EnemyNation **nations;
};
#define GET_ENEMY_NATION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_enemy_nation_result__descriptor) \
    , 0, 0,NULL }


struct  _AddCityRepairPool
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int64_t consume_coins;
};
#define ADD_CITY_REPAIR_POOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_city_repair_pool__descriptor) \
    , 0, 0, 0 }


struct  _AddCityRepairPoolResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t cityid;
  int64_t defense;
  int64_t consume_coins;
  int64_t coins;
  int32_t defense_star;
  /*
   *当前阶段的最大hp
   */
  int64_t max_defense;
  /*
   *准备阶段使用
   */
  int64_t current_hp_pool;
  /*
   *准备阶段当前星级最大值
   */
  int64_t max_hp_pool;
  /*
   *最终能加到最大的hp
   */
  int64_t final_max_hp;
  int64_t obtain_score;
};
#define ADD_CITY_REPAIR_POOL_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_city_repair_pool_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _AddCityAttackPool
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int64_t consume_coins;
};
#define ADD_CITY_ATTACK_POOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_city_attack_pool__descriptor) \
    , 0, 0, 0 }


struct  _AddCityAttackPoolResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t attack;
  int32_t cityid;
  int64_t consume_coins;
  int64_t coins;
  int32_t attack_star;
  /*
   *当前阶段最大攻击力
   */
  int64_t max_attack;
  /*
   *准备阶段使用
   */
  int64_t current_attack_pool;
  /*
   *准备阶段当前星级最大值
   */
  int64_t max_attack_pool;
  /*
   *最终能加到最大的攻击力
   */
  int64_t final_max_attack;
  int64_t obtain_score;
};
#define ADD_CITY_ATTACK_POOL_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_city_attack_pool_result__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GetPackageInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_PACKAGE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_package_info__descriptor) \
    , 0, 0 }


struct  _GetPackageInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t currentpackagesize;
  int32_t maxpackagesize;
};
#define GET_PACKAGE_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_package_info_result__descriptor) \
    , 0, 0, 0 }


struct  _ApplyStateWar
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t nation;
};
#define APPLY_STATE_WAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&apply_state_war__descriptor) \
    , 0, 0, 0 }


struct  _ApplyStateWarResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t my_nation_id;
  int32_t enemy_nation_id;
};
#define APPLY_STATE_WAR_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&apply_state_war_result__descriptor) \
    , 0, 0, 0 }


struct  _ContributionRankInfo
{
  ProtobufCMessage base;
  int32_t nation;
  int32_t score;
  char *name;
  int32_t level;
  int32_t cid;
};
#define CONTRIBUTION_RANK_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contribution_rank_info__descriptor) \
    , 0, 0, NULL, 0, 0 }


struct  _GetContributionRank
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_CONTRIBUTION_RANK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_contribution_rank__descriptor) \
    , 0, 0 }


struct  _GetContributionRankResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_rank_info;
  ContributionRankInfo **rank_info;
  ContributionRankInfo *my_rank_info;
  int32_t my_rank;
  int32_t my_icon;
};
#define GET_CONTRIBUTION_RANK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_contribution_rank_result__descriptor) \
    , 0, 0,NULL, NULL, 0, 0 }


struct  _AddSupplyStation
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t nation;
  int64_t consume_golds;
};
#define ADD_SUPPLY_STATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_supply_station__descriptor) \
    , 0, 0, 0, 0 }


struct  _AddSupplyStationResult
{
  ProtobufCMessage base;
  int32_t failed;
  /*
   *花费的v票
   */
  int64_t consume_golds;
  /*
   *当前的v票
   */
  int64_t golds;
  int64_t obtain_score;
};
#define ADD_SUPPLY_STATION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_supply_station_result__descriptor) \
    , 0, 0, 0, 0 }


/*
 *雇佣军
 */
struct  _HireArmy
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int64_t consume_coins;
  int32_t nation;
};
#define HIRE_ARMY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hire_army__descriptor) \
    , 0, 0, 0, 0 }


struct  _HireArmyResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t consume_coins;
  /*
   *当前银币
   */
  int64_t coins;
  int64_t max_hire_army;
  int64_t current_hire_army;
  int64_t obtain_score;
};
#define HIRE_ARMY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hire_army_result__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _GetNationWarEntrance
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t city;
};
#define GET_NATION_WAR_ENTRANCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_nation_war_entrance__descriptor) \
    , 0, 0, 0 }


struct  _GetNationWarEntranceResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_fight_nations;
  NationWarPair **fight_nations;
  int64_t max_hp;
  int64_t current_hp;
  int64_t attack;
  /*
   *是否能够补给
   */
  int32_t can_depot;
  int64_t extra_attack;
};
#define GET_NATION_WAR_ENTRANCE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_nation_war_entrance_result__descriptor) \
    , 0, 0,NULL, 0, 0, 0, 0, 0 }


struct  _EndAttackCity
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  int32_t city_id;
};
#define END_ATTACK_CITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_attack_city__descriptor) \
    , 0, 0, 0 }


struct  _EndAttackCityResult
{
  ProtobufCMessage base;
  int32_t failed;
  /*
   *0表示正常脱离，1表示国战时间结束，2表示城市沦陷，3表示时间未到强行脱离
   */
  int32_t reason;
};
#define END_ATTACK_CITY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_attack_city_result__descriptor) \
    , 0, 0 }


struct  _EnterDepotRepair
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *0 修船 1 补充水手 2 补充apply
   */
  int32_t type;
};
#define ENTER_DEPOT_REPAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&enter_depot_repair__descriptor) \
    , 0, 0, 0 }


struct  _EnterDepotRepairResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define ENTER_DEPOT_REPAIR_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&enter_depot_repair_result__descriptor) \
    , 0 }


struct  _GetNationWarCityLost
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_NATION_WAR_CITY_LOST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_nation_war_city_lost__descriptor) \
    , 0, 0 }


struct  _CityLost
{
  ProtobufCMessage base;
  int32_t city_id;
  int32_t nation_id;
  int64_t robbed_coins;
};
#define CITY_LOST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&city_lost__descriptor) \
    , 0, 0, 0 }


struct  _GetNationWarCityLostResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_my_city_lost;
  CityLost **my_city_lost;
  size_t n_enemy_city_loss;
  CityLost **enemy_city_loss;
  int64_t rob_coins;
  int64_t rob_golds;
  int64_t rob_prestige;
  int64_t rob_sailor_coins;
  int64_t my_score;
};
#define GET_NATION_WAR_CITY_LOST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_nation_war_city_lost_result__descriptor) \
    , 0, 0,NULL, 0,NULL, 0, 0, 0, 0, 0 }


struct  _NationWarCharacterShip
{
  ProtobufCMessage base;
  int32_t ship_id;
  int32_t hp;
  int32_t max_hp;
  int64_t city_hurt;
  int64_t ship_hurt;
  int32_t position;
};
#define NATION_WAR_CHARACTER_SHIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nation_war_character_ship__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _NationWarCharacterStatus
{
  ProtobufCMessage base;
  /*
   *玩家id,如果是负数则是npc
   */
  int32_t cid;
  /*
   *舰队中的船只
   */
  size_t n_ships;
  NationWarCharacterShip **ships;
  /*
   *玩家遭受的伤害总数
   */
  int32_t get_hurt;
  /*
   *玩家国籍
   */
  int32_t nation;
  /*
   *玩家名字 ，如果是npc，转换成id读取json的名字
   */
  char *heroname;
};
#define NATION_WAR_CHARACTER_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nation_war_character_status__descriptor) \
    , 0, 0,NULL, 0, 0, NULL }


struct  _NationWarBattleTurnResult
{
  ProtobufCMessage base;
  /*
   *2表示因为国战时间结束，被移出队列,3表示当前玩家死亡
   */
  int32_t failed;
  size_t n_status;
  NationWarCharacterStatus **status;
  CityStatus *city_status;
};
#define NATION_WAR_BATTLE_TURN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nation_war_battle_turn_result__descriptor) \
    , 0, 0,NULL, NULL }


struct  _ReachDepot
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define REACH_DEPOT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reach_depot__descriptor) \
    , 0, 0 }


struct  _ReachDepotResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define REACH_DEPOT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reach_depot_result__descriptor) \
    , 0 }


struct  _ReduceInNationWar
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define REDUCE_IN_NATION_WAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reduce_in_nation_war__descriptor) \
    , 0, 0 }


struct  _ReduceInfo
{
  ProtobufCMessage base;
  int64_t reduce_coins;
  int64_t reduce_fames;
  int64_t reduce_golds;
  int64_t reduce_sailor_coins;
  char *reason;
};
#define REDUCE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reduce_info__descriptor) \
    , 0, 0, 0, 0, NULL }


struct  _ReduceInNationWarResult
{
  ProtobufCMessage base;
  int32_t failed;
  int64_t coins;
  int64_t fames;
  int64_t golds;
  int64_t sailor_coins;
  size_t n_info;
  ReduceInfo **info;
};
#define REDUCE_IN_NATION_WAR_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reduce_in_nation_war_result__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL }


/*
 *获取当前本国的国战状态
 */
struct  _GetMyNationWar
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define GET_MY_NATION_WAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_my_nation_war__descriptor) \
    , 0, 0 }


struct  _GetMyNationWarResult
{
  ProtobufCMessage base;
  /*
   */
  int32_t failed;
  /*
   */
  int32_t nation1;
  int32_t nation2;
  /*
   *离阶段结束的时间，为0则没有
   */
  int32_t time_left;
  /*
   *0表示没有国战，1表示在准备阶段，2表示战争阶段
   */
  int32_t war_status;
};
#define GET_MY_NATION_WAR_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_my_nation_war_result__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _FuncForTest
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define FUNC_FOR_TEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&func_for_test__descriptor) \
    , 0, 0 }


struct  _FuncForTestResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define FUNC_FOR_TEST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&func_for_test_result__descriptor) \
    , 0 }


struct  _CheckDeleteCharactersNum
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define CHECK_DELETE_CHARACTERS_NUM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&check_delete_characters_num__descriptor) \
    , 0, 0 }


struct  _CheckDeleteCharactersNumResult
{
  ProtobufCMessage base;
  int32_t failed;
  int32_t remainnum;
};
#define CHECK_DELETE_CHARACTERS_NUM_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&check_delete_characters_num_result__descriptor) \
    , 0, 0 }


struct  _GetPlayerEquipShipInfo
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   */
  int32_t shipid;
};
#define GET_PLAYER_EQUIP_SHIP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_player_equip_ship_info__descriptor) \
    , 0, 0, 0 }


struct  _GetPlayerEquipShipInfoResult
{
  ProtobufCMessage base;
  int32_t failed;
  /*
   *船只sid
   */
  int32_t sid;
  /*
   *船首相
   */
  int32_t bowiconid;
  /*
   *撞角
   */
  int32_t bowgunid;
  /*
   */
  int32_t aftgunid;
  /*
   *船帆
   */
  char *spinnakerids;
  /*
   *装甲
   */
  char *armorids;
  /*
   *火炮
   */
  char *cannonids;
  /*
   *强化槽物品id
   */
  size_t n_optionitems;
  int32_t *optionitems;
  /*
   *攻击
   */
  int32_t attack;
  /*
   *防御
   */
  int32_t defense;
  /*
   *耐久
   */
  int32_t durable;
  /*
   *速度
   */
  int32_t speed;
  /*
   *转相速度
   */
  int32_t steering;
  /*
   *水手数量
   */
  int32_t crew_num;
  /*
   *货舱大小
   */
  int32_t cargo_size;
  /*
   *船只名字
   */
  char *ship_name;
  /*
   *最大那耐久
   */
  int32_t max_durable;
  /*
   *最大补给
   */
  int32_t max_supply;
  /*
   *装备信息
   */
  size_t n_equipdetails;
  EquipDetailInfo **equipdetails;
};
#define GET_PLAYER_EQUIP_SHIP_INFO_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_player_equip_ship_info_result__descriptor) \
    , 0, 0, 0, 0, 0, NULL, NULL, NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0,NULL }


struct  _GetPlayerShipList
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *玩家id
   */
  int32_t character_id;
};
#define GET_PLAYER_SHIP_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_player_ship_list__descriptor) \
    , 0, 0, 0 }


struct  _PlayerShipSimpleInfo
{
  ProtobufCMessage base;
  /*
   *船只的唯一id
   */
  int32_t ship_id;
  /*
   *船型id
   */
  int32_t sid;
  /*
   *强化槽数量
   */
  int32_t enhance_slots;
  /*
   *使用了的强化槽数量
   */
  int32_t used_enhance_slots;
};
#define PLAYER_SHIP_SIMPLE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&player_ship_simple_info__descriptor) \
    , 0, 0, 0, 0 }


struct  _GetPlayerShipListResult
{
  ProtobufCMessage base;
  int32_t failed;
  /*
   *玩家船只简要信息
   */
  size_t n_infos;
  PlayerShipSimpleInfo **infos;
};
#define GET_PLAYER_SHIP_LIST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_player_ship_list_result__descriptor) \
    , 0, 0,NULL }


struct  _FireCrew
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *需要解雇的水手数量
   */
  int32_t fire_crew_num;
};
#define FIRE_CREW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fire_crew__descriptor) \
    , 0, 0, 0 }


struct  _FireCrewResult
{
  ProtobufCMessage base;
  int32_t failed;
  /*
   *剩下的水手数量
   */
  int32_t crew_num;
};
#define FIRE_CREW_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fire_crew_result__descriptor) \
    , 0, 0 }


/*
 *获取势力的港口信息
 */
struct  _GetForceCity
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *势力id
   */
  int32_t force_id;
};
#define GET_FORCE_CITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_force_city__descriptor) \
    , 0, 0, 0 }


struct  _GetForceCityResult
{
  ProtobufCMessage base;
  int32_t failed;
  size_t n_cities;
  CityDefine **cities;
  /*
   *普通城市给首都制造加成系数，百分数
   */
  protobuf_c_boolean has_bonus_rate;
  int32_t bonus_rate;
};
#define GET_FORCE_CITY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_force_city_result__descriptor) \
    , 0, 0,NULL, 0,0 }


/*
 *保存物品到warehouse
 */
struct  _SaveItemsToWarehouse
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
  /*
   *物品类型
   */
  int32_t item_type;
  /*
   *物品id
   */
  int32_t item_id;
  /*
   *物品数量
   */
  int32_t item_amount;
};
#define SAVE_ITEMS_TO_WAREHOUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&save_items_to_warehouse__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _SaveItemsToWarehouseResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define SAVE_ITEMS_TO_WAREHOUSE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&save_items_to_warehouse_result__descriptor) \
    , 0 }


/*
 *扩展warehouse免费格数
 */
struct  _ExpandWarehouse
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define EXPAND_WAREHOUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&expand_warehouse__descriptor) \
    , 0, 0 }


struct  _ExpandWarehouseResult
{
  ProtobufCMessage base;
  int32_t failed;
  /*
   *扩容后的容量
   */
  int32_t capacity;
};
#define EXPAND_WAREHOUSE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&expand_warehouse_result__descriptor) \
    , 0, 0 }


/*
 *获取版本升级信息
 */
struct  _GetChangeLog
{
  ProtobufCMessage base;
  /*
   *区分安卓和ios，安卓为1，ios为2. 	
   */
  int32_t os_type;
  /*
   *特定版本号
   */
  protobuf_c_boolean has_version;
  int32_t version;
  /*
   *语言id，和cocos客户端保持一致
   */
  protobuf_c_boolean has_lang;
  int32_t lang;
};
#define GET_CHANGE_LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_change_log__descriptor) \
    , 0, 0,0, 0,0 }


struct  _GetChangeLogResult
{
  ProtobufCMessage base;
  int32_t failed;
  /*
   *json格式，需要进一步解析。
   */
  char *changelog_str;
};
#define GET_CHANGE_LOG_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_change_log_result__descriptor) \
    , 0, NULL }


/*
 *副线任务
 */
struct  _CompleteSecondaryTask
{
  ProtobufCMessage base;
  int32_t userid;
  int32_t sessionid;
};
#define COMPLETE_SECONDARY_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&complete_secondary_task__descriptor) \
    , 0, 0 }


struct  _CompleteSecondaryTaskResult
{
  ProtobufCMessage base;
  int32_t failed;
};
#define COMPLETE_SECONDARY_TASK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&complete_secondary_task_result__descriptor) \
    , 0 }


/* ConfigJsonMd5 methods */
void   config_json_md5__init
                     (ConfigJsonMd5         *message);
size_t config_json_md5__get_packed_size
                     (const ConfigJsonMd5   *message);
size_t config_json_md5__pack
                     (const ConfigJsonMd5   *message,
                      uint8_t             *out);
size_t config_json_md5__pack_to_buffer
                     (const ConfigJsonMd5   *message,
                      ProtobufCBuffer     *buffer);
ConfigJsonMd5 *
       config_json_md5__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config_json_md5__free_unpacked
                     (ConfigJsonMd5 *message,
                      ProtobufCAllocator *allocator);
/* ConfigJsonResult methods */
void   config_json_result__init
                     (ConfigJsonResult         *message);
size_t config_json_result__get_packed_size
                     (const ConfigJsonResult   *message);
size_t config_json_result__pack
                     (const ConfigJsonResult   *message,
                      uint8_t             *out);
size_t config_json_result__pack_to_buffer
                     (const ConfigJsonResult   *message,
                      ProtobufCBuffer     *buffer);
ConfigJsonResult *
       config_json_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config_json_result__free_unpacked
                     (ConfigJsonResult *message,
                      ProtobufCAllocator *allocator);
/* EmailLogin methods */
void   email_login__init
                     (EmailLogin         *message);
size_t email_login__get_packed_size
                     (const EmailLogin   *message);
size_t email_login__pack
                     (const EmailLogin   *message,
                      uint8_t             *out);
size_t email_login__pack_to_buffer
                     (const EmailLogin   *message,
                      ProtobufCBuffer     *buffer);
EmailLogin *
       email_login__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   email_login__free_unpacked
                     (EmailLogin *message,
                      ProtobufCAllocator *allocator);
/* Activity methods */
void   activity__init
                     (Activity         *message);
size_t activity__get_packed_size
                     (const Activity   *message);
size_t activity__pack
                     (const Activity   *message,
                      uint8_t             *out);
size_t activity__pack_to_buffer
                     (const Activity   *message,
                      ProtobufCBuffer     *buffer);
Activity *
       activity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   activity__free_unpacked
                     (Activity *message,
                      ProtobufCAllocator *allocator);
/* Task methods */
void   task__init
                     (Task         *message);
size_t task__get_packed_size
                     (const Task   *message);
size_t task__pack
                     (const Task   *message,
                      uint8_t             *out);
size_t task__pack_to_buffer
                     (const Task   *message,
                      ProtobufCBuffer     *buffer);
Task *
       task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task__free_unpacked
                     (Task *message,
                      ProtobufCAllocator *allocator);
/* SysMessage methods */
void   sys_message__init
                     (SysMessage         *message);
size_t sys_message__get_packed_size
                     (const SysMessage   *message);
size_t sys_message__pack
                     (const SysMessage   *message,
                      uint8_t             *out);
size_t sys_message__pack_to_buffer
                     (const SysMessage   *message,
                      ProtobufCBuffer     *buffer);
SysMessage *
       sys_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sys_message__free_unpacked
                     (SysMessage *message,
                      ProtobufCAllocator *allocator);
/* City methods */
void   city__init
                     (City         *message);
size_t city__get_packed_size
                     (const City   *message);
size_t city__pack
                     (const City   *message,
                      uint8_t             *out);
size_t city__pack_to_buffer
                     (const City   *message,
                      ProtobufCBuffer     *buffer);
City *
       city__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   city__free_unpacked
                     (City *message,
                      ProtobufCAllocator *allocator);
/* SeaEventDefine methods */
void   sea_event_define__init
                     (SeaEventDefine         *message);
size_t sea_event_define__get_packed_size
                     (const SeaEventDefine   *message);
size_t sea_event_define__pack
                     (const SeaEventDefine   *message,
                      uint8_t             *out);
size_t sea_event_define__pack_to_buffer
                     (const SeaEventDefine   *message,
                      ProtobufCBuffer     *buffer);
SeaEventDefine *
       sea_event_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sea_event_define__free_unpacked
                     (SeaEventDefine *message,
                      ProtobufCAllocator *allocator);
/* SeaBlockInfo methods */
void   sea_block_info__init
                     (SeaBlockInfo         *message);
size_t sea_block_info__get_packed_size
                     (const SeaBlockInfo   *message);
size_t sea_block_info__pack
                     (const SeaBlockInfo   *message,
                      uint8_t             *out);
size_t sea_block_info__pack_to_buffer
                     (const SeaBlockInfo   *message,
                      ProtobufCBuffer     *buffer);
SeaBlockInfo *
       sea_block_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sea_block_info__free_unpacked
                     (SeaBlockInfo *message,
                      ProtobufCAllocator *allocator);
/* DailyRewardData methods */
void   daily_reward_data__init
                     (DailyRewardData         *message);
size_t daily_reward_data__get_packed_size
                     (const DailyRewardData   *message);
size_t daily_reward_data__pack
                     (const DailyRewardData   *message,
                      uint8_t             *out);
size_t daily_reward_data__pack_to_buffer
                     (const DailyRewardData   *message,
                      ProtobufCBuffer     *buffer);
DailyRewardData *
       daily_reward_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   daily_reward_data__free_unpacked
                     (DailyRewardData *message,
                      ProtobufCAllocator *allocator);
/* LoginFirstData methods */
void   login_first_data__init
                     (LoginFirstData         *message);
size_t login_first_data__get_packed_size
                     (const LoginFirstData   *message);
size_t login_first_data__pack
                     (const LoginFirstData   *message,
                      uint8_t             *out);
size_t login_first_data__pack_to_buffer
                     (const LoginFirstData   *message,
                      ProtobufCBuffer     *buffer);
LoginFirstData *
       login_first_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login_first_data__free_unpacked
                     (LoginFirstData *message,
                      ProtobufCAllocator *allocator);
/* EmailLoginResult methods */
void   email_login_result__init
                     (EmailLoginResult         *message);
size_t email_login_result__get_packed_size
                     (const EmailLoginResult   *message);
size_t email_login_result__pack
                     (const EmailLoginResult   *message,
                      uint8_t             *out);
size_t email_login_result__pack_to_buffer
                     (const EmailLoginResult   *message,
                      ProtobufCBuffer     *buffer);
EmailLoginResult *
       email_login_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   email_login_result__free_unpacked
                     (EmailLoginResult *message,
                      ProtobufCAllocator *allocator);
/* RegisterUser methods */
void   register_user__init
                     (RegisterUser         *message);
size_t register_user__get_packed_size
                     (const RegisterUser   *message);
size_t register_user__pack
                     (const RegisterUser   *message,
                      uint8_t             *out);
size_t register_user__pack_to_buffer
                     (const RegisterUser   *message,
                      ProtobufCBuffer     *buffer);
RegisterUser *
       register_user__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   register_user__free_unpacked
                     (RegisterUser *message,
                      ProtobufCAllocator *allocator);
/* ProtoSample methods */
void   proto_sample__init
                     (ProtoSample         *message);
size_t proto_sample__get_packed_size
                     (const ProtoSample   *message);
size_t proto_sample__pack
                     (const ProtoSample   *message,
                      uint8_t             *out);
size_t proto_sample__pack_to_buffer
                     (const ProtoSample   *message,
                      ProtobufCBuffer     *buffer);
ProtoSample *
       proto_sample__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_sample__free_unpacked
                     (ProtoSample *message,
                      ProtobufCAllocator *allocator);
/* ProtoSampleResult methods */
void   proto_sample_result__init
                     (ProtoSampleResult         *message);
size_t proto_sample_result__get_packed_size
                     (const ProtoSampleResult   *message);
size_t proto_sample_result__pack
                     (const ProtoSampleResult   *message,
                      uint8_t             *out);
size_t proto_sample_result__pack_to_buffer
                     (const ProtoSampleResult   *message,
                      ProtobufCBuffer     *buffer);
ProtoSampleResult *
       proto_sample_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_sample_result__free_unpacked
                     (ProtoSampleResult *message,
                      ProtobufCAllocator *allocator);
/* RegisterUserResult methods */
void   register_user_result__init
                     (RegisterUserResult         *message);
size_t register_user_result__get_packed_size
                     (const RegisterUserResult   *message);
size_t register_user_result__pack
                     (const RegisterUserResult   *message,
                      uint8_t             *out);
size_t register_user_result__pack_to_buffer
                     (const RegisterUserResult   *message,
                      ProtobufCBuffer     *buffer);
RegisterUserResult *
       register_user_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   register_user_result__free_unpacked
                     (RegisterUserResult *message,
                      ProtobufCAllocator *allocator);
/* CreateCharacter methods */
void   create_character__init
                     (CreateCharacter         *message);
size_t create_character__get_packed_size
                     (const CreateCharacter   *message);
size_t create_character__pack
                     (const CreateCharacter   *message,
                      uint8_t             *out);
size_t create_character__pack_to_buffer
                     (const CreateCharacter   *message,
                      ProtobufCBuffer     *buffer);
CreateCharacter *
       create_character__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_character__free_unpacked
                     (CreateCharacter *message,
                      ProtobufCAllocator *allocator);
/* CreateCharacterFailed methods */
void   create_character_failed__init
                     (CreateCharacterFailed         *message);
size_t create_character_failed__get_packed_size
                     (const CreateCharacterFailed   *message);
size_t create_character_failed__pack
                     (const CreateCharacterFailed   *message,
                      uint8_t             *out);
size_t create_character_failed__pack_to_buffer
                     (const CreateCharacterFailed   *message,
                      ProtobufCBuffer     *buffer);
CreateCharacterFailed *
       create_character_failed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_character_failed__free_unpacked
                     (CreateCharacterFailed *message,
                      ProtobufCAllocator *allocator);
/* GetFleetCargo methods */
void   get_fleet_cargo__init
                     (GetFleetCargo         *message);
size_t get_fleet_cargo__get_packed_size
                     (const GetFleetCargo   *message);
size_t get_fleet_cargo__pack
                     (const GetFleetCargo   *message,
                      uint8_t             *out);
size_t get_fleet_cargo__pack_to_buffer
                     (const GetFleetCargo   *message,
                      ProtobufCBuffer     *buffer);
GetFleetCargo *
       get_fleet_cargo__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_fleet_cargo__free_unpacked
                     (GetFleetCargo *message,
                      ProtobufCAllocator *allocator);
/* FleetCaptain methods */
void   fleet_captain__init
                     (FleetCaptain         *message);
size_t fleet_captain__get_packed_size
                     (const FleetCaptain   *message);
size_t fleet_captain__pack
                     (const FleetCaptain   *message,
                      uint8_t             *out);
size_t fleet_captain__pack_to_buffer
                     (const FleetCaptain   *message,
                      ProtobufCBuffer     *buffer);
FleetCaptain *
       fleet_captain__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fleet_captain__free_unpacked
                     (FleetCaptain *message,
                      ProtobufCAllocator *allocator);
/* ShipDefine methods */
void   ship_define__init
                     (ShipDefine         *message);
size_t ship_define__get_packed_size
                     (const ShipDefine   *message);
size_t ship_define__pack
                     (const ShipDefine   *message,
                      uint8_t             *out);
size_t ship_define__pack_to_buffer
                     (const ShipDefine   *message,
                      ProtobufCBuffer     *buffer);
ShipDefine *
       ship_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ship_define__free_unpacked
                     (ShipDefine *message,
                      ProtobufCAllocator *allocator);
/* GoodsDefine methods */
void   goods_define__init
                     (GoodsDefine         *message);
size_t goods_define__get_packed_size
                     (const GoodsDefine   *message);
size_t goods_define__pack
                     (const GoodsDefine   *message,
                      uint8_t             *out);
size_t goods_define__pack_to_buffer
                     (const GoodsDefine   *message,
                      ProtobufCBuffer     *buffer);
GoodsDefine *
       goods_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   goods_define__free_unpacked
                     (GoodsDefine *message,
                      ProtobufCAllocator *allocator);
/* ShipGoods methods */
void   ship_goods__init
                     (ShipGoods         *message);
size_t ship_goods__get_packed_size
                     (const ShipGoods   *message);
size_t ship_goods__pack
                     (const ShipGoods   *message,
                      uint8_t             *out);
size_t ship_goods__pack_to_buffer
                     (const ShipGoods   *message,
                      ProtobufCBuffer     *buffer);
ShipGoods *
       ship_goods__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ship_goods__free_unpacked
                     (ShipGoods *message,
                      ProtobufCAllocator *allocator);
/* GetFleetCargoResult methods */
void   get_fleet_cargo_result__init
                     (GetFleetCargoResult         *message);
size_t get_fleet_cargo_result__get_packed_size
                     (const GetFleetCargoResult   *message);
size_t get_fleet_cargo_result__pack
                     (const GetFleetCargoResult   *message,
                      uint8_t             *out);
size_t get_fleet_cargo_result__pack_to_buffer
                     (const GetFleetCargoResult   *message,
                      ProtobufCBuffer     *buffer);
GetFleetCargoResult *
       get_fleet_cargo_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_fleet_cargo_result__free_unpacked
                     (GetFleetCargoResult *message,
                      ProtobufCAllocator *allocator);
/* GetGoodsForShip methods */
void   get_goods_for_ship__init
                     (GetGoodsForShip         *message);
size_t get_goods_for_ship__get_packed_size
                     (const GetGoodsForShip   *message);
size_t get_goods_for_ship__pack
                     (const GetGoodsForShip   *message,
                      uint8_t             *out);
size_t get_goods_for_ship__pack_to_buffer
                     (const GetGoodsForShip   *message,
                      ProtobufCBuffer     *buffer);
GetGoodsForShip *
       get_goods_for_ship__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_goods_for_ship__free_unpacked
                     (GetGoodsForShip *message,
                      ProtobufCAllocator *allocator);
/* GetGoodsForShipResult methods */
void   get_goods_for_ship_result__init
                     (GetGoodsForShipResult         *message);
size_t get_goods_for_ship_result__get_packed_size
                     (const GetGoodsForShipResult   *message);
size_t get_goods_for_ship_result__pack
                     (const GetGoodsForShipResult   *message,
                      uint8_t             *out);
size_t get_goods_for_ship_result__pack_to_buffer
                     (const GetGoodsForShipResult   *message,
                      ProtobufCBuffer     *buffer);
GetGoodsForShipResult *
       get_goods_for_ship_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_goods_for_ship_result__free_unpacked
                     (GetGoodsForShipResult *message,
                      ProtobufCAllocator *allocator);
/* ExchangeGoodsForShips methods */
void   exchange_goods_for_ships__init
                     (ExchangeGoodsForShips         *message);
size_t exchange_goods_for_ships__get_packed_size
                     (const ExchangeGoodsForShips   *message);
size_t exchange_goods_for_ships__pack
                     (const ExchangeGoodsForShips   *message,
                      uint8_t             *out);
size_t exchange_goods_for_ships__pack_to_buffer
                     (const ExchangeGoodsForShips   *message,
                      ProtobufCBuffer     *buffer);
ExchangeGoodsForShips *
       exchange_goods_for_ships__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   exchange_goods_for_ships__free_unpacked
                     (ExchangeGoodsForShips *message,
                      ProtobufCAllocator *allocator);
/* ExchangeGoodsForShipsResult methods */
void   exchange_goods_for_ships_result__init
                     (ExchangeGoodsForShipsResult         *message);
size_t exchange_goods_for_ships_result__get_packed_size
                     (const ExchangeGoodsForShipsResult   *message);
size_t exchange_goods_for_ships_result__pack
                     (const ExchangeGoodsForShipsResult   *message,
                      uint8_t             *out);
size_t exchange_goods_for_ships_result__pack_to_buffer
                     (const ExchangeGoodsForShipsResult   *message,
                      ProtobufCBuffer     *buffer);
ExchangeGoodsForShipsResult *
       exchange_goods_for_ships_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   exchange_goods_for_ships_result__free_unpacked
                     (ExchangeGoodsForShipsResult *message,
                      ProtobufCAllocator *allocator);
/* CheckMailBox methods */
void   check_mail_box__init
                     (CheckMailBox         *message);
size_t check_mail_box__get_packed_size
                     (const CheckMailBox   *message);
size_t check_mail_box__pack
                     (const CheckMailBox   *message,
                      uint8_t             *out);
size_t check_mail_box__pack_to_buffer
                     (const CheckMailBox   *message,
                      ProtobufCBuffer     *buffer);
CheckMailBox *
       check_mail_box__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   check_mail_box__free_unpacked
                     (CheckMailBox *message,
                      ProtobufCAllocator *allocator);
/* CheckMailBoxResult methods */
void   check_mail_box_result__init
                     (CheckMailBoxResult         *message);
size_t check_mail_box_result__get_packed_size
                     (const CheckMailBoxResult   *message);
size_t check_mail_box_result__pack
                     (const CheckMailBoxResult   *message,
                      uint8_t             *out);
size_t check_mail_box_result__pack_to_buffer
                     (const CheckMailBoxResult   *message,
                      ProtobufCBuffer     *buffer);
CheckMailBoxResult *
       check_mail_box_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   check_mail_box_result__free_unpacked
                     (CheckMailBoxResult *message,
                      ProtobufCAllocator *allocator);
/* GetMailList methods */
void   get_mail_list__init
                     (GetMailList         *message);
size_t get_mail_list__get_packed_size
                     (const GetMailList   *message);
size_t get_mail_list__pack
                     (const GetMailList   *message,
                      uint8_t             *out);
size_t get_mail_list__pack_to_buffer
                     (const GetMailList   *message,
                      ProtobufCBuffer     *buffer);
GetMailList *
       get_mail_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_mail_list__free_unpacked
                     (GetMailList *message,
                      ProtobufCAllocator *allocator);
/* MailDefine methods */
void   mail_define__init
                     (MailDefine         *message);
size_t mail_define__get_packed_size
                     (const MailDefine   *message);
size_t mail_define__pack
                     (const MailDefine   *message,
                      uint8_t             *out);
size_t mail_define__pack_to_buffer
                     (const MailDefine   *message,
                      ProtobufCBuffer     *buffer);
MailDefine *
       mail_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mail_define__free_unpacked
                     (MailDefine *message,
                      ProtobufCAllocator *allocator);
/* GetMailListResult methods */
void   get_mail_list_result__init
                     (GetMailListResult         *message);
size_t get_mail_list_result__get_packed_size
                     (const GetMailListResult   *message);
size_t get_mail_list_result__pack
                     (const GetMailListResult   *message,
                      uint8_t             *out);
size_t get_mail_list_result__pack_to_buffer
                     (const GetMailListResult   *message,
                      ProtobufCBuffer     *buffer);
GetMailListResult *
       get_mail_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_mail_list_result__free_unpacked
                     (GetMailListResult *message,
                      ProtobufCAllocator *allocator);
/* SendMail methods */
void   send_mail__init
                     (SendMail         *message);
size_t send_mail__get_packed_size
                     (const SendMail   *message);
size_t send_mail__pack
                     (const SendMail   *message,
                      uint8_t             *out);
size_t send_mail__pack_to_buffer
                     (const SendMail   *message,
                      ProtobufCBuffer     *buffer);
SendMail *
       send_mail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_mail__free_unpacked
                     (SendMail *message,
                      ProtobufCAllocator *allocator);
/* SendMailResult methods */
void   send_mail_result__init
                     (SendMailResult         *message);
size_t send_mail_result__get_packed_size
                     (const SendMailResult   *message);
size_t send_mail_result__pack
                     (const SendMailResult   *message,
                      uint8_t             *out);
size_t send_mail_result__pack_to_buffer
                     (const SendMailResult   *message,
                      ProtobufCBuffer     *buffer);
SendMailResult *
       send_mail_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_mail_result__free_unpacked
                     (SendMailResult *message,
                      ProtobufCAllocator *allocator);
/* SalvageItem methods */
void   salvage_item__init
                     (SalvageItem         *message);
size_t salvage_item__get_packed_size
                     (const SalvageItem   *message);
size_t salvage_item__pack
                     (const SalvageItem   *message,
                      uint8_t             *out);
size_t salvage_item__pack_to_buffer
                     (const SalvageItem   *message,
                      ProtobufCBuffer     *buffer);
SalvageItem *
       salvage_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   salvage_item__free_unpacked
                     (SalvageItem *message,
                      ProtobufCAllocator *allocator);
/* MarkMailStatus methods */
void   mark_mail_status__init
                     (MarkMailStatus         *message);
size_t mark_mail_status__get_packed_size
                     (const MarkMailStatus   *message);
size_t mark_mail_status__pack
                     (const MarkMailStatus   *message,
                      uint8_t             *out);
size_t mark_mail_status__pack_to_buffer
                     (const MarkMailStatus   *message,
                      ProtobufCBuffer     *buffer);
MarkMailStatus *
       mark_mail_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mark_mail_status__free_unpacked
                     (MarkMailStatus *message,
                      ProtobufCAllocator *allocator);
/* MarkMailStatusResult methods */
void   mark_mail_status_result__init
                     (MarkMailStatusResult         *message);
size_t mark_mail_status_result__get_packed_size
                     (const MarkMailStatusResult   *message);
size_t mark_mail_status_result__pack
                     (const MarkMailStatusResult   *message,
                      uint8_t             *out);
size_t mark_mail_status_result__pack_to_buffer
                     (const MarkMailStatusResult   *message,
                      ProtobufCBuffer     *buffer);
MarkMailStatusResult *
       mark_mail_status_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mark_mail_status_result__free_unpacked
                     (MarkMailStatusResult *message,
                      ProtobufCAllocator *allocator);
/* GetItemsBeingSold methods */
void   get_items_being_sold__init
                     (GetItemsBeingSold         *message);
size_t get_items_being_sold__get_packed_size
                     (const GetItemsBeingSold   *message);
size_t get_items_being_sold__pack
                     (const GetItemsBeingSold   *message,
                      uint8_t             *out);
size_t get_items_being_sold__pack_to_buffer
                     (const GetItemsBeingSold   *message,
                      ProtobufCBuffer     *buffer);
GetItemsBeingSold *
       get_items_being_sold__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_items_being_sold__free_unpacked
                     (GetItemsBeingSold *message,
                      ProtobufCAllocator *allocator);
/* BeingSoldItemsDefine methods */
void   being_sold_items_define__init
                     (BeingSoldItemsDefine         *message);
size_t being_sold_items_define__get_packed_size
                     (const BeingSoldItemsDefine   *message);
size_t being_sold_items_define__pack
                     (const BeingSoldItemsDefine   *message,
                      uint8_t             *out);
size_t being_sold_items_define__pack_to_buffer
                     (const BeingSoldItemsDefine   *message,
                      ProtobufCBuffer     *buffer);
BeingSoldItemsDefine *
       being_sold_items_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   being_sold_items_define__free_unpacked
                     (BeingSoldItemsDefine *message,
                      ProtobufCAllocator *allocator);
/* GetItemsBeingSoldResult methods */
void   get_items_being_sold_result__init
                     (GetItemsBeingSoldResult         *message);
size_t get_items_being_sold_result__get_packed_size
                     (const GetItemsBeingSoldResult   *message);
size_t get_items_being_sold_result__pack
                     (const GetItemsBeingSoldResult   *message,
                      uint8_t             *out);
size_t get_items_being_sold_result__pack_to_buffer
                     (const GetItemsBeingSoldResult   *message,
                      ProtobufCBuffer     *buffer);
GetItemsBeingSoldResult *
       get_items_being_sold_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_items_being_sold_result__free_unpacked
                     (GetItemsBeingSoldResult *message,
                      ProtobufCAllocator *allocator);
/* GetLastPrice methods */
void   get_last_price__init
                     (GetLastPrice         *message);
size_t get_last_price__get_packed_size
                     (const GetLastPrice   *message);
size_t get_last_price__pack
                     (const GetLastPrice   *message,
                      uint8_t             *out);
size_t get_last_price__pack_to_buffer
                     (const GetLastPrice   *message,
                      ProtobufCBuffer     *buffer);
GetLastPrice *
       get_last_price__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_last_price__free_unpacked
                     (GetLastPrice *message,
                      ProtobufCAllocator *allocator);
/* GetLastPriceResult methods */
void   get_last_price_result__init
                     (GetLastPriceResult         *message);
size_t get_last_price_result__get_packed_size
                     (const GetLastPriceResult   *message);
size_t get_last_price_result__pack
                     (const GetLastPriceResult   *message,
                      uint8_t             *out);
size_t get_last_price_result__pack_to_buffer
                     (const GetLastPriceResult   *message,
                      ProtobufCBuffer     *buffer);
GetLastPriceResult *
       get_last_price_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_last_price_result__free_unpacked
                     (GetLastPriceResult *message,
                      ProtobufCAllocator *allocator);
/* GetOrderList methods */
void   get_order_list__init
                     (GetOrderList         *message);
size_t get_order_list__get_packed_size
                     (const GetOrderList   *message);
size_t get_order_list__pack
                     (const GetOrderList   *message,
                      uint8_t             *out);
size_t get_order_list__pack_to_buffer
                     (const GetOrderList   *message,
                      ProtobufCBuffer     *buffer);
GetOrderList *
       get_order_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_order_list__free_unpacked
                     (GetOrderList *message,
                      ProtobufCAllocator *allocator);
/* OrderDefine methods */
void   order_define__init
                     (OrderDefine         *message);
size_t order_define__get_packed_size
                     (const OrderDefine   *message);
size_t order_define__pack
                     (const OrderDefine   *message,
                      uint8_t             *out);
size_t order_define__pack_to_buffer
                     (const OrderDefine   *message,
                      ProtobufCBuffer     *buffer);
OrderDefine *
       order_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   order_define__free_unpacked
                     (OrderDefine *message,
                      ProtobufCAllocator *allocator);
/* GetOrderListResult methods */
void   get_order_list_result__init
                     (GetOrderListResult         *message);
size_t get_order_list_result__get_packed_size
                     (const GetOrderListResult   *message);
size_t get_order_list_result__pack
                     (const GetOrderListResult   *message,
                      uint8_t             *out);
size_t get_order_list_result__pack_to_buffer
                     (const GetOrderListResult   *message,
                      ProtobufCBuffer     *buffer);
GetOrderListResult *
       get_order_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_order_list_result__free_unpacked
                     (GetOrderListResult *message,
                      ProtobufCAllocator *allocator);
/* BuyItemShipDetail methods */
void   buy_item_ship_detail__init
                     (BuyItemShipDetail         *message);
size_t buy_item_ship_detail__get_packed_size
                     (const BuyItemShipDetail   *message);
size_t buy_item_ship_detail__pack
                     (const BuyItemShipDetail   *message,
                      uint8_t             *out);
size_t buy_item_ship_detail__pack_to_buffer
                     (const BuyItemShipDetail   *message,
                      ProtobufCBuffer     *buffer);
BuyItemShipDetail *
       buy_item_ship_detail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_item_ship_detail__free_unpacked
                     (BuyItemShipDetail *message,
                      ProtobufCAllocator *allocator);
/* BuyItem methods */
void   buy_item__init
                     (BuyItem         *message);
size_t buy_item__get_packed_size
                     (const BuyItem   *message);
size_t buy_item__pack
                     (const BuyItem   *message,
                      uint8_t             *out);
size_t buy_item__pack_to_buffer
                     (const BuyItem   *message,
                      ProtobufCBuffer     *buffer);
BuyItem *
       buy_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_item__free_unpacked
                     (BuyItem *message,
                      ProtobufCAllocator *allocator);
/* BuyItemResult methods */
void   buy_item_result__init
                     (BuyItemResult         *message);
size_t buy_item_result__get_packed_size
                     (const BuyItemResult   *message);
size_t buy_item_result__pack
                     (const BuyItemResult   *message,
                      uint8_t             *out);
size_t buy_item_result__pack_to_buffer
                     (const BuyItemResult   *message,
                      ProtobufCBuffer     *buffer);
BuyItemResult *
       buy_item_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_item_result__free_unpacked
                     (BuyItemResult *message,
                      ProtobufCAllocator *allocator);
/* SellItem methods */
void   sell_item__init
                     (SellItem         *message);
size_t sell_item__get_packed_size
                     (const SellItem   *message);
size_t sell_item__pack
                     (const SellItem   *message,
                      uint8_t             *out);
size_t sell_item__pack_to_buffer
                     (const SellItem   *message,
                      ProtobufCBuffer     *buffer);
SellItem *
       sell_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sell_item__free_unpacked
                     (SellItem *message,
                      ProtobufCAllocator *allocator);
/* SellItemResult methods */
void   sell_item_result__init
                     (SellItemResult         *message);
size_t sell_item_result__get_packed_size
                     (const SellItemResult   *message);
size_t sell_item_result__pack
                     (const SellItemResult   *message,
                      uint8_t             *out);
size_t sell_item_result__pack_to_buffer
                     (const SellItemResult   *message,
                      ProtobufCBuffer     *buffer);
SellItemResult *
       sell_item_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sell_item_result__free_unpacked
                     (SellItemResult *message,
                      ProtobufCAllocator *allocator);
/* CreateOrder methods */
void   create_order__init
                     (CreateOrder         *message);
size_t create_order__get_packed_size
                     (const CreateOrder   *message);
size_t create_order__pack
                     (const CreateOrder   *message,
                      uint8_t             *out);
size_t create_order__pack_to_buffer
                     (const CreateOrder   *message,
                      ProtobufCBuffer     *buffer);
CreateOrder *
       create_order__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_order__free_unpacked
                     (CreateOrder *message,
                      ProtobufCAllocator *allocator);
/* CreateOrderResult methods */
void   create_order_result__init
                     (CreateOrderResult         *message);
size_t create_order_result__get_packed_size
                     (const CreateOrderResult   *message);
size_t create_order_result__pack
                     (const CreateOrderResult   *message,
                      uint8_t             *out);
size_t create_order_result__pack_to_buffer
                     (const CreateOrderResult   *message,
                      ProtobufCBuffer     *buffer);
CreateOrderResult *
       create_order_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_order_result__free_unpacked
                     (CreateOrderResult *message,
                      ProtobufCAllocator *allocator);
/* SearchTradeItems methods */
void   search_trade_items__init
                     (SearchTradeItems         *message);
size_t search_trade_items__get_packed_size
                     (const SearchTradeItems   *message);
size_t search_trade_items__pack
                     (const SearchTradeItems   *message,
                      uint8_t             *out);
size_t search_trade_items__pack_to_buffer
                     (const SearchTradeItems   *message,
                      ProtobufCBuffer     *buffer);
SearchTradeItems *
       search_trade_items__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   search_trade_items__free_unpacked
                     (SearchTradeItems *message,
                      ProtobufCAllocator *allocator);
/* SearchTradeItemsResult methods */
void   search_trade_items_result__init
                     (SearchTradeItemsResult         *message);
size_t search_trade_items_result__get_packed_size
                     (const SearchTradeItemsResult   *message);
size_t search_trade_items_result__pack
                     (const SearchTradeItemsResult   *message,
                      uint8_t             *out);
size_t search_trade_items_result__pack_to_buffer
                     (const SearchTradeItemsResult   *message,
                      ProtobufCBuffer     *buffer);
SearchTradeItemsResult *
       search_trade_items_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   search_trade_items_result__free_unpacked
                     (SearchTradeItemsResult *message,
                      ProtobufCAllocator *allocator);
/* GetItemsToSell methods */
void   get_items_to_sell__init
                     (GetItemsToSell         *message);
size_t get_items_to_sell__get_packed_size
                     (const GetItemsToSell   *message);
size_t get_items_to_sell__pack
                     (const GetItemsToSell   *message,
                      uint8_t             *out);
size_t get_items_to_sell__pack_to_buffer
                     (const GetItemsToSell   *message,
                      ProtobufCBuffer     *buffer);
GetItemsToSell *
       get_items_to_sell__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_items_to_sell__free_unpacked
                     (GetItemsToSell *message,
                      ProtobufCAllocator *allocator);
/* ToSellItemsDefine methods */
void   to_sell_items_define__init
                     (ToSellItemsDefine         *message);
size_t to_sell_items_define__get_packed_size
                     (const ToSellItemsDefine   *message);
size_t to_sell_items_define__pack
                     (const ToSellItemsDefine   *message,
                      uint8_t             *out);
size_t to_sell_items_define__pack_to_buffer
                     (const ToSellItemsDefine   *message,
                      ProtobufCBuffer     *buffer);
ToSellItemsDefine *
       to_sell_items_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   to_sell_items_define__free_unpacked
                     (ToSellItemsDefine *message,
                      ProtobufCAllocator *allocator);
/* GetItemsToSellResult methods */
void   get_items_to_sell_result__init
                     (GetItemsToSellResult         *message);
size_t get_items_to_sell_result__get_packed_size
                     (const GetItemsToSellResult   *message);
size_t get_items_to_sell_result__pack
                     (const GetItemsToSellResult   *message,
                      uint8_t             *out);
size_t get_items_to_sell_result__pack_to_buffer
                     (const GetItemsToSellResult   *message,
                      ProtobufCBuffer     *buffer);
GetItemsToSellResult *
       get_items_to_sell_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_items_to_sell_result__free_unpacked
                     (GetItemsToSellResult *message,
                      ProtobufCAllocator *allocator);
/* GetPriceData methods */
void   get_price_data__init
                     (GetPriceData         *message);
size_t get_price_data__get_packed_size
                     (const GetPriceData   *message);
size_t get_price_data__pack
                     (const GetPriceData   *message,
                      uint8_t             *out);
size_t get_price_data__pack_to_buffer
                     (const GetPriceData   *message,
                      ProtobufCBuffer     *buffer);
GetPriceData *
       get_price_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_price_data__free_unpacked
                     (GetPriceData *message,
                      ProtobufCAllocator *allocator);
/* PriceDataDefine methods */
void   price_data_define__init
                     (PriceDataDefine         *message);
size_t price_data_define__get_packed_size
                     (const PriceDataDefine   *message);
size_t price_data_define__pack
                     (const PriceDataDefine   *message,
                      uint8_t             *out);
size_t price_data_define__pack_to_buffer
                     (const PriceDataDefine   *message,
                      ProtobufCBuffer     *buffer);
PriceDataDefine *
       price_data_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   price_data_define__free_unpacked
                     (PriceDataDefine *message,
                      ProtobufCAllocator *allocator);
/* ShipSizeInfo methods */
void   ship_size_info__init
                     (ShipSizeInfo         *message);
size_t ship_size_info__get_packed_size
                     (const ShipSizeInfo   *message);
size_t ship_size_info__pack
                     (const ShipSizeInfo   *message,
                      uint8_t             *out);
size_t ship_size_info__pack_to_buffer
                     (const ShipSizeInfo   *message,
                      ProtobufCBuffer     *buffer);
ShipSizeInfo *
       ship_size_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ship_size_info__free_unpacked
                     (ShipSizeInfo *message,
                      ProtobufCAllocator *allocator);
/* GetPriceDataResult methods */
void   get_price_data_result__init
                     (GetPriceDataResult         *message);
size_t get_price_data_result__get_packed_size
                     (const GetPriceDataResult   *message);
size_t get_price_data_result__pack
                     (const GetPriceDataResult   *message,
                      uint8_t             *out);
size_t get_price_data_result__pack_to_buffer
                     (const GetPriceDataResult   *message,
                      ProtobufCBuffer     *buffer);
GetPriceDataResult *
       get_price_data_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_price_data_result__free_unpacked
                     (GetPriceDataResult *message,
                      ProtobufCAllocator *allocator);
/* GetPersonalItem methods */
void   get_personal_item__init
                     (GetPersonalItem         *message);
size_t get_personal_item__get_packed_size
                     (const GetPersonalItem   *message);
size_t get_personal_item__pack
                     (const GetPersonalItem   *message,
                      uint8_t             *out);
size_t get_personal_item__pack_to_buffer
                     (const GetPersonalItem   *message,
                      ProtobufCBuffer     *buffer);
GetPersonalItem *
       get_personal_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_personal_item__free_unpacked
                     (GetPersonalItem *message,
                      ProtobufCAllocator *allocator);
/* HatchItemsDefine methods */
void   hatch_items_define__init
                     (HatchItemsDefine         *message);
size_t hatch_items_define__get_packed_size
                     (const HatchItemsDefine   *message);
size_t hatch_items_define__pack
                     (const HatchItemsDefine   *message,
                      uint8_t             *out);
size_t hatch_items_define__pack_to_buffer
                     (const HatchItemsDefine   *message,
                      ProtobufCBuffer     *buffer);
HatchItemsDefine *
       hatch_items_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hatch_items_define__free_unpacked
                     (HatchItemsDefine *message,
                      ProtobufCAllocator *allocator);
/* EquipmentDefine methods */
void   equipment_define__init
                     (EquipmentDefine         *message);
size_t equipment_define__get_packed_size
                     (const EquipmentDefine   *message);
size_t equipment_define__pack
                     (const EquipmentDefine   *message,
                      uint8_t             *out);
size_t equipment_define__pack_to_buffer
                     (const EquipmentDefine   *message,
                      ProtobufCBuffer     *buffer);
EquipmentDefine *
       equipment_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   equipment_define__free_unpacked
                     (EquipmentDefine *message,
                      ProtobufCAllocator *allocator);
/* DrawingItemsDefine methods */
void   drawing_items_define__init
                     (DrawingItemsDefine         *message);
size_t drawing_items_define__get_packed_size
                     (const DrawingItemsDefine   *message);
size_t drawing_items_define__pack
                     (const DrawingItemsDefine   *message,
                      uint8_t             *out);
size_t drawing_items_define__pack_to_buffer
                     (const DrawingItemsDefine   *message,
                      ProtobufCBuffer     *buffer);
DrawingItemsDefine *
       drawing_items_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   drawing_items_define__free_unpacked
                     (DrawingItemsDefine *message,
                      ProtobufCAllocator *allocator);
/* SpecialItemsDefine methods */
void   special_items_define__init
                     (SpecialItemsDefine         *message);
size_t special_items_define__get_packed_size
                     (const SpecialItemsDefine   *message);
size_t special_items_define__pack
                     (const SpecialItemsDefine   *message,
                      uint8_t             *out);
size_t special_items_define__pack_to_buffer
                     (const SpecialItemsDefine   *message,
                      ProtobufCBuffer     *buffer);
SpecialItemsDefine *
       special_items_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   special_items_define__free_unpacked
                     (SpecialItemsDefine *message,
                      ProtobufCAllocator *allocator);
/* GetPersonalItemResult methods */
void   get_personal_item_result__init
                     (GetPersonalItemResult         *message);
size_t get_personal_item_result__get_packed_size
                     (const GetPersonalItemResult   *message);
size_t get_personal_item_result__pack
                     (const GetPersonalItemResult   *message,
                      uint8_t             *out);
size_t get_personal_item_result__pack_to_buffer
                     (const GetPersonalItemResult   *message,
                      ProtobufCBuffer     *buffer);
GetPersonalItemResult *
       get_personal_item_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_personal_item_result__free_unpacked
                     (GetPersonalItemResult *message,
                      ProtobufCAllocator *allocator);
/* CancelOrder methods */
void   cancel_order__init
                     (CancelOrder         *message);
size_t cancel_order__get_packed_size
                     (const CancelOrder   *message);
size_t cancel_order__pack
                     (const CancelOrder   *message,
                      uint8_t             *out);
size_t cancel_order__pack_to_buffer
                     (const CancelOrder   *message,
                      ProtobufCBuffer     *buffer);
CancelOrder *
       cancel_order__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cancel_order__free_unpacked
                     (CancelOrder *message,
                      ProtobufCAllocator *allocator);
/* CancelOrderResult methods */
void   cancel_order_result__init
                     (CancelOrderResult         *message);
size_t cancel_order_result__get_packed_size
                     (const CancelOrderResult   *message);
size_t cancel_order_result__pack
                     (const CancelOrderResult   *message,
                      uint8_t             *out);
size_t cancel_order_result__pack_to_buffer
                     (const CancelOrderResult   *message,
                      ProtobufCBuffer     *buffer);
CancelOrderResult *
       cancel_order_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cancel_order_result__free_unpacked
                     (CancelOrderResult *message,
                      ProtobufCAllocator *allocator);
/* WarehouseOpration methods */
void   warehouse_opration__init
                     (WarehouseOpration         *message);
size_t warehouse_opration__get_packed_size
                     (const WarehouseOpration   *message);
size_t warehouse_opration__pack
                     (const WarehouseOpration   *message,
                      uint8_t             *out);
size_t warehouse_opration__pack_to_buffer
                     (const WarehouseOpration   *message,
                      ProtobufCBuffer     *buffer);
WarehouseOpration *
       warehouse_opration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   warehouse_opration__free_unpacked
                     (WarehouseOpration *message,
                      ProtobufCAllocator *allocator);
/* WarehouseOprationResult methods */
void   warehouse_opration_result__init
                     (WarehouseOprationResult         *message);
size_t warehouse_opration_result__get_packed_size
                     (const WarehouseOprationResult   *message);
size_t warehouse_opration_result__pack
                     (const WarehouseOprationResult   *message,
                      uint8_t             *out);
size_t warehouse_opration_result__pack_to_buffer
                     (const WarehouseOprationResult   *message,
                      ProtobufCBuffer     *buffer);
WarehouseOprationResult *
       warehouse_opration_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   warehouse_opration_result__free_unpacked
                     (WarehouseOprationResult *message,
                      ProtobufCAllocator *allocator);
/* GetWarehouseItems methods */
void   get_warehouse_items__init
                     (GetWarehouseItems         *message);
size_t get_warehouse_items__get_packed_size
                     (const GetWarehouseItems   *message);
size_t get_warehouse_items__pack
                     (const GetWarehouseItems   *message,
                      uint8_t             *out);
size_t get_warehouse_items__pack_to_buffer
                     (const GetWarehouseItems   *message,
                      ProtobufCBuffer     *buffer);
GetWarehouseItems *
       get_warehouse_items__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_warehouse_items__free_unpacked
                     (GetWarehouseItems *message,
                      ProtobufCAllocator *allocator);
/* CityGoodsDefine methods */
void   city_goods_define__init
                     (CityGoodsDefine         *message);
size_t city_goods_define__get_packed_size
                     (const CityGoodsDefine   *message);
size_t city_goods_define__pack
                     (const CityGoodsDefine   *message,
                      uint8_t             *out);
size_t city_goods_define__pack_to_buffer
                     (const CityGoodsDefine   *message,
                      ProtobufCBuffer     *buffer);
CityGoodsDefine *
       city_goods_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   city_goods_define__free_unpacked
                     (CityGoodsDefine *message,
                      ProtobufCAllocator *allocator);
/* CityGoods methods */
void   city_goods__init
                     (CityGoods         *message);
size_t city_goods__get_packed_size
                     (const CityGoods   *message);
size_t city_goods__pack
                     (const CityGoods   *message,
                      uint8_t             *out);
size_t city_goods__pack_to_buffer
                     (const CityGoods   *message,
                      ProtobufCBuffer     *buffer);
CityGoods *
       city_goods__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   city_goods__free_unpacked
                     (CityGoods *message,
                      ProtobufCAllocator *allocator);
/* GetWarehouseItemsResult methods */
void   get_warehouse_items_result__init
                     (GetWarehouseItemsResult         *message);
size_t get_warehouse_items_result__get_packed_size
                     (const GetWarehouseItemsResult   *message);
size_t get_warehouse_items_result__pack
                     (const GetWarehouseItemsResult   *message,
                      uint8_t             *out);
size_t get_warehouse_items_result__pack_to_buffer
                     (const GetWarehouseItemsResult   *message,
                      ProtobufCBuffer     *buffer);
GetWarehouseItemsResult *
       get_warehouse_items_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_warehouse_items_result__free_unpacked
                     (GetWarehouseItemsResult *message,
                      ProtobufCAllocator *allocator);
/* BarConsume methods */
void   bar_consume__init
                     (BarConsume         *message);
size_t bar_consume__get_packed_size
                     (const BarConsume   *message);
size_t bar_consume__pack
                     (const BarConsume   *message,
                      uint8_t             *out);
size_t bar_consume__pack_to_buffer
                     (const BarConsume   *message,
                      ProtobufCBuffer     *buffer);
BarConsume *
       bar_consume__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bar_consume__free_unpacked
                     (BarConsume *message,
                      ProtobufCAllocator *allocator);
/* BarConsumeResult methods */
void   bar_consume_result__init
                     (BarConsumeResult         *message);
size_t bar_consume_result__get_packed_size
                     (const BarConsumeResult   *message);
size_t bar_consume_result__pack
                     (const BarConsumeResult   *message,
                      uint8_t             *out);
size_t bar_consume_result__pack_to_buffer
                     (const BarConsumeResult   *message,
                      ProtobufCBuffer     *buffer);
BarConsumeResult *
       bar_consume_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bar_consume_result__free_unpacked
                     (BarConsumeResult *message,
                      ProtobufCAllocator *allocator);
/* GetBarInfo methods */
void   get_bar_info__init
                     (GetBarInfo         *message);
size_t get_bar_info__get_packed_size
                     (const GetBarInfo   *message);
size_t get_bar_info__pack
                     (const GetBarInfo   *message,
                      uint8_t             *out);
size_t get_bar_info__pack_to_buffer
                     (const GetBarInfo   *message,
                      ProtobufCBuffer     *buffer);
GetBarInfo *
       get_bar_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_bar_info__free_unpacked
                     (GetBarInfo *message,
                      ProtobufCAllocator *allocator);
/* BarMenuDefine methods */
void   bar_menu_define__init
                     (BarMenuDefine         *message);
size_t bar_menu_define__get_packed_size
                     (const BarMenuDefine   *message);
size_t bar_menu_define__pack
                     (const BarMenuDefine   *message,
                      uint8_t             *out);
size_t bar_menu_define__pack_to_buffer
                     (const BarMenuDefine   *message,
                      ProtobufCBuffer     *buffer);
BarMenuDefine *
       bar_menu_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bar_menu_define__free_unpacked
                     (BarMenuDefine *message,
                      ProtobufCAllocator *allocator);
/* BarCaptainDefine methods */
void   bar_captain_define__init
                     (BarCaptainDefine         *message);
size_t bar_captain_define__get_packed_size
                     (const BarCaptainDefine   *message);
size_t bar_captain_define__pack
                     (const BarCaptainDefine   *message,
                      uint8_t             *out);
size_t bar_captain_define__pack_to_buffer
                     (const BarCaptainDefine   *message,
                      ProtobufCBuffer     *buffer);
BarCaptainDefine *
       bar_captain_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bar_captain_define__free_unpacked
                     (BarCaptainDefine *message,
                      ProtobufCAllocator *allocator);
/* GetBarInfoResult methods */
void   get_bar_info_result__init
                     (GetBarInfoResult         *message);
size_t get_bar_info_result__get_packed_size
                     (const GetBarInfoResult   *message);
size_t get_bar_info_result__pack
                     (const GetBarInfoResult   *message,
                      uint8_t             *out);
size_t get_bar_info_result__pack_to_buffer
                     (const GetBarInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetBarInfoResult *
       get_bar_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_bar_info_result__free_unpacked
                     (GetBarInfoResult *message,
                      ProtobufCAllocator *allocator);
/* GetCrew methods */
void   get_crew__init
                     (GetCrew         *message);
size_t get_crew__get_packed_size
                     (const GetCrew   *message);
size_t get_crew__pack
                     (const GetCrew   *message,
                      uint8_t             *out);
size_t get_crew__pack_to_buffer
                     (const GetCrew   *message,
                      ProtobufCBuffer     *buffer);
GetCrew *
       get_crew__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_crew__free_unpacked
                     (GetCrew *message,
                      ProtobufCAllocator *allocator);
/* ShipCrewDefine methods */
void   ship_crew_define__init
                     (ShipCrewDefine         *message);
size_t ship_crew_define__get_packed_size
                     (const ShipCrewDefine   *message);
size_t ship_crew_define__pack
                     (const ShipCrewDefine   *message,
                      uint8_t             *out);
size_t ship_crew_define__pack_to_buffer
                     (const ShipCrewDefine   *message,
                      ProtobufCBuffer     *buffer);
ShipCrewDefine *
       ship_crew_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ship_crew_define__free_unpacked
                     (ShipCrewDefine *message,
                      ProtobufCAllocator *allocator);
/* GetCrewResult methods */
void   get_crew_result__init
                     (GetCrewResult         *message);
size_t get_crew_result__get_packed_size
                     (const GetCrewResult   *message);
size_t get_crew_result__pack
                     (const GetCrewResult   *message,
                      uint8_t             *out);
size_t get_crew_result__pack_to_buffer
                     (const GetCrewResult   *message,
                      ProtobufCBuffer     *buffer);
GetCrewResult *
       get_crew_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_crew_result__free_unpacked
                     (GetCrewResult *message,
                      ProtobufCAllocator *allocator);
/* TreatBargirl methods */
void   treat_bargirl__init
                     (TreatBargirl         *message);
size_t treat_bargirl__get_packed_size
                     (const TreatBargirl   *message);
size_t treat_bargirl__pack
                     (const TreatBargirl   *message,
                      uint8_t             *out);
size_t treat_bargirl__pack_to_buffer
                     (const TreatBargirl   *message,
                      ProtobufCBuffer     *buffer);
TreatBargirl *
       treat_bargirl__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   treat_bargirl__free_unpacked
                     (TreatBargirl *message,
                      ProtobufCAllocator *allocator);
/* TreatBargirlResult methods */
void   treat_bargirl_result__init
                     (TreatBargirlResult         *message);
size_t treat_bargirl_result__get_packed_size
                     (const TreatBargirlResult   *message);
size_t treat_bargirl_result__pack
                     (const TreatBargirlResult   *message,
                      uint8_t             *out);
size_t treat_bargirl_result__pack_to_buffer
                     (const TreatBargirlResult   *message,
                      ProtobufCBuffer     *buffer);
TreatBargirlResult *
       treat_bargirl_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   treat_bargirl_result__free_unpacked
                     (TreatBargirlResult *message,
                      ProtobufCAllocator *allocator);
/* GiveBargirlGift methods */
void   give_bargirl_gift__init
                     (GiveBargirlGift         *message);
size_t give_bargirl_gift__get_packed_size
                     (const GiveBargirlGift   *message);
size_t give_bargirl_gift__pack
                     (const GiveBargirlGift   *message,
                      uint8_t             *out);
size_t give_bargirl_gift__pack_to_buffer
                     (const GiveBargirlGift   *message,
                      ProtobufCBuffer     *buffer);
GiveBargirlGift *
       give_bargirl_gift__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   give_bargirl_gift__free_unpacked
                     (GiveBargirlGift *message,
                      ProtobufCAllocator *allocator);
/* GiveBargirlGiftResult methods */
void   give_bargirl_gift_result__init
                     (GiveBargirlGiftResult         *message);
size_t give_bargirl_gift_result__get_packed_size
                     (const GiveBargirlGiftResult   *message);
size_t give_bargirl_gift_result__pack
                     (const GiveBargirlGiftResult   *message,
                      uint8_t             *out);
size_t give_bargirl_gift_result__pack_to_buffer
                     (const GiveBargirlGiftResult   *message,
                      ProtobufCBuffer     *buffer);
GiveBargirlGiftResult *
       give_bargirl_gift_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   give_bargirl_gift_result__free_unpacked
                     (GiveBargirlGiftResult *message,
                      ProtobufCAllocator *allocator);
/* GetAvailCrewNum methods */
void   get_avail_crew_num__init
                     (GetAvailCrewNum         *message);
size_t get_avail_crew_num__get_packed_size
                     (const GetAvailCrewNum   *message);
size_t get_avail_crew_num__pack
                     (const GetAvailCrewNum   *message,
                      uint8_t             *out);
size_t get_avail_crew_num__pack_to_buffer
                     (const GetAvailCrewNum   *message,
                      ProtobufCBuffer     *buffer);
GetAvailCrewNum *
       get_avail_crew_num__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_avail_crew_num__free_unpacked
                     (GetAvailCrewNum *message,
                      ProtobufCAllocator *allocator);
/* GetAvailCrewNumResult methods */
void   get_avail_crew_num_result__init
                     (GetAvailCrewNumResult         *message);
size_t get_avail_crew_num_result__get_packed_size
                     (const GetAvailCrewNumResult   *message);
size_t get_avail_crew_num_result__pack
                     (const GetAvailCrewNumResult   *message,
                      uint8_t             *out);
size_t get_avail_crew_num_result__pack_to_buffer
                     (const GetAvailCrewNumResult   *message,
                      ProtobufCBuffer     *buffer);
GetAvailCrewNumResult *
       get_avail_crew_num_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_avail_crew_num_result__free_unpacked
                     (GetAvailCrewNumResult *message,
                      ProtobufCAllocator *allocator);
/* GetTaskList methods */
void   get_task_list__init
                     (GetTaskList         *message);
size_t get_task_list__get_packed_size
                     (const GetTaskList   *message);
size_t get_task_list__pack
                     (const GetTaskList   *message,
                      uint8_t             *out);
size_t get_task_list__pack_to_buffer
                     (const GetTaskList   *message,
                      ProtobufCBuffer     *buffer);
GetTaskList *
       get_task_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_task_list__free_unpacked
                     (GetTaskList *message,
                      ProtobufCAllocator *allocator);
/* TaskDefine methods */
void   task_define__init
                     (TaskDefine         *message);
size_t task_define__get_packed_size
                     (const TaskDefine   *message);
size_t task_define__pack
                     (const TaskDefine   *message,
                      uint8_t             *out);
size_t task_define__pack_to_buffer
                     (const TaskDefine   *message,
                      ProtobufCBuffer     *buffer);
TaskDefine *
       task_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task_define__free_unpacked
                     (TaskDefine *message,
                      ProtobufCAllocator *allocator);
/* GetTaskListResult methods */
void   get_task_list_result__init
                     (GetTaskListResult         *message);
size_t get_task_list_result__get_packed_size
                     (const GetTaskListResult   *message);
size_t get_task_list_result__pack
                     (const GetTaskListResult   *message,
                      uint8_t             *out);
size_t get_task_list_result__pack_to_buffer
                     (const GetTaskListResult   *message,
                      ProtobufCBuffer     *buffer);
GetTaskListResult *
       get_task_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_task_list_result__free_unpacked
                     (GetTaskListResult *message,
                      ProtobufCAllocator *allocator);
/* GetIntelligence methods */
void   get_intelligence__init
                     (GetIntelligence         *message);
size_t get_intelligence__get_packed_size
                     (const GetIntelligence   *message);
size_t get_intelligence__pack
                     (const GetIntelligence   *message,
                      uint8_t             *out);
size_t get_intelligence__pack_to_buffer
                     (const GetIntelligence   *message,
                      ProtobufCBuffer     *buffer);
GetIntelligence *
       get_intelligence__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_intelligence__free_unpacked
                     (GetIntelligence *message,
                      ProtobufCAllocator *allocator);
/* IntelligenceDefine methods */
void   intelligence_define__init
                     (IntelligenceDefine         *message);
size_t intelligence_define__get_packed_size
                     (const IntelligenceDefine   *message);
size_t intelligence_define__pack
                     (const IntelligenceDefine   *message,
                      uint8_t             *out);
size_t intelligence_define__pack_to_buffer
                     (const IntelligenceDefine   *message,
                      ProtobufCBuffer     *buffer);
IntelligenceDefine *
       intelligence_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   intelligence_define__free_unpacked
                     (IntelligenceDefine *message,
                      ProtobufCAllocator *allocator);
/* GetIntelligenceResult methods */
void   get_intelligence_result__init
                     (GetIntelligenceResult         *message);
size_t get_intelligence_result__get_packed_size
                     (const GetIntelligenceResult   *message);
size_t get_intelligence_result__pack
                     (const GetIntelligenceResult   *message,
                      uint8_t             *out);
size_t get_intelligence_result__pack_to_buffer
                     (const GetIntelligenceResult   *message,
                      ProtobufCBuffer     *buffer);
GetIntelligenceResult *
       get_intelligence_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_intelligence_result__free_unpacked
                     (GetIntelligenceResult *message,
                      ProtobufCAllocator *allocator);
/* GetCaptain methods */
void   get_captain__init
                     (GetCaptain         *message);
size_t get_captain__get_packed_size
                     (const GetCaptain   *message);
size_t get_captain__pack
                     (const GetCaptain   *message,
                      uint8_t             *out);
size_t get_captain__pack_to_buffer
                     (const GetCaptain   *message,
                      ProtobufCBuffer     *buffer);
GetCaptain *
       get_captain__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_captain__free_unpacked
                     (GetCaptain *message,
                      ProtobufCAllocator *allocator);
/* GetCaptainResult methods */
void   get_captain_result__init
                     (GetCaptainResult         *message);
size_t get_captain_result__get_packed_size
                     (const GetCaptainResult   *message);
size_t get_captain_result__pack
                     (const GetCaptainResult   *message,
                      uint8_t             *out);
size_t get_captain_result__pack_to_buffer
                     (const GetCaptainResult   *message,
                      ProtobufCBuffer     *buffer);
GetCaptainResult *
       get_captain_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_captain_result__free_unpacked
                     (GetCaptainResult *message,
                      ProtobufCAllocator *allocator);
/* HandleTask methods */
void   handle_task__init
                     (HandleTask         *message);
size_t handle_task__get_packed_size
                     (const HandleTask   *message);
size_t handle_task__pack
                     (const HandleTask   *message,
                      uint8_t             *out);
size_t handle_task__pack_to_buffer
                     (const HandleTask   *message,
                      ProtobufCBuffer     *buffer);
HandleTask *
       handle_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   handle_task__free_unpacked
                     (HandleTask *message,
                      ProtobufCAllocator *allocator);
/* TaskRewardItems methods */
void   task_reward_items__init
                     (TaskRewardItems         *message);
size_t task_reward_items__get_packed_size
                     (const TaskRewardItems   *message);
size_t task_reward_items__pack
                     (const TaskRewardItems   *message,
                      uint8_t             *out);
size_t task_reward_items__pack_to_buffer
                     (const TaskRewardItems   *message,
                      ProtobufCBuffer     *buffer);
TaskRewardItems *
       task_reward_items__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task_reward_items__free_unpacked
                     (TaskRewardItems *message,
                      ProtobufCAllocator *allocator);
/* HandleTaskResult methods */
void   handle_task_result__init
                     (HandleTaskResult         *message);
size_t handle_task_result__get_packed_size
                     (const HandleTaskResult   *message);
size_t handle_task_result__pack
                     (const HandleTaskResult   *message,
                      uint8_t             *out);
size_t handle_task_result__pack_to_buffer
                     (const HandleTaskResult   *message,
                      ProtobufCBuffer     *buffer);
HandleTaskResult *
       handle_task_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   handle_task_result__free_unpacked
                     (HandleTaskResult *message,
                      ProtobufCAllocator *allocator);
/* MainTaskItems methods */
void   main_task_items__init
                     (MainTaskItems         *message);
size_t main_task_items__get_packed_size
                     (const MainTaskItems   *message);
size_t main_task_items__pack
                     (const MainTaskItems   *message,
                      uint8_t             *out);
size_t main_task_items__pack_to_buffer
                     (const MainTaskItems   *message,
                      ProtobufCBuffer     *buffer);
MainTaskItems *
       main_task_items__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   main_task_items__free_unpacked
                     (MainTaskItems *message,
                      ProtobufCAllocator *allocator);
/* CurrentMainTaskInfo methods */
void   current_main_task_info__init
                     (CurrentMainTaskInfo         *message);
size_t current_main_task_info__get_packed_size
                     (const CurrentMainTaskInfo   *message);
size_t current_main_task_info__pack
                     (const CurrentMainTaskInfo   *message,
                      uint8_t             *out);
size_t current_main_task_info__pack_to_buffer
                     (const CurrentMainTaskInfo   *message,
                      ProtobufCBuffer     *buffer);
CurrentMainTaskInfo *
       current_main_task_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   current_main_task_info__free_unpacked
                     (CurrentMainTaskInfo *message,
                      ProtobufCAllocator *allocator);
/* CurrentCompanionTaskInfo methods */
void   current_companion_task_info__init
                     (CurrentCompanionTaskInfo         *message);
size_t current_companion_task_info__get_packed_size
                     (const CurrentCompanionTaskInfo   *message);
size_t current_companion_task_info__pack
                     (const CurrentCompanionTaskInfo   *message,
                      uint8_t             *out);
size_t current_companion_task_info__pack_to_buffer
                     (const CurrentCompanionTaskInfo   *message,
                      ProtobufCBuffer     *buffer);
CurrentCompanionTaskInfo *
       current_companion_task_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   current_companion_task_info__free_unpacked
                     (CurrentCompanionTaskInfo *message,
                      ProtobufCAllocator *allocator);
/* GetCurrentCityData methods */
void   get_current_city_data__init
                     (GetCurrentCityData         *message);
size_t get_current_city_data__get_packed_size
                     (const GetCurrentCityData   *message);
size_t get_current_city_data__pack
                     (const GetCurrentCityData   *message,
                      uint8_t             *out);
size_t get_current_city_data__pack_to_buffer
                     (const GetCurrentCityData   *message,
                      ProtobufCBuffer     *buffer);
GetCurrentCityData *
       get_current_city_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_current_city_data__free_unpacked
                     (GetCurrentCityData *message,
                      ProtobufCAllocator *allocator);
/* GetCurrentCityDataResult methods */
void   get_current_city_data_result__init
                     (GetCurrentCityDataResult         *message);
size_t get_current_city_data_result__get_packed_size
                     (const GetCurrentCityDataResult   *message);
size_t get_current_city_data_result__pack
                     (const GetCurrentCityDataResult   *message,
                      uint8_t             *out);
size_t get_current_city_data_result__pack_to_buffer
                     (const GetCurrentCityDataResult   *message,
                      ProtobufCBuffer     *buffer);
GetCurrentCityDataResult *
       get_current_city_data_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_current_city_data_result__free_unpacked
                     (GetCurrentCityDataResult *message,
                      ProtobufCAllocator *allocator);
/* GetShipList methods */
void   get_ship_list__init
                     (GetShipList         *message);
size_t get_ship_list__get_packed_size
                     (const GetShipList   *message);
size_t get_ship_list__pack
                     (const GetShipList   *message,
                      uint8_t             *out);
size_t get_ship_list__pack_to_buffer
                     (const GetShipList   *message,
                      ProtobufCBuffer     *buffer);
GetShipList *
       get_ship_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_ship_list__free_unpacked
                     (GetShipList *message,
                      ProtobufCAllocator *allocator);
/* GetShipListResult methods */
void   get_ship_list_result__init
                     (GetShipListResult         *message);
size_t get_ship_list_result__get_packed_size
                     (const GetShipListResult   *message);
size_t get_ship_list_result__pack
                     (const GetShipListResult   *message,
                      uint8_t             *out);
size_t get_ship_list_result__pack_to_buffer
                     (const GetShipListResult   *message,
                      ProtobufCBuffer     *buffer);
GetShipListResult *
       get_ship_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_ship_list_result__free_unpacked
                     (GetShipListResult *message,
                      ProtobufCAllocator *allocator);
/* RepairShip methods */
void   repair_ship__init
                     (RepairShip         *message);
size_t repair_ship__get_packed_size
                     (const RepairShip   *message);
size_t repair_ship__pack
                     (const RepairShip   *message,
                      uint8_t             *out);
size_t repair_ship__pack_to_buffer
                     (const RepairShip   *message,
                      ProtobufCBuffer     *buffer);
RepairShip *
       repair_ship__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   repair_ship__free_unpacked
                     (RepairShip *message,
                      ProtobufCAllocator *allocator);
/* RepairShipResult methods */
void   repair_ship_result__init
                     (RepairShipResult         *message);
size_t repair_ship_result__get_packed_size
                     (const RepairShipResult   *message);
size_t repair_ship_result__pack
                     (const RepairShipResult   *message,
                      uint8_t             *out);
size_t repair_ship_result__pack_to_buffer
                     (const RepairShipResult   *message,
                      ProtobufCBuffer     *buffer);
RepairShipResult *
       repair_ship_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   repair_ship_result__free_unpacked
                     (RepairShipResult *message,
                      ProtobufCAllocator *allocator);
/* RepairAllShips methods */
void   repair_all_ships__init
                     (RepairAllShips         *message);
size_t repair_all_ships__get_packed_size
                     (const RepairAllShips   *message);
size_t repair_all_ships__pack
                     (const RepairAllShips   *message,
                      uint8_t             *out);
size_t repair_all_ships__pack_to_buffer
                     (const RepairAllShips   *message,
                      ProtobufCBuffer     *buffer);
RepairAllShips *
       repair_all_ships__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   repair_all_ships__free_unpacked
                     (RepairAllShips *message,
                      ProtobufCAllocator *allocator);
/* RepairAllShipsResult methods */
void   repair_all_ships_result__init
                     (RepairAllShipsResult         *message);
size_t repair_all_ships_result__get_packed_size
                     (const RepairAllShipsResult   *message);
size_t repair_all_ships_result__pack
                     (const RepairAllShipsResult   *message,
                      uint8_t             *out);
size_t repair_all_ships_result__pack_to_buffer
                     (const RepairAllShipsResult   *message,
                      ProtobufCBuffer     *buffer);
RepairAllShipsResult *
       repair_all_ships_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   repair_all_ships_result__free_unpacked
                     (RepairAllShipsResult *message,
                      ProtobufCAllocator *allocator);
/* ShipName methods */
void   ship_name__init
                     (ShipName         *message);
size_t ship_name__get_packed_size
                     (const ShipName   *message);
size_t ship_name__pack
                     (const ShipName   *message,
                      uint8_t             *out);
size_t ship_name__pack_to_buffer
                     (const ShipName   *message,
                      ProtobufCBuffer     *buffer);
ShipName *
       ship_name__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ship_name__free_unpacked
                     (ShipName *message,
                      ProtobufCAllocator *allocator);
/* FleetFormation methods */
void   fleet_formation__init
                     (FleetFormation         *message);
size_t fleet_formation__get_packed_size
                     (const FleetFormation   *message);
size_t fleet_formation__pack
                     (const FleetFormation   *message,
                      uint8_t             *out);
size_t fleet_formation__pack_to_buffer
                     (const FleetFormation   *message,
                      ProtobufCBuffer     *buffer);
FleetFormation *
       fleet_formation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fleet_formation__free_unpacked
                     (FleetFormation *message,
                      ProtobufCAllocator *allocator);
/* FleetFormationResult methods */
void   fleet_formation_result__init
                     (FleetFormationResult         *message);
size_t fleet_formation_result__get_packed_size
                     (const FleetFormationResult   *message);
size_t fleet_formation_result__pack
                     (const FleetFormationResult   *message,
                      uint8_t             *out);
size_t fleet_formation_result__pack_to_buffer
                     (const FleetFormationResult   *message,
                      ProtobufCBuffer     *buffer);
FleetFormationResult *
       fleet_formation_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fleet_formation_result__free_unpacked
                     (FleetFormationResult *message,
                      ProtobufCAllocator *allocator);
/* ParkShip methods */
void   park_ship__init
                     (ParkShip         *message);
size_t park_ship__get_packed_size
                     (const ParkShip   *message);
size_t park_ship__pack
                     (const ParkShip   *message,
                      uint8_t             *out);
size_t park_ship__pack_to_buffer
                     (const ParkShip   *message,
                      ProtobufCBuffer     *buffer);
ParkShip *
       park_ship__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   park_ship__free_unpacked
                     (ParkShip *message,
                      ProtobufCAllocator *allocator);
/* ParkShipResult methods */
void   park_ship_result__init
                     (ParkShipResult         *message);
size_t park_ship_result__get_packed_size
                     (const ParkShipResult   *message);
size_t park_ship_result__pack
                     (const ParkShipResult   *message,
                      uint8_t             *out);
size_t park_ship_result__pack_to_buffer
                     (const ParkShipResult   *message,
                      ProtobufCBuffer     *buffer);
ParkShipResult *
       park_ship_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   park_ship_result__free_unpacked
                     (ParkShipResult *message,
                      ProtobufCAllocator *allocator);
/* GetDrawings methods */
void   get_drawings__init
                     (GetDrawings         *message);
size_t get_drawings__get_packed_size
                     (const GetDrawings   *message);
size_t get_drawings__pack
                     (const GetDrawings   *message,
                      uint8_t             *out);
size_t get_drawings__pack_to_buffer
                     (const GetDrawings   *message,
                      ProtobufCBuffer     *buffer);
GetDrawings *
       get_drawings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_drawings__free_unpacked
                     (GetDrawings *message,
                      ProtobufCAllocator *allocator);
/* ItemDefine methods */
void   item_define__init
                     (ItemDefine         *message);
size_t item_define__get_packed_size
                     (const ItemDefine   *message);
size_t item_define__pack
                     (const ItemDefine   *message,
                      uint8_t             *out);
size_t item_define__pack_to_buffer
                     (const ItemDefine   *message,
                      ProtobufCBuffer     *buffer);
ItemDefine *
       item_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   item_define__free_unpacked
                     (ItemDefine *message,
                      ProtobufCAllocator *allocator);
/* PredefinedShip methods */
void   predefined_ship__init
                     (PredefinedShip         *message);
size_t predefined_ship__get_packed_size
                     (const PredefinedShip   *message);
size_t predefined_ship__pack
                     (const PredefinedShip   *message,
                      uint8_t             *out);
size_t predefined_ship__pack_to_buffer
                     (const PredefinedShip   *message,
                      ProtobufCBuffer     *buffer);
PredefinedShip *
       predefined_ship__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   predefined_ship__free_unpacked
                     (PredefinedShip *message,
                      ProtobufCAllocator *allocator);
/* ShipdrawingDefine methods */
void   shipdrawing_define__init
                     (ShipdrawingDefine         *message);
size_t shipdrawing_define__get_packed_size
                     (const ShipdrawingDefine   *message);
size_t shipdrawing_define__pack
                     (const ShipdrawingDefine   *message,
                      uint8_t             *out);
size_t shipdrawing_define__pack_to_buffer
                     (const ShipdrawingDefine   *message,
                      ProtobufCBuffer     *buffer);
ShipdrawingDefine *
       shipdrawing_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   shipdrawing_define__free_unpacked
                     (ShipdrawingDefine *message,
                      ProtobufCAllocator *allocator);
/* EquipdrawingDefine methods */
void   equipdrawing_define__init
                     (EquipdrawingDefine         *message);
size_t equipdrawing_define__get_packed_size
                     (const EquipdrawingDefine   *message);
size_t equipdrawing_define__pack
                     (const EquipdrawingDefine   *message,
                      uint8_t             *out);
size_t equipdrawing_define__pack_to_buffer
                     (const EquipdrawingDefine   *message,
                      ProtobufCBuffer     *buffer);
EquipdrawingDefine *
       equipdrawing_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   equipdrawing_define__free_unpacked
                     (EquipdrawingDefine *message,
                      ProtobufCAllocator *allocator);
/* GetDrawingsResult methods */
void   get_drawings_result__init
                     (GetDrawingsResult         *message);
size_t get_drawings_result__get_packed_size
                     (const GetDrawingsResult   *message);
size_t get_drawings_result__pack
                     (const GetDrawingsResult   *message,
                      uint8_t             *out);
size_t get_drawings_result__pack_to_buffer
                     (const GetDrawingsResult   *message,
                      ProtobufCBuffer     *buffer);
GetDrawingsResult *
       get_drawings_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_drawings_result__free_unpacked
                     (GetDrawingsResult *message,
                      ProtobufCAllocator *allocator);
/* BuildShip methods */
void   build_ship__init
                     (BuildShip         *message);
size_t build_ship__get_packed_size
                     (const BuildShip   *message);
size_t build_ship__pack
                     (const BuildShip   *message,
                      uint8_t             *out);
size_t build_ship__pack_to_buffer
                     (const BuildShip   *message,
                      ProtobufCBuffer     *buffer);
BuildShip *
       build_ship__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   build_ship__free_unpacked
                     (BuildShip *message,
                      ProtobufCAllocator *allocator);
/* BuildShipResult methods */
void   build_ship_result__init
                     (BuildShipResult         *message);
size_t build_ship_result__get_packed_size
                     (const BuildShipResult   *message);
size_t build_ship_result__pack
                     (const BuildShipResult   *message,
                      uint8_t             *out);
size_t build_ship_result__pack_to_buffer
                     (const BuildShipResult   *message,
                      ProtobufCBuffer     *buffer);
BuildShipResult *
       build_ship_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   build_ship_result__free_unpacked
                     (BuildShipResult *message,
                      ProtobufCAllocator *allocator);
/* GetBuildingShips methods */
void   get_building_ships__init
                     (GetBuildingShips         *message);
size_t get_building_ships__get_packed_size
                     (const GetBuildingShips   *message);
size_t get_building_ships__pack
                     (const GetBuildingShips   *message,
                      uint8_t             *out);
size_t get_building_ships__pack_to_buffer
                     (const GetBuildingShips   *message,
                      ProtobufCBuffer     *buffer);
GetBuildingShips *
       get_building_ships__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_building_ships__free_unpacked
                     (GetBuildingShips *message,
                      ProtobufCAllocator *allocator);
/* BuildingShipDefine methods */
void   building_ship_define__init
                     (BuildingShipDefine         *message);
size_t building_ship_define__get_packed_size
                     (const BuildingShipDefine   *message);
size_t building_ship_define__pack
                     (const BuildingShipDefine   *message,
                      uint8_t             *out);
size_t building_ship_define__pack_to_buffer
                     (const BuildingShipDefine   *message,
                      ProtobufCBuffer     *buffer);
BuildingShipDefine *
       building_ship_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   building_ship_define__free_unpacked
                     (BuildingShipDefine *message,
                      ProtobufCAllocator *allocator);
/* GetBuildingShipsResult methods */
void   get_building_ships_result__init
                     (GetBuildingShipsResult         *message);
size_t get_building_ships_result__get_packed_size
                     (const GetBuildingShipsResult   *message);
size_t get_building_ships_result__pack
                     (const GetBuildingShipsResult   *message,
                      uint8_t             *out);
size_t get_building_ships_result__pack_to_buffer
                     (const GetBuildingShipsResult   *message,
                      ProtobufCBuffer     *buffer);
GetBuildingShipsResult *
       get_building_ships_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_building_ships_result__free_unpacked
                     (GetBuildingShipsResult *message,
                      ProtobufCAllocator *allocator);
/* FinishBuilding methods */
void   finish_building__init
                     (FinishBuilding         *message);
size_t finish_building__get_packed_size
                     (const FinishBuilding   *message);
size_t finish_building__pack
                     (const FinishBuilding   *message,
                      uint8_t             *out);
size_t finish_building__pack_to_buffer
                     (const FinishBuilding   *message,
                      ProtobufCBuffer     *buffer);
FinishBuilding *
       finish_building__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   finish_building__free_unpacked
                     (FinishBuilding *message,
                      ProtobufCAllocator *allocator);
/* FinishBuildingResult methods */
void   finish_building_result__init
                     (FinishBuildingResult         *message);
size_t finish_building_result__get_packed_size
                     (const FinishBuildingResult   *message);
size_t finish_building_result__pack
                     (const FinishBuildingResult   *message,
                      uint8_t             *out);
size_t finish_building_result__pack_to_buffer
                     (const FinishBuildingResult   *message,
                      ProtobufCBuffer     *buffer);
FinishBuildingResult *
       finish_building_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   finish_building_result__free_unpacked
                     (FinishBuildingResult *message,
                      ProtobufCAllocator *allocator);
/* GetBuildingEquipment methods */
void   get_building_equipment__init
                     (GetBuildingEquipment         *message);
size_t get_building_equipment__get_packed_size
                     (const GetBuildingEquipment   *message);
size_t get_building_equipment__pack
                     (const GetBuildingEquipment   *message,
                      uint8_t             *out);
size_t get_building_equipment__pack_to_buffer
                     (const GetBuildingEquipment   *message,
                      ProtobufCBuffer     *buffer);
GetBuildingEquipment *
       get_building_equipment__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_building_equipment__free_unpacked
                     (GetBuildingEquipment *message,
                      ProtobufCAllocator *allocator);
/* BuildingEquipmentDefine methods */
void   building_equipment_define__init
                     (BuildingEquipmentDefine         *message);
size_t building_equipment_define__get_packed_size
                     (const BuildingEquipmentDefine   *message);
size_t building_equipment_define__pack
                     (const BuildingEquipmentDefine   *message,
                      uint8_t             *out);
size_t building_equipment_define__pack_to_buffer
                     (const BuildingEquipmentDefine   *message,
                      ProtobufCBuffer     *buffer);
BuildingEquipmentDefine *
       building_equipment_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   building_equipment_define__free_unpacked
                     (BuildingEquipmentDefine *message,
                      ProtobufCAllocator *allocator);
/* GetBuildingEquipmentResult methods */
void   get_building_equipment_result__init
                     (GetBuildingEquipmentResult         *message);
size_t get_building_equipment_result__get_packed_size
                     (const GetBuildingEquipmentResult   *message);
size_t get_building_equipment_result__pack
                     (const GetBuildingEquipmentResult   *message,
                      uint8_t             *out);
size_t get_building_equipment_result__pack_to_buffer
                     (const GetBuildingEquipmentResult   *message,
                      ProtobufCBuffer     *buffer);
GetBuildingEquipmentResult *
       get_building_equipment_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_building_equipment_result__free_unpacked
                     (GetBuildingEquipmentResult *message,
                      ProtobufCAllocator *allocator);
/* CancelBuild methods */
void   cancel_build__init
                     (CancelBuild         *message);
size_t cancel_build__get_packed_size
                     (const CancelBuild   *message);
size_t cancel_build__pack
                     (const CancelBuild   *message,
                      uint8_t             *out);
size_t cancel_build__pack_to_buffer
                     (const CancelBuild   *message,
                      ProtobufCBuffer     *buffer);
CancelBuild *
       cancel_build__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cancel_build__free_unpacked
                     (CancelBuild *message,
                      ProtobufCAllocator *allocator);
/* CancelBuildResult methods */
void   cancel_build_result__init
                     (CancelBuildResult         *message);
size_t cancel_build_result__get_packed_size
                     (const CancelBuildResult   *message);
size_t cancel_build_result__pack
                     (const CancelBuildResult   *message,
                      uint8_t             *out);
size_t cancel_build_result__pack_to_buffer
                     (const CancelBuildResult   *message,
                      ProtobufCBuffer     *buffer);
CancelBuildResult *
       cancel_build_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cancel_build_result__free_unpacked
                     (CancelBuildResult *message,
                      ProtobufCAllocator *allocator);
/* CaptainDefine methods */
void   captain_define__init
                     (CaptainDefine         *message);
size_t captain_define__get_packed_size
                     (const CaptainDefine   *message);
size_t captain_define__pack
                     (const CaptainDefine   *message,
                      uint8_t             *out);
size_t captain_define__pack_to_buffer
                     (const CaptainDefine   *message,
                      ProtobufCBuffer     *buffer);
CaptainDefine *
       captain_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   captain_define__free_unpacked
                     (CaptainDefine *message,
                      ProtobufCAllocator *allocator);
/* GetFleetAndDockShips methods */
void   get_fleet_and_dock_ships__init
                     (GetFleetAndDockShips         *message);
size_t get_fleet_and_dock_ships__get_packed_size
                     (const GetFleetAndDockShips   *message);
size_t get_fleet_and_dock_ships__pack
                     (const GetFleetAndDockShips   *message,
                      uint8_t             *out);
size_t get_fleet_and_dock_ships__pack_to_buffer
                     (const GetFleetAndDockShips   *message,
                      ProtobufCBuffer     *buffer);
GetFleetAndDockShips *
       get_fleet_and_dock_ships__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_fleet_and_dock_ships__free_unpacked
                     (GetFleetAndDockShips *message,
                      ProtobufCAllocator *allocator);
/* GetFleetAndDockShipsResult methods */
void   get_fleet_and_dock_ships_result__init
                     (GetFleetAndDockShipsResult         *message);
size_t get_fleet_and_dock_ships_result__get_packed_size
                     (const GetFleetAndDockShipsResult   *message);
size_t get_fleet_and_dock_ships_result__pack
                     (const GetFleetAndDockShipsResult   *message,
                      uint8_t             *out);
size_t get_fleet_and_dock_ships_result__pack_to_buffer
                     (const GetFleetAndDockShipsResult   *message,
                      ProtobufCBuffer     *buffer);
GetFleetAndDockShipsResult *
       get_fleet_and_dock_ships_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_fleet_and_dock_ships_result__free_unpacked
                     (GetFleetAndDockShipsResult *message,
                      ProtobufCAllocator *allocator);
/* GetReinforceShipList methods */
void   get_reinforce_ship_list__init
                     (GetReinforceShipList         *message);
size_t get_reinforce_ship_list__get_packed_size
                     (const GetReinforceShipList   *message);
size_t get_reinforce_ship_list__pack
                     (const GetReinforceShipList   *message,
                      uint8_t             *out);
size_t get_reinforce_ship_list__pack_to_buffer
                     (const GetReinforceShipList   *message,
                      ProtobufCBuffer     *buffer);
GetReinforceShipList *
       get_reinforce_ship_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_reinforce_ship_list__free_unpacked
                     (GetReinforceShipList *message,
                      ProtobufCAllocator *allocator);
/* ReinforceShipDefine methods */
void   reinforce_ship_define__init
                     (ReinforceShipDefine         *message);
size_t reinforce_ship_define__get_packed_size
                     (const ReinforceShipDefine   *message);
size_t reinforce_ship_define__pack
                     (const ReinforceShipDefine   *message,
                      uint8_t             *out);
size_t reinforce_ship_define__pack_to_buffer
                     (const ReinforceShipDefine   *message,
                      ProtobufCBuffer     *buffer);
ReinforceShipDefine *
       reinforce_ship_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reinforce_ship_define__free_unpacked
                     (ReinforceShipDefine *message,
                      ProtobufCAllocator *allocator);
/* GetReinforceShipListResult methods */
void   get_reinforce_ship_list_result__init
                     (GetReinforceShipListResult         *message);
size_t get_reinforce_ship_list_result__get_packed_size
                     (const GetReinforceShipListResult   *message);
size_t get_reinforce_ship_list_result__pack
                     (const GetReinforceShipListResult   *message,
                      uint8_t             *out);
size_t get_reinforce_ship_list_result__pack_to_buffer
                     (const GetReinforceShipListResult   *message,
                      ProtobufCBuffer     *buffer);
GetReinforceShipListResult *
       get_reinforce_ship_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_reinforce_ship_list_result__free_unpacked
                     (GetReinforceShipListResult *message,
                      ProtobufCAllocator *allocator);
/* ReinforceShip methods */
void   reinforce_ship__init
                     (ReinforceShip         *message);
size_t reinforce_ship__get_packed_size
                     (const ReinforceShip   *message);
size_t reinforce_ship__pack
                     (const ReinforceShip   *message,
                      uint8_t             *out);
size_t reinforce_ship__pack_to_buffer
                     (const ReinforceShip   *message,
                      ProtobufCBuffer     *buffer);
ReinforceShip *
       reinforce_ship__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reinforce_ship__free_unpacked
                     (ReinforceShip *message,
                      ProtobufCAllocator *allocator);
/* ReinforceShipResult methods */
void   reinforce_ship_result__init
                     (ReinforceShipResult         *message);
size_t reinforce_ship_result__get_packed_size
                     (const ReinforceShipResult   *message);
size_t reinforce_ship_result__pack
                     (const ReinforceShipResult   *message,
                      uint8_t             *out);
size_t reinforce_ship_result__pack_to_buffer
                     (const ReinforceShipResult   *message,
                      ProtobufCBuffer     *buffer);
ReinforceShipResult *
       reinforce_ship_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reinforce_ship_result__free_unpacked
                     (ReinforceShipResult *message,
                      ProtobufCAllocator *allocator);
/* RerollShip methods */
void   reroll_ship__init
                     (RerollShip         *message);
size_t reroll_ship__get_packed_size
                     (const RerollShip   *message);
size_t reroll_ship__pack
                     (const RerollShip   *message,
                      uint8_t             *out);
size_t reroll_ship__pack_to_buffer
                     (const RerollShip   *message,
                      ProtobufCBuffer     *buffer);
RerollShip *
       reroll_ship__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reroll_ship__free_unpacked
                     (RerollShip *message,
                      ProtobufCAllocator *allocator);
/* RerollShipResult methods */
void   reroll_ship_result__init
                     (RerollShipResult         *message);
size_t reroll_ship_result__get_packed_size
                     (const RerollShipResult   *message);
size_t reroll_ship_result__pack
                     (const RerollShipResult   *message,
                      uint8_t             *out);
size_t reroll_ship_result__pack_to_buffer
                     (const RerollShipResult   *message,
                      ProtobufCBuffer     *buffer);
RerollShipResult *
       reroll_ship_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reroll_ship_result__free_unpacked
                     (RerollShipResult *message,
                      ProtobufCAllocator *allocator);
/* GetReinforceEquipList methods */
void   get_reinforce_equip_list__init
                     (GetReinforceEquipList         *message);
size_t get_reinforce_equip_list__get_packed_size
                     (const GetReinforceEquipList   *message);
size_t get_reinforce_equip_list__pack
                     (const GetReinforceEquipList   *message,
                      uint8_t             *out);
size_t get_reinforce_equip_list__pack_to_buffer
                     (const GetReinforceEquipList   *message,
                      ProtobufCBuffer     *buffer);
GetReinforceEquipList *
       get_reinforce_equip_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_reinforce_equip_list__free_unpacked
                     (GetReinforceEquipList *message,
                      ProtobufCAllocator *allocator);
/* ReinforceEquipDefine methods */
void   reinforce_equip_define__init
                     (ReinforceEquipDefine         *message);
size_t reinforce_equip_define__get_packed_size
                     (const ReinforceEquipDefine   *message);
size_t reinforce_equip_define__pack
                     (const ReinforceEquipDefine   *message,
                      uint8_t             *out);
size_t reinforce_equip_define__pack_to_buffer
                     (const ReinforceEquipDefine   *message,
                      ProtobufCBuffer     *buffer);
ReinforceEquipDefine *
       reinforce_equip_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reinforce_equip_define__free_unpacked
                     (ReinforceEquipDefine *message,
                      ProtobufCAllocator *allocator);
/* GetReinforceEquipListResult methods */
void   get_reinforce_equip_list_result__init
                     (GetReinforceEquipListResult         *message);
size_t get_reinforce_equip_list_result__get_packed_size
                     (const GetReinforceEquipListResult   *message);
size_t get_reinforce_equip_list_result__pack
                     (const GetReinforceEquipListResult   *message,
                      uint8_t             *out);
size_t get_reinforce_equip_list_result__pack_to_buffer
                     (const GetReinforceEquipListResult   *message,
                      ProtobufCBuffer     *buffer);
GetReinforceEquipListResult *
       get_reinforce_equip_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_reinforce_equip_list_result__free_unpacked
                     (GetReinforceEquipListResult *message,
                      ProtobufCAllocator *allocator);
/* ReinforceEquip methods */
void   reinforce_equip__init
                     (ReinforceEquip         *message);
size_t reinforce_equip__get_packed_size
                     (const ReinforceEquip   *message);
size_t reinforce_equip__pack
                     (const ReinforceEquip   *message,
                      uint8_t             *out);
size_t reinforce_equip__pack_to_buffer
                     (const ReinforceEquip   *message,
                      ProtobufCBuffer     *buffer);
ReinforceEquip *
       reinforce_equip__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reinforce_equip__free_unpacked
                     (ReinforceEquip *message,
                      ProtobufCAllocator *allocator);
/* ReinforceEquipResult methods */
void   reinforce_equip_result__init
                     (ReinforceEquipResult         *message);
size_t reinforce_equip_result__get_packed_size
                     (const ReinforceEquipResult   *message);
size_t reinforce_equip_result__pack
                     (const ReinforceEquipResult   *message,
                      uint8_t             *out);
size_t reinforce_equip_result__pack_to_buffer
                     (const ReinforceEquipResult   *message,
                      ProtobufCBuffer     *buffer);
ReinforceEquipResult *
       reinforce_equip_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reinforce_equip_result__free_unpacked
                     (ReinforceEquipResult *message,
                      ProtobufCAllocator *allocator);
/* RerollEquip methods */
void   reroll_equip__init
                     (RerollEquip         *message);
size_t reroll_equip__get_packed_size
                     (const RerollEquip   *message);
size_t reroll_equip__pack
                     (const RerollEquip   *message,
                      uint8_t             *out);
size_t reroll_equip__pack_to_buffer
                     (const RerollEquip   *message,
                      ProtobufCBuffer     *buffer);
RerollEquip *
       reroll_equip__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reroll_equip__free_unpacked
                     (RerollEquip *message,
                      ProtobufCAllocator *allocator);
/* RerollEquipResult methods */
void   reroll_equip_result__init
                     (RerollEquipResult         *message);
size_t reroll_equip_result__get_packed_size
                     (const RerollEquipResult   *message);
size_t reroll_equip_result__pack
                     (const RerollEquipResult   *message,
                      uint8_t             *out);
size_t reroll_equip_result__pack_to_buffer
                     (const RerollEquipResult   *message,
                      ProtobufCBuffer     *buffer);
RerollEquipResult *
       reroll_equip_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reroll_equip_result__free_unpacked
                     (RerollEquipResult *message,
                      ProtobufCAllocator *allocator);
/* EquipShip methods */
void   equip_ship__init
                     (EquipShip         *message);
size_t equip_ship__get_packed_size
                     (const EquipShip   *message);
size_t equip_ship__pack
                     (const EquipShip   *message,
                      uint8_t             *out);
size_t equip_ship__pack_to_buffer
                     (const EquipShip   *message,
                      ProtobufCBuffer     *buffer);
EquipShip *
       equip_ship__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   equip_ship__free_unpacked
                     (EquipShip *message,
                      ProtobufCAllocator *allocator);
/* EquipShipResult methods */
void   equip_ship_result__init
                     (EquipShipResult         *message);
size_t equip_ship_result__get_packed_size
                     (const EquipShipResult   *message);
size_t equip_ship_result__pack
                     (const EquipShipResult   *message,
                      uint8_t             *out);
size_t equip_ship_result__pack_to_buffer
                     (const EquipShipResult   *message,
                      ProtobufCBuffer     *buffer);
EquipShipResult *
       equip_ship_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   equip_ship_result__free_unpacked
                     (EquipShipResult *message,
                      ProtobufCAllocator *allocator);
/* GetEquipShipInfo methods */
void   get_equip_ship_info__init
                     (GetEquipShipInfo         *message);
size_t get_equip_ship_info__get_packed_size
                     (const GetEquipShipInfo   *message);
size_t get_equip_ship_info__pack
                     (const GetEquipShipInfo   *message,
                      uint8_t             *out);
size_t get_equip_ship_info__pack_to_buffer
                     (const GetEquipShipInfo   *message,
                      ProtobufCBuffer     *buffer);
GetEquipShipInfo *
       get_equip_ship_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_equip_ship_info__free_unpacked
                     (GetEquipShipInfo *message,
                      ProtobufCAllocator *allocator);
/* EquipDetailInfo methods */
void   equip_detail_info__init
                     (EquipDetailInfo         *message);
size_t equip_detail_info__get_packed_size
                     (const EquipDetailInfo   *message);
size_t equip_detail_info__pack
                     (const EquipDetailInfo   *message,
                      uint8_t             *out);
size_t equip_detail_info__pack_to_buffer
                     (const EquipDetailInfo   *message,
                      ProtobufCBuffer     *buffer);
EquipDetailInfo *
       equip_detail_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   equip_detail_info__free_unpacked
                     (EquipDetailInfo *message,
                      ProtobufCAllocator *allocator);
/* EquipShipInfo methods */
void   equip_ship_info__init
                     (EquipShipInfo         *message);
size_t equip_ship_info__get_packed_size
                     (const EquipShipInfo   *message);
size_t equip_ship_info__pack
                     (const EquipShipInfo   *message,
                      uint8_t             *out);
size_t equip_ship_info__pack_to_buffer
                     (const EquipShipInfo   *message,
                      ProtobufCBuffer     *buffer);
EquipShipInfo *
       equip_ship_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   equip_ship_info__free_unpacked
                     (EquipShipInfo *message,
                      ProtobufCAllocator *allocator);
/* GetEquipShipInfoResult methods */
void   get_equip_ship_info_result__init
                     (GetEquipShipInfoResult         *message);
size_t get_equip_ship_info_result__get_packed_size
                     (const GetEquipShipInfoResult   *message);
size_t get_equip_ship_info_result__pack
                     (const GetEquipShipInfoResult   *message,
                      uint8_t             *out);
size_t get_equip_ship_info_result__pack_to_buffer
                     (const GetEquipShipInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetEquipShipInfoResult *
       get_equip_ship_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_equip_ship_info_result__free_unpacked
                     (GetEquipShipInfoResult *message,
                      ProtobufCAllocator *allocator);
/* GetEquipableItems methods */
void   get_equipable_items__init
                     (GetEquipableItems         *message);
size_t get_equipable_items__get_packed_size
                     (const GetEquipableItems   *message);
size_t get_equipable_items__pack
                     (const GetEquipableItems   *message,
                      uint8_t             *out);
size_t get_equipable_items__pack_to_buffer
                     (const GetEquipableItems   *message,
                      ProtobufCBuffer     *buffer);
GetEquipableItems *
       get_equipable_items__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_equipable_items__free_unpacked
                     (GetEquipableItems *message,
                      ProtobufCAllocator *allocator);
/* EquipableItem methods */
void   equipable_item__init
                     (EquipableItem         *message);
size_t equipable_item__get_packed_size
                     (const EquipableItem   *message);
size_t equipable_item__pack
                     (const EquipableItem   *message,
                      uint8_t             *out);
size_t equipable_item__pack_to_buffer
                     (const EquipableItem   *message,
                      ProtobufCBuffer     *buffer);
EquipableItem *
       equipable_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   equipable_item__free_unpacked
                     (EquipableItem *message,
                      ProtobufCAllocator *allocator);
/* GetEquipableItemsResult methods */
void   get_equipable_items_result__init
                     (GetEquipableItemsResult         *message);
size_t get_equipable_items_result__get_packed_size
                     (const GetEquipableItemsResult   *message);
size_t get_equipable_items_result__pack
                     (const GetEquipableItemsResult   *message,
                      uint8_t             *out);
size_t get_equipable_items_result__pack_to_buffer
                     (const GetEquipableItemsResult   *message,
                      ProtobufCBuffer     *buffer);
GetEquipableItemsResult *
       get_equipable_items_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_equipable_items_result__free_unpacked
                     (GetEquipableItemsResult *message,
                      ProtobufCAllocator *allocator);
/* GetVisitedCities methods */
void   get_visited_cities__init
                     (GetVisitedCities         *message);
size_t get_visited_cities__get_packed_size
                     (const GetVisitedCities   *message);
size_t get_visited_cities__pack
                     (const GetVisitedCities   *message,
                      uint8_t             *out);
size_t get_visited_cities__pack_to_buffer
                     (const GetVisitedCities   *message,
                      ProtobufCBuffer     *buffer);
GetVisitedCities *
       get_visited_cities__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_visited_cities__free_unpacked
                     (GetVisitedCities *message,
                      ProtobufCAllocator *allocator);
/* CityDefine methods */
void   city_define__init
                     (CityDefine         *message);
size_t city_define__get_packed_size
                     (const CityDefine   *message);
size_t city_define__pack
                     (const CityDefine   *message,
                      uint8_t             *out);
size_t city_define__pack_to_buffer
                     (const CityDefine   *message,
                      ProtobufCBuffer     *buffer);
CityDefine *
       city_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   city_define__free_unpacked
                     (CityDefine *message,
                      ProtobufCAllocator *allocator);
/* CityInfo methods */
void   city_info__init
                     (CityInfo         *message);
size_t city_info__get_packed_size
                     (const CityInfo   *message);
size_t city_info__pack
                     (const CityInfo   *message,
                      uint8_t             *out);
size_t city_info__pack_to_buffer
                     (const CityInfo   *message,
                      ProtobufCBuffer     *buffer);
CityInfo *
       city_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   city_info__free_unpacked
                     (CityInfo *message,
                      ProtobufCAllocator *allocator);
/* GetVisitedCitiesResult methods */
void   get_visited_cities_result__init
                     (GetVisitedCitiesResult         *message);
size_t get_visited_cities_result__get_packed_size
                     (const GetVisitedCitiesResult   *message);
size_t get_visited_cities_result__pack
                     (const GetVisitedCitiesResult   *message,
                      uint8_t             *out);
size_t get_visited_cities_result__pack_to_buffer
                     (const GetVisitedCitiesResult   *message,
                      ProtobufCBuffer     *buffer);
GetVisitedCitiesResult *
       get_visited_cities_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_visited_cities_result__free_unpacked
                     (GetVisitedCitiesResult *message,
                      ProtobufCAllocator *allocator);
/* AddSupply methods */
void   add_supply__init
                     (AddSupply         *message);
size_t add_supply__get_packed_size
                     (const AddSupply   *message);
size_t add_supply__pack
                     (const AddSupply   *message,
                      uint8_t             *out);
size_t add_supply__pack_to_buffer
                     (const AddSupply   *message,
                      ProtobufCBuffer     *buffer);
AddSupply *
       add_supply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_supply__free_unpacked
                     (AddSupply *message,
                      ProtobufCAllocator *allocator);
/* AddSupplyResult methods */
void   add_supply_result__init
                     (AddSupplyResult         *message);
size_t add_supply_result__get_packed_size
                     (const AddSupplyResult   *message);
size_t add_supply_result__pack
                     (const AddSupplyResult   *message,
                      uint8_t             *out);
size_t add_supply_result__pack_to_buffer
                     (const AddSupplyResult   *message,
                      ProtobufCBuffer     *buffer);
AddSupplyResult *
       add_supply_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_supply_result__free_unpacked
                     (AddSupplyResult *message,
                      ProtobufCAllocator *allocator);
/* ShipPoint methods */
void   ship_point__init
                     (ShipPoint         *message);
size_t ship_point__get_packed_size
                     (const ShipPoint   *message);
size_t ship_point__pack
                     (const ShipPoint   *message,
                      uint8_t             *out);
size_t ship_point__pack_to_buffer
                     (const ShipPoint   *message,
                      ProtobufCBuffer     *buffer);
ShipPoint *
       ship_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ship_point__free_unpacked
                     (ShipPoint *message,
                      ProtobufCAllocator *allocator);
/* ShipRoutine methods */
void   ship_routine__init
                     (ShipRoutine         *message);
size_t ship_routine__get_packed_size
                     (const ShipRoutine   *message);
size_t ship_routine__pack
                     (const ShipRoutine   *message,
                      uint8_t             *out);
size_t ship_routine__pack_to_buffer
                     (const ShipRoutine   *message,
                      ProtobufCBuffer     *buffer);
ShipRoutine *
       ship_routine__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ship_routine__free_unpacked
                     (ShipRoutine *message,
                      ProtobufCAllocator *allocator);
/* GetNextMapBlock methods */
void   get_next_map_block__init
                     (GetNextMapBlock         *message);
size_t get_next_map_block__get_packed_size
                     (const GetNextMapBlock   *message);
size_t get_next_map_block__pack
                     (const GetNextMapBlock   *message,
                      uint8_t             *out);
size_t get_next_map_block__pack_to_buffer
                     (const GetNextMapBlock   *message,
                      ProtobufCBuffer     *buffer);
GetNextMapBlock *
       get_next_map_block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_next_map_block__free_unpacked
                     (GetNextMapBlock *message,
                      ProtobufCAllocator *allocator);
/* NearbyPlayer methods */
void   nearby_player__init
                     (NearbyPlayer         *message);
size_t nearby_player__get_packed_size
                     (const NearbyPlayer   *message);
size_t nearby_player__pack
                     (const NearbyPlayer   *message,
                      uint8_t             *out);
size_t nearby_player__pack_to_buffer
                     (const NearbyPlayer   *message,
                      ProtobufCBuffer     *buffer);
NearbyPlayer *
       nearby_player__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nearby_player__free_unpacked
                     (NearbyPlayer *message,
                      ProtobufCAllocator *allocator);
/* GetNextMapBlockShipInfo methods */
void   get_next_map_block_ship_info__init
                     (GetNextMapBlockShipInfo         *message);
size_t get_next_map_block_ship_info__get_packed_size
                     (const GetNextMapBlockShipInfo   *message);
size_t get_next_map_block_ship_info__pack
                     (const GetNextMapBlockShipInfo   *message,
                      uint8_t             *out);
size_t get_next_map_block_ship_info__pack_to_buffer
                     (const GetNextMapBlockShipInfo   *message,
                      ProtobufCBuffer     *buffer);
GetNextMapBlockShipInfo *
       get_next_map_block_ship_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_next_map_block_ship_info__free_unpacked
                     (GetNextMapBlockShipInfo *message,
                      ProtobufCAllocator *allocator);
/* GetNextMapBlockResult methods */
void   get_next_map_block_result__init
                     (GetNextMapBlockResult         *message);
size_t get_next_map_block_result__get_packed_size
                     (const GetNextMapBlockResult   *message);
size_t get_next_map_block_result__pack
                     (const GetNextMapBlockResult   *message,
                      uint8_t             *out);
size_t get_next_map_block_result__pack_to_buffer
                     (const GetNextMapBlockResult   *message,
                      ProtobufCBuffer     *buffer);
GetNextMapBlockResult *
       get_next_map_block_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_next_map_block_result__free_unpacked
                     (GetNextMapBlockResult *message,
                      ProtobufCAllocator *allocator);
/* ShipBowIconInfo methods */
void   ship_bow_icon_info__init
                     (ShipBowIconInfo         *message);
size_t ship_bow_icon_info__get_packed_size
                     (const ShipBowIconInfo   *message);
size_t ship_bow_icon_info__pack
                     (const ShipBowIconInfo   *message,
                      uint8_t             *out);
size_t ship_bow_icon_info__pack_to_buffer
                     (const ShipBowIconInfo   *message,
                      ProtobufCBuffer     *buffer);
ShipBowIconInfo *
       ship_bow_icon_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ship_bow_icon_info__free_unpacked
                     (ShipBowIconInfo *message,
                      ProtobufCAllocator *allocator);
/* LeaveCity methods */
void   leave_city__init
                     (LeaveCity         *message);
size_t leave_city__get_packed_size
                     (const LeaveCity   *message);
size_t leave_city__pack
                     (const LeaveCity   *message,
                      uint8_t             *out);
size_t leave_city__pack_to_buffer
                     (const LeaveCity   *message,
                      ProtobufCBuffer     *buffer);
LeaveCity *
       leave_city__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   leave_city__free_unpacked
                     (LeaveCity *message,
                      ProtobufCAllocator *allocator);
/* LeaveCityResult methods */
void   leave_city_result__init
                     (LeaveCityResult         *message);
size_t leave_city_result__get_packed_size
                     (const LeaveCityResult   *message);
size_t leave_city_result__pack
                     (const LeaveCityResult   *message,
                      uint8_t             *out);
size_t leave_city_result__pack_to_buffer
                     (const LeaveCityResult   *message,
                      ProtobufCBuffer     *buffer);
LeaveCityResult *
       leave_city_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   leave_city_result__free_unpacked
                     (LeaveCityResult *message,
                      ProtobufCAllocator *allocator);
/* ReachCity methods */
void   reach_city__init
                     (ReachCity         *message);
size_t reach_city__get_packed_size
                     (const ReachCity   *message);
size_t reach_city__pack
                     (const ReachCity   *message,
                      uint8_t             *out);
size_t reach_city__pack_to_buffer
                     (const ReachCity   *message,
                      ProtobufCBuffer     *buffer);
ReachCity *
       reach_city__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reach_city__free_unpacked
                     (ReachCity *message,
                      ProtobufCAllocator *allocator);
/* ReachCityResult methods */
void   reach_city_result__init
                     (ReachCityResult         *message);
size_t reach_city_result__get_packed_size
                     (const ReachCityResult   *message);
size_t reach_city_result__pack
                     (const ReachCityResult   *message,
                      uint8_t             *out);
size_t reach_city_result__pack_to_buffer
                     (const ReachCityResult   *message,
                      ProtobufCBuffer     *buffer);
ReachCityResult *
       reach_city_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reach_city_result__free_unpacked
                     (ReachCityResult *message,
                      ProtobufCAllocator *allocator);
/* TriggerSeaEvent methods */
void   trigger_sea_event__init
                     (TriggerSeaEvent         *message);
size_t trigger_sea_event__get_packed_size
                     (const TriggerSeaEvent   *message);
size_t trigger_sea_event__pack
                     (const TriggerSeaEvent   *message,
                      uint8_t             *out);
size_t trigger_sea_event__pack_to_buffer
                     (const TriggerSeaEvent   *message,
                      ProtobufCBuffer     *buffer);
TriggerSeaEvent *
       trigger_sea_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trigger_sea_event__free_unpacked
                     (TriggerSeaEvent *message,
                      ProtobufCAllocator *allocator);
/* SeaEventLootDefine methods */
void   sea_event_loot_define__init
                     (SeaEventLootDefine         *message);
size_t sea_event_loot_define__get_packed_size
                     (const SeaEventLootDefine   *message);
size_t sea_event_loot_define__pack
                     (const SeaEventLootDefine   *message,
                      uint8_t             *out);
size_t sea_event_loot_define__pack_to_buffer
                     (const SeaEventLootDefine   *message,
                      ProtobufCBuffer     *buffer);
SeaEventLootDefine *
       sea_event_loot_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sea_event_loot_define__free_unpacked
                     (SeaEventLootDefine *message,
                      ProtobufCAllocator *allocator);
/* SeaEventShipStatus methods */
void   sea_event_ship_status__init
                     (SeaEventShipStatus         *message);
size_t sea_event_ship_status__get_packed_size
                     (const SeaEventShipStatus   *message);
size_t sea_event_ship_status__pack
                     (const SeaEventShipStatus   *message,
                      uint8_t             *out);
size_t sea_event_ship_status__pack_to_buffer
                     (const SeaEventShipStatus   *message,
                      ProtobufCBuffer     *buffer);
SeaEventShipStatus *
       sea_event_ship_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sea_event_ship_status__free_unpacked
                     (SeaEventShipStatus *message,
                      ProtobufCAllocator *allocator);
/* SeaEventLossDefine methods */
void   sea_event_loss_define__init
                     (SeaEventLossDefine         *message);
size_t sea_event_loss_define__get_packed_size
                     (const SeaEventLossDefine   *message);
size_t sea_event_loss_define__pack
                     (const SeaEventLossDefine   *message,
                      uint8_t             *out);
size_t sea_event_loss_define__pack_to_buffer
                     (const SeaEventLossDefine   *message,
                      ProtobufCBuffer     *buffer);
SeaEventLossDefine *
       sea_event_loss_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sea_event_loss_define__free_unpacked
                     (SeaEventLossDefine *message,
                      ProtobufCAllocator *allocator);
/* ShipEquipInfo methods */
void   ship_equip_info__init
                     (ShipEquipInfo         *message);
size_t ship_equip_info__get_packed_size
                     (const ShipEquipInfo   *message);
size_t ship_equip_info__pack
                     (const ShipEquipInfo   *message,
                      uint8_t             *out);
size_t ship_equip_info__pack_to_buffer
                     (const ShipEquipInfo   *message,
                      ProtobufCBuffer     *buffer);
ShipEquipInfo *
       ship_equip_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ship_equip_info__free_unpacked
                     (ShipEquipInfo *message,
                      ProtobufCAllocator *allocator);
/* ShipEquipArray methods */
void   ship_equip_array__init
                     (ShipEquipArray         *message);
size_t ship_equip_array__get_packed_size
                     (const ShipEquipArray   *message);
size_t ship_equip_array__pack
                     (const ShipEquipArray   *message,
                      uint8_t             *out);
size_t ship_equip_array__pack_to_buffer
                     (const ShipEquipArray   *message,
                      ProtobufCBuffer     *buffer);
ShipEquipArray *
       ship_equip_array__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ship_equip_array__free_unpacked
                     (ShipEquipArray *message,
                      ProtobufCAllocator *allocator);
/* OutOfDurableItemDefine methods */
void   out_of_durable_item_define__init
                     (OutOfDurableItemDefine         *message);
size_t out_of_durable_item_define__get_packed_size
                     (const OutOfDurableItemDefine   *message);
size_t out_of_durable_item_define__pack
                     (const OutOfDurableItemDefine   *message,
                      uint8_t             *out);
size_t out_of_durable_item_define__pack_to_buffer
                     (const OutOfDurableItemDefine   *message,
                      ProtobufCBuffer     *buffer);
OutOfDurableItemDefine *
       out_of_durable_item_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   out_of_durable_item_define__free_unpacked
                     (OutOfDurableItemDefine *message,
                      ProtobufCAllocator *allocator);
/* TriggerSeaEventResult methods */
void   trigger_sea_event_result__init
                     (TriggerSeaEventResult         *message);
size_t trigger_sea_event_result__get_packed_size
                     (const TriggerSeaEventResult   *message);
size_t trigger_sea_event_result__pack
                     (const TriggerSeaEventResult   *message,
                      uint8_t             *out);
size_t trigger_sea_event_result__pack_to_buffer
                     (const TriggerSeaEventResult   *message,
                      ProtobufCBuffer     *buffer);
TriggerSeaEventResult *
       trigger_sea_event_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trigger_sea_event_result__free_unpacked
                     (TriggerSeaEventResult *message,
                      ProtobufCAllocator *allocator);
/* FinishSeaEvent methods */
void   finish_sea_event__init
                     (FinishSeaEvent         *message);
size_t finish_sea_event__get_packed_size
                     (const FinishSeaEvent   *message);
size_t finish_sea_event__pack
                     (const FinishSeaEvent   *message,
                      uint8_t             *out);
size_t finish_sea_event__pack_to_buffer
                     (const FinishSeaEvent   *message,
                      ProtobufCBuffer     *buffer);
FinishSeaEvent *
       finish_sea_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   finish_sea_event__free_unpacked
                     (FinishSeaEvent *message,
                      ProtobufCAllocator *allocator);
/* FinishSeaEventResult methods */
void   finish_sea_event_result__init
                     (FinishSeaEventResult         *message);
size_t finish_sea_event_result__get_packed_size
                     (const FinishSeaEventResult   *message);
size_t finish_sea_event_result__pack
                     (const FinishSeaEventResult   *message,
                      uint8_t             *out);
size_t finish_sea_event_result__pack_to_buffer
                     (const FinishSeaEventResult   *message,
                      ProtobufCBuffer     *buffer);
FinishSeaEventResult *
       finish_sea_event_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   finish_sea_event_result__free_unpacked
                     (FinishSeaEventResult *message,
                      ProtobufCAllocator *allocator);
/* GetPalaceInfo methods */
void   get_palace_info__init
                     (GetPalaceInfo         *message);
size_t get_palace_info__get_packed_size
                     (const GetPalaceInfo   *message);
size_t get_palace_info__pack
                     (const GetPalaceInfo   *message,
                      uint8_t             *out);
size_t get_palace_info__pack_to_buffer
                     (const GetPalaceInfo   *message,
                      ProtobufCBuffer     *buffer);
GetPalaceInfo *
       get_palace_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_palace_info__free_unpacked
                     (GetPalaceInfo *message,
                      ProtobufCAllocator *allocator);
/* GetPalaceInfoResult methods */
void   get_palace_info_result__init
                     (GetPalaceInfoResult         *message);
size_t get_palace_info_result__get_packed_size
                     (const GetPalaceInfoResult   *message);
size_t get_palace_info_result__pack
                     (const GetPalaceInfoResult   *message,
                      uint8_t             *out);
size_t get_palace_info_result__pack_to_buffer
                     (const GetPalaceInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetPalaceInfoResult *
       get_palace_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_palace_info_result__free_unpacked
                     (GetPalaceInfoResult *message,
                      ProtobufCAllocator *allocator);
/* InvestCity methods */
void   invest_city__init
                     (InvestCity         *message);
size_t invest_city__get_packed_size
                     (const InvestCity   *message);
size_t invest_city__pack
                     (const InvestCity   *message,
                      uint8_t             *out);
size_t invest_city__pack_to_buffer
                     (const InvestCity   *message,
                      ProtobufCBuffer     *buffer);
InvestCity *
       invest_city__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   invest_city__free_unpacked
                     (InvestCity *message,
                      ProtobufCAllocator *allocator);
/* InvestCityResult methods */
void   invest_city_result__init
                     (InvestCityResult         *message);
size_t invest_city_result__get_packed_size
                     (const InvestCityResult   *message);
size_t invest_city_result__pack
                     (const InvestCityResult   *message,
                      uint8_t             *out);
size_t invest_city_result__pack_to_buffer
                     (const InvestCityResult   *message,
                      ProtobufCBuffer     *buffer);
InvestCityResult *
       invest_city_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   invest_city_result__free_unpacked
                     (InvestCityResult *message,
                      ProtobufCAllocator *allocator);
/* GetRankList methods */
void   get_rank_list__init
                     (GetRankList         *message);
size_t get_rank_list__get_packed_size
                     (const GetRankList   *message);
size_t get_rank_list__pack
                     (const GetRankList   *message,
                      uint8_t             *out);
size_t get_rank_list__pack_to_buffer
                     (const GetRankList   *message,
                      ProtobufCBuffer     *buffer);
GetRankList *
       get_rank_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_rank_list__free_unpacked
                     (GetRankList *message,
                      ProtobufCAllocator *allocator);
/* RankInfoDefine methods */
void   rank_info_define__init
                     (RankInfoDefine         *message);
size_t rank_info_define__get_packed_size
                     (const RankInfoDefine   *message);
size_t rank_info_define__pack
                     (const RankInfoDefine   *message,
                      uint8_t             *out);
size_t rank_info_define__pack_to_buffer
                     (const RankInfoDefine   *message,
                      ProtobufCBuffer     *buffer);
RankInfoDefine *
       rank_info_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rank_info_define__free_unpacked
                     (RankInfoDefine *message,
                      ProtobufCAllocator *allocator);
/* GetRankListResult methods */
void   get_rank_list_result__init
                     (GetRankListResult         *message);
size_t get_rank_list_result__get_packed_size
                     (const GetRankListResult   *message);
size_t get_rank_list_result__pack
                     (const GetRankListResult   *message,
                      uint8_t             *out);
size_t get_rank_list_result__pack_to_buffer
                     (const GetRankListResult   *message,
                      ProtobufCBuffer     *buffer);
GetRankListResult *
       get_rank_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_rank_list_result__free_unpacked
                     (GetRankListResult *message,
                      ProtobufCAllocator *allocator);
/* GetVoteList methods */
void   get_vote_list__init
                     (GetVoteList         *message);
size_t get_vote_list__get_packed_size
                     (const GetVoteList   *message);
size_t get_vote_list__pack
                     (const GetVoteList   *message,
                      uint8_t             *out);
size_t get_vote_list__pack_to_buffer
                     (const GetVoteList   *message,
                      ProtobufCBuffer     *buffer);
GetVoteList *
       get_vote_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_vote_list__free_unpacked
                     (GetVoteList *message,
                      ProtobufCAllocator *allocator);
/* GetVoteListResult methods */
void   get_vote_list_result__init
                     (GetVoteListResult         *message);
size_t get_vote_list_result__get_packed_size
                     (const GetVoteListResult   *message);
size_t get_vote_list_result__pack
                     (const GetVoteListResult   *message,
                      uint8_t             *out);
size_t get_vote_list_result__pack_to_buffer
                     (const GetVoteListResult   *message,
                      ProtobufCBuffer     *buffer);
GetVoteListResult *
       get_vote_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_vote_list_result__free_unpacked
                     (GetVoteListResult *message,
                      ProtobufCAllocator *allocator);
/* VoteMayor methods */
void   vote_mayor__init
                     (VoteMayor         *message);
size_t vote_mayor__get_packed_size
                     (const VoteMayor   *message);
size_t vote_mayor__pack
                     (const VoteMayor   *message,
                      uint8_t             *out);
size_t vote_mayor__pack_to_buffer
                     (const VoteMayor   *message,
                      ProtobufCBuffer     *buffer);
VoteMayor *
       vote_mayor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vote_mayor__free_unpacked
                     (VoteMayor *message,
                      ProtobufCAllocator *allocator);
/* VoteMayorResult methods */
void   vote_mayor_result__init
                     (VoteMayorResult         *message);
size_t vote_mayor_result__get_packed_size
                     (const VoteMayorResult   *message);
size_t vote_mayor_result__pack
                     (const VoteMayorResult   *message,
                      uint8_t             *out);
size_t vote_mayor_result__pack_to_buffer
                     (const VoteMayorResult   *message,
                      ProtobufCBuffer     *buffer);
VoteMayorResult *
       vote_mayor_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vote_mayor_result__free_unpacked
                     (VoteMayorResult *message,
                      ProtobufCAllocator *allocator);
/* ChangeDevDir methods */
void   change_dev_dir__init
                     (ChangeDevDir         *message);
size_t change_dev_dir__get_packed_size
                     (const ChangeDevDir   *message);
size_t change_dev_dir__pack
                     (const ChangeDevDir   *message,
                      uint8_t             *out);
size_t change_dev_dir__pack_to_buffer
                     (const ChangeDevDir   *message,
                      ProtobufCBuffer     *buffer);
ChangeDevDir *
       change_dev_dir__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   change_dev_dir__free_unpacked
                     (ChangeDevDir *message,
                      ProtobufCAllocator *allocator);
/* ChangeDevDirResult methods */
void   change_dev_dir_result__init
                     (ChangeDevDirResult         *message);
size_t change_dev_dir_result__get_packed_size
                     (const ChangeDevDirResult   *message);
size_t change_dev_dir_result__pack
                     (const ChangeDevDirResult   *message,
                      uint8_t             *out);
size_t change_dev_dir_result__pack_to_buffer
                     (const ChangeDevDirResult   *message,
                      ProtobufCBuffer     *buffer);
ChangeDevDirResult *
       change_dev_dir_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   change_dev_dir_result__free_unpacked
                     (ChangeDevDirResult *message,
                      ProtobufCAllocator *allocator);
/* GetLabourUnion methods */
void   get_labour_union__init
                     (GetLabourUnion         *message);
size_t get_labour_union__get_packed_size
                     (const GetLabourUnion   *message);
size_t get_labour_union__pack
                     (const GetLabourUnion   *message,
                      uint8_t             *out);
size_t get_labour_union__pack_to_buffer
                     (const GetLabourUnion   *message,
                      ProtobufCBuffer     *buffer);
GetLabourUnion *
       get_labour_union__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_labour_union__free_unpacked
                     (GetLabourUnion *message,
                      ProtobufCAllocator *allocator);
/* LabourDefine methods */
void   labour_define__init
                     (LabourDefine         *message);
size_t labour_define__get_packed_size
                     (const LabourDefine   *message);
size_t labour_define__pack
                     (const LabourDefine   *message,
                      uint8_t             *out);
size_t labour_define__pack_to_buffer
                     (const LabourDefine   *message,
                      ProtobufCBuffer     *buffer);
LabourDefine *
       labour_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   labour_define__free_unpacked
                     (LabourDefine *message,
                      ProtobufCAllocator *allocator);
/* GetLabourUnionResult methods */
void   get_labour_union_result__init
                     (GetLabourUnionResult         *message);
size_t get_labour_union_result__get_packed_size
                     (const GetLabourUnionResult   *message);
size_t get_labour_union_result__pack
                     (const GetLabourUnionResult   *message,
                      uint8_t             *out);
size_t get_labour_union_result__pack_to_buffer
                     (const GetLabourUnionResult   *message,
                      ProtobufCBuffer     *buffer);
GetLabourUnionResult *
       get_labour_union_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_labour_union_result__free_unpacked
                     (GetLabourUnionResult *message,
                      ProtobufCAllocator *allocator);
/* CreateLabourUnion methods */
void   create_labour_union__init
                     (CreateLabourUnion         *message);
size_t create_labour_union__get_packed_size
                     (const CreateLabourUnion   *message);
size_t create_labour_union__pack
                     (const CreateLabourUnion   *message,
                      uint8_t             *out);
size_t create_labour_union__pack_to_buffer
                     (const CreateLabourUnion   *message,
                      ProtobufCBuffer     *buffer);
CreateLabourUnion *
       create_labour_union__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_labour_union__free_unpacked
                     (CreateLabourUnion *message,
                      ProtobufCAllocator *allocator);
/* CreateLabourUnionResult methods */
void   create_labour_union_result__init
                     (CreateLabourUnionResult         *message);
size_t create_labour_union_result__get_packed_size
                     (const CreateLabourUnionResult   *message);
size_t create_labour_union_result__pack
                     (const CreateLabourUnionResult   *message,
                      uint8_t             *out);
size_t create_labour_union_result__pack_to_buffer
                     (const CreateLabourUnionResult   *message,
                      ProtobufCBuffer     *buffer);
CreateLabourUnionResult *
       create_labour_union_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_labour_union_result__free_unpacked
                     (CreateLabourUnionResult *message,
                      ProtobufCAllocator *allocator);
/* DeleteLabourUnion methods */
void   delete_labour_union__init
                     (DeleteLabourUnion         *message);
size_t delete_labour_union__get_packed_size
                     (const DeleteLabourUnion   *message);
size_t delete_labour_union__pack
                     (const DeleteLabourUnion   *message,
                      uint8_t             *out);
size_t delete_labour_union__pack_to_buffer
                     (const DeleteLabourUnion   *message,
                      ProtobufCBuffer     *buffer);
DeleteLabourUnion *
       delete_labour_union__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_labour_union__free_unpacked
                     (DeleteLabourUnion *message,
                      ProtobufCAllocator *allocator);
/* DeleteLabourUnionResult methods */
void   delete_labour_union_result__init
                     (DeleteLabourUnionResult         *message);
size_t delete_labour_union_result__get_packed_size
                     (const DeleteLabourUnionResult   *message);
size_t delete_labour_union_result__pack
                     (const DeleteLabourUnionResult   *message,
                      uint8_t             *out);
size_t delete_labour_union_result__pack_to_buffer
                     (const DeleteLabourUnionResult   *message,
                      ProtobufCBuffer     *buffer);
DeleteLabourUnionResult *
       delete_labour_union_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_labour_union_result__free_unpacked
                     (DeleteLabourUnionResult *message,
                      ProtobufCAllocator *allocator);
/* InviteLabour methods */
void   invite_labour__init
                     (InviteLabour         *message);
size_t invite_labour__get_packed_size
                     (const InviteLabour   *message);
size_t invite_labour__pack
                     (const InviteLabour   *message,
                      uint8_t             *out);
size_t invite_labour__pack_to_buffer
                     (const InviteLabour   *message,
                      ProtobufCBuffer     *buffer);
InviteLabour *
       invite_labour__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   invite_labour__free_unpacked
                     (InviteLabour *message,
                      ProtobufCAllocator *allocator);
/* InviteLabourResult methods */
void   invite_labour_result__init
                     (InviteLabourResult         *message);
size_t invite_labour_result__get_packed_size
                     (const InviteLabourResult   *message);
size_t invite_labour_result__pack
                     (const InviteLabourResult   *message,
                      uint8_t             *out);
size_t invite_labour_result__pack_to_buffer
                     (const InviteLabourResult   *message,
                      ProtobufCBuffer     *buffer);
InviteLabourResult *
       invite_labour_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   invite_labour_result__free_unpacked
                     (InviteLabourResult *message,
                      ProtobufCAllocator *allocator);
/* ApplyLabourUnion methods */
void   apply_labour_union__init
                     (ApplyLabourUnion         *message);
size_t apply_labour_union__get_packed_size
                     (const ApplyLabourUnion   *message);
size_t apply_labour_union__pack
                     (const ApplyLabourUnion   *message,
                      uint8_t             *out);
size_t apply_labour_union__pack_to_buffer
                     (const ApplyLabourUnion   *message,
                      ProtobufCBuffer     *buffer);
ApplyLabourUnion *
       apply_labour_union__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   apply_labour_union__free_unpacked
                     (ApplyLabourUnion *message,
                      ProtobufCAllocator *allocator);
/* ApplyLabourUnionResult methods */
void   apply_labour_union_result__init
                     (ApplyLabourUnionResult         *message);
size_t apply_labour_union_result__get_packed_size
                     (const ApplyLabourUnionResult   *message);
size_t apply_labour_union_result__pack
                     (const ApplyLabourUnionResult   *message,
                      uint8_t             *out);
size_t apply_labour_union_result__pack_to_buffer
                     (const ApplyLabourUnionResult   *message,
                      ProtobufCBuffer     *buffer);
ApplyLabourUnionResult *
       apply_labour_union_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   apply_labour_union_result__free_unpacked
                     (ApplyLabourUnionResult *message,
                      ProtobufCAllocator *allocator);
/* QuitLabourUnion methods */
void   quit_labour_union__init
                     (QuitLabourUnion         *message);
size_t quit_labour_union__get_packed_size
                     (const QuitLabourUnion   *message);
size_t quit_labour_union__pack
                     (const QuitLabourUnion   *message,
                      uint8_t             *out);
size_t quit_labour_union__pack_to_buffer
                     (const QuitLabourUnion   *message,
                      ProtobufCBuffer     *buffer);
QuitLabourUnion *
       quit_labour_union__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quit_labour_union__free_unpacked
                     (QuitLabourUnion *message,
                      ProtobufCAllocator *allocator);
/* QuitLabourUnionResult methods */
void   quit_labour_union_result__init
                     (QuitLabourUnionResult         *message);
size_t quit_labour_union_result__get_packed_size
                     (const QuitLabourUnionResult   *message);
size_t quit_labour_union_result__pack
                     (const QuitLabourUnionResult   *message,
                      uint8_t             *out);
size_t quit_labour_union_result__pack_to_buffer
                     (const QuitLabourUnionResult   *message,
                      ProtobufCBuffer     *buffer);
QuitLabourUnionResult *
       quit_labour_union_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quit_labour_union_result__free_unpacked
                     (QuitLabourUnionResult *message,
                      ProtobufCAllocator *allocator);
/* KickOutMember methods */
void   kick_out_member__init
                     (KickOutMember         *message);
size_t kick_out_member__get_packed_size
                     (const KickOutMember   *message);
size_t kick_out_member__pack
                     (const KickOutMember   *message,
                      uint8_t             *out);
size_t kick_out_member__pack_to_buffer
                     (const KickOutMember   *message,
                      ProtobufCBuffer     *buffer);
KickOutMember *
       kick_out_member__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kick_out_member__free_unpacked
                     (KickOutMember *message,
                      ProtobufCAllocator *allocator);
/* KickOutMemberResult methods */
void   kick_out_member_result__init
                     (KickOutMemberResult         *message);
size_t kick_out_member_result__get_packed_size
                     (const KickOutMemberResult   *message);
size_t kick_out_member_result__pack
                     (const KickOutMemberResult   *message,
                      uint8_t             *out);
size_t kick_out_member_result__pack_to_buffer
                     (const KickOutMemberResult   *message,
                      ProtobufCBuffer     *buffer);
KickOutMemberResult *
       kick_out_member_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kick_out_member_result__free_unpacked
                     (KickOutMemberResult *message,
                      ProtobufCAllocator *allocator);
/* AdjustPrivilege methods */
void   adjust_privilege__init
                     (AdjustPrivilege         *message);
size_t adjust_privilege__get_packed_size
                     (const AdjustPrivilege   *message);
size_t adjust_privilege__pack
                     (const AdjustPrivilege   *message,
                      uint8_t             *out);
size_t adjust_privilege__pack_to_buffer
                     (const AdjustPrivilege   *message,
                      ProtobufCBuffer     *buffer);
AdjustPrivilege *
       adjust_privilege__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   adjust_privilege__free_unpacked
                     (AdjustPrivilege *message,
                      ProtobufCAllocator *allocator);
/* AdjustPrivilegeResult methods */
void   adjust_privilege_result__init
                     (AdjustPrivilegeResult         *message);
size_t adjust_privilege_result__get_packed_size
                     (const AdjustPrivilegeResult   *message);
size_t adjust_privilege_result__pack
                     (const AdjustPrivilegeResult   *message,
                      uint8_t             *out);
size_t adjust_privilege_result__pack_to_buffer
                     (const AdjustPrivilegeResult   *message,
                      ProtobufCBuffer     *buffer);
AdjustPrivilegeResult *
       adjust_privilege_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   adjust_privilege_result__free_unpacked
                     (AdjustPrivilegeResult *message,
                      ProtobufCAllocator *allocator);
/* DepositMoney methods */
void   deposit_money__init
                     (DepositMoney         *message);
size_t deposit_money__get_packed_size
                     (const DepositMoney   *message);
size_t deposit_money__pack
                     (const DepositMoney   *message,
                      uint8_t             *out);
size_t deposit_money__pack_to_buffer
                     (const DepositMoney   *message,
                      ProtobufCBuffer     *buffer);
DepositMoney *
       deposit_money__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   deposit_money__free_unpacked
                     (DepositMoney *message,
                      ProtobufCAllocator *allocator);
/* DepositMoneyResult methods */
void   deposit_money_result__init
                     (DepositMoneyResult         *message);
size_t deposit_money_result__get_packed_size
                     (const DepositMoneyResult   *message);
size_t deposit_money_result__pack
                     (const DepositMoneyResult   *message,
                      uint8_t             *out);
size_t deposit_money_result__pack_to_buffer
                     (const DepositMoneyResult   *message,
                      ProtobufCBuffer     *buffer);
DepositMoneyResult *
       deposit_money_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   deposit_money_result__free_unpacked
                     (DepositMoneyResult *message,
                      ProtobufCAllocator *allocator);
/* WithdrawMoney methods */
void   withdraw_money__init
                     (WithdrawMoney         *message);
size_t withdraw_money__get_packed_size
                     (const WithdrawMoney   *message);
size_t withdraw_money__pack
                     (const WithdrawMoney   *message,
                      uint8_t             *out);
size_t withdraw_money__pack_to_buffer
                     (const WithdrawMoney   *message,
                      ProtobufCBuffer     *buffer);
WithdrawMoney *
       withdraw_money__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   withdraw_money__free_unpacked
                     (WithdrawMoney *message,
                      ProtobufCAllocator *allocator);
/* WithdrawMoneyResult methods */
void   withdraw_money_result__init
                     (WithdrawMoneyResult         *message);
size_t withdraw_money_result__get_packed_size
                     (const WithdrawMoneyResult   *message);
size_t withdraw_money_result__pack
                     (const WithdrawMoneyResult   *message,
                      uint8_t             *out);
size_t withdraw_money_result__pack_to_buffer
                     (const WithdrawMoneyResult   *message,
                      ProtobufCBuffer     *buffer);
WithdrawMoneyResult *
       withdraw_money_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   withdraw_money_result__free_unpacked
                     (WithdrawMoneyResult *message,
                      ProtobufCAllocator *allocator);
/* DepositItem methods */
void   deposit_item__init
                     (DepositItem         *message);
size_t deposit_item__get_packed_size
                     (const DepositItem   *message);
size_t deposit_item__pack
                     (const DepositItem   *message,
                      uint8_t             *out);
size_t deposit_item__pack_to_buffer
                     (const DepositItem   *message,
                      ProtobufCBuffer     *buffer);
DepositItem *
       deposit_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   deposit_item__free_unpacked
                     (DepositItem *message,
                      ProtobufCAllocator *allocator);
/* DepositItemResult methods */
void   deposit_item_result__init
                     (DepositItemResult         *message);
size_t deposit_item_result__get_packed_size
                     (const DepositItemResult   *message);
size_t deposit_item_result__pack
                     (const DepositItemResult   *message,
                      uint8_t             *out);
size_t deposit_item_result__pack_to_buffer
                     (const DepositItemResult   *message,
                      ProtobufCBuffer     *buffer);
DepositItemResult *
       deposit_item_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   deposit_item_result__free_unpacked
                     (DepositItemResult *message,
                      ProtobufCAllocator *allocator);
/* WithdrawItem methods */
void   withdraw_item__init
                     (WithdrawItem         *message);
size_t withdraw_item__get_packed_size
                     (const WithdrawItem   *message);
size_t withdraw_item__pack
                     (const WithdrawItem   *message,
                      uint8_t             *out);
size_t withdraw_item__pack_to_buffer
                     (const WithdrawItem   *message,
                      ProtobufCBuffer     *buffer);
WithdrawItem *
       withdraw_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   withdraw_item__free_unpacked
                     (WithdrawItem *message,
                      ProtobufCAllocator *allocator);
/* WithdrawItemResult methods */
void   withdraw_item_result__init
                     (WithdrawItemResult         *message);
size_t withdraw_item_result__get_packed_size
                     (const WithdrawItemResult   *message);
size_t withdraw_item_result__pack
                     (const WithdrawItemResult   *message,
                      uint8_t             *out);
size_t withdraw_item_result__pack_to_buffer
                     (const WithdrawItemResult   *message,
                      ProtobufCBuffer     *buffer);
WithdrawItemResult *
       withdraw_item_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   withdraw_item_result__free_unpacked
                     (WithdrawItemResult *message,
                      ProtobufCAllocator *allocator);
/* ExpandBank methods */
void   expand_bank__init
                     (ExpandBank         *message);
size_t expand_bank__get_packed_size
                     (const ExpandBank   *message);
size_t expand_bank__pack
                     (const ExpandBank   *message,
                      uint8_t             *out);
size_t expand_bank__pack_to_buffer
                     (const ExpandBank   *message,
                      ProtobufCBuffer     *buffer);
ExpandBank *
       expand_bank__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   expand_bank__free_unpacked
                     (ExpandBank *message,
                      ProtobufCAllocator *allocator);
/* ExpandBankResult methods */
void   expand_bank_result__init
                     (ExpandBankResult         *message);
size_t expand_bank_result__get_packed_size
                     (const ExpandBankResult   *message);
size_t expand_bank_result__pack
                     (const ExpandBankResult   *message,
                      uint8_t             *out);
size_t expand_bank_result__pack_to_buffer
                     (const ExpandBankResult   *message,
                      ProtobufCBuffer     *buffer);
ExpandBankResult *
       expand_bank_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   expand_bank_result__free_unpacked
                     (ExpandBankResult *message,
                      ProtobufCAllocator *allocator);
/* GetBankInfo methods */
void   get_bank_info__init
                     (GetBankInfo         *message);
size_t get_bank_info__get_packed_size
                     (const GetBankInfo   *message);
size_t get_bank_info__pack
                     (const GetBankInfo   *message,
                      uint8_t             *out);
size_t get_bank_info__pack_to_buffer
                     (const GetBankInfo   *message,
                      ProtobufCBuffer     *buffer);
GetBankInfo *
       get_bank_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_bank_info__free_unpacked
                     (GetBankInfo *message,
                      ProtobufCAllocator *allocator);
/* BankItemDefine methods */
void   bank_item_define__init
                     (BankItemDefine         *message);
size_t bank_item_define__get_packed_size
                     (const BankItemDefine   *message);
size_t bank_item_define__pack
                     (const BankItemDefine   *message,
                      uint8_t             *out);
size_t bank_item_define__pack_to_buffer
                     (const BankItemDefine   *message,
                      ProtobufCBuffer     *buffer);
BankItemDefine *
       bank_item_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bank_item_define__free_unpacked
                     (BankItemDefine *message,
                      ProtobufCAllocator *allocator);
/* GetBankInfoResult methods */
void   get_bank_info_result__init
                     (GetBankInfoResult         *message);
size_t get_bank_info_result__get_packed_size
                     (const GetBankInfoResult   *message);
size_t get_bank_info_result__pack
                     (const GetBankInfoResult   *message,
                      uint8_t             *out);
size_t get_bank_info_result__pack_to_buffer
                     (const GetBankInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetBankInfoResult *
       get_bank_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_bank_info_result__free_unpacked
                     (GetBankInfoResult *message,
                      ProtobufCAllocator *allocator);
/* GetBankLog methods */
void   get_bank_log__init
                     (GetBankLog         *message);
size_t get_bank_log__get_packed_size
                     (const GetBankLog   *message);
size_t get_bank_log__pack
                     (const GetBankLog   *message,
                      uint8_t             *out);
size_t get_bank_log__pack_to_buffer
                     (const GetBankLog   *message,
                      ProtobufCBuffer     *buffer);
GetBankLog *
       get_bank_log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_bank_log__free_unpacked
                     (GetBankLog *message,
                      ProtobufCAllocator *allocator);
/* GetBankLogResult methods */
void   get_bank_log_result__init
                     (GetBankLogResult         *message);
size_t get_bank_log_result__get_packed_size
                     (const GetBankLogResult   *message);
size_t get_bank_log_result__pack
                     (const GetBankLogResult   *message,
                      uint8_t             *out);
size_t get_bank_log_result__pack_to_buffer
                     (const GetBankLogResult   *message,
                      ProtobufCBuffer     *buffer);
GetBankLogResult *
       get_bank_log_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_bank_log_result__free_unpacked
                     (GetBankLogResult *message,
                      ProtobufCAllocator *allocator);
/* SetMainTaskStatus methods */
void   set_main_task_status__init
                     (SetMainTaskStatus         *message);
size_t set_main_task_status__get_packed_size
                     (const SetMainTaskStatus   *message);
size_t set_main_task_status__pack
                     (const SetMainTaskStatus   *message,
                      uint8_t             *out);
size_t set_main_task_status__pack_to_buffer
                     (const SetMainTaskStatus   *message,
                      ProtobufCBuffer     *buffer);
SetMainTaskStatus *
       set_main_task_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_main_task_status__free_unpacked
                     (SetMainTaskStatus *message,
                      ProtobufCAllocator *allocator);
/* SetMainTaskStatusResult methods */
void   set_main_task_status_result__init
                     (SetMainTaskStatusResult         *message);
size_t set_main_task_status_result__get_packed_size
                     (const SetMainTaskStatusResult   *message);
size_t set_main_task_status_result__pack
                     (const SetMainTaskStatusResult   *message,
                      uint8_t             *out);
size_t set_main_task_status_result__pack_to_buffer
                     (const SetMainTaskStatusResult   *message,
                      ProtobufCBuffer     *buffer);
SetMainTaskStatusResult *
       set_main_task_status_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_main_task_status_result__free_unpacked
                     (SetMainTaskStatusResult *message,
                      ProtobufCAllocator *allocator);
/* PropsInfo methods */
void   props_info__init
                     (PropsInfo         *message);
size_t props_info__get_packed_size
                     (const PropsInfo   *message);
size_t props_info__pack
                     (const PropsInfo   *message,
                      uint8_t             *out);
size_t props_info__pack_to_buffer
                     (const PropsInfo   *message,
                      ProtobufCBuffer     *buffer);
PropsInfo *
       props_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   props_info__free_unpacked
                     (PropsInfo *message,
                      ProtobufCAllocator *allocator);
/* FightSummary methods */
void   fight_summary__init
                     (FightSummary         *message);
size_t fight_summary__get_packed_size
                     (const FightSummary   *message);
size_t fight_summary__pack
                     (const FightSummary   *message,
                      uint8_t             *out);
size_t fight_summary__pack_to_buffer
                     (const FightSummary   *message,
                      ProtobufCBuffer     *buffer);
FightSummary *
       fight_summary__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fight_summary__free_unpacked
                     (FightSummary *message,
                      ProtobufCAllocator *allocator);
/* FightCannonInfo methods */
void   fight_cannon_info__init
                     (FightCannonInfo         *message);
size_t fight_cannon_info__get_packed_size
                     (const FightCannonInfo   *message);
size_t fight_cannon_info__pack
                     (const FightCannonInfo   *message,
                      uint8_t             *out);
size_t fight_cannon_info__pack_to_buffer
                     (const FightCannonInfo   *message,
                      ProtobufCBuffer     *buffer);
FightCannonInfo *
       fight_cannon_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fight_cannon_info__free_unpacked
                     (FightCannonInfo *message,
                      ProtobufCAllocator *allocator);
/* BattleCaptainInfo methods */
void   battle_captain_info__init
                     (BattleCaptainInfo         *message);
size_t battle_captain_info__get_packed_size
                     (const BattleCaptainInfo   *message);
size_t battle_captain_info__pack
                     (const BattleCaptainInfo   *message,
                      uint8_t             *out);
size_t battle_captain_info__pack_to_buffer
                     (const BattleCaptainInfo   *message,
                      ProtobufCBuffer     *buffer);
BattleCaptainInfo *
       battle_captain_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   battle_captain_info__free_unpacked
                     (BattleCaptainInfo *message,
                      ProtobufCAllocator *allocator);
/* FightShipInfo methods */
void   fight_ship_info__init
                     (FightShipInfo         *message);
size_t fight_ship_info__get_packed_size
                     (const FightShipInfo   *message);
size_t fight_ship_info__pack
                     (const FightShipInfo   *message,
                      uint8_t             *out);
size_t fight_ship_info__pack_to_buffer
                     (const FightShipInfo   *message,
                      ProtobufCBuffer     *buffer);
FightShipInfo *
       fight_ship_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fight_ship_info__free_unpacked
                     (FightShipInfo *message,
                      ProtobufCAllocator *allocator);
/* EngageInFight methods */
void   engage_in_fight__init
                     (EngageInFight         *message);
size_t engage_in_fight__get_packed_size
                     (const EngageInFight   *message);
size_t engage_in_fight__pack
                     (const EngageInFight   *message,
                      uint8_t             *out);
size_t engage_in_fight__pack_to_buffer
                     (const EngageInFight   *message,
                      ProtobufCBuffer     *buffer);
EngageInFight *
       engage_in_fight__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   engage_in_fight__free_unpacked
                     (EngageInFight *message,
                      ProtobufCAllocator *allocator);
/* EngageInFightResult methods */
void   engage_in_fight_result__init
                     (EngageInFightResult         *message);
size_t engage_in_fight_result__get_packed_size
                     (const EngageInFightResult   *message);
size_t engage_in_fight_result__pack
                     (const EngageInFightResult   *message,
                      uint8_t             *out);
size_t engage_in_fight_result__pack_to_buffer
                     (const EngageInFightResult   *message,
                      ProtobufCBuffer     *buffer);
EngageInFightResult *
       engage_in_fight_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   engage_in_fight_result__free_unpacked
                     (EngageInFightResult *message,
                      ProtobufCAllocator *allocator);
/* EndFightShipInfo methods */
void   end_fight_ship_info__init
                     (EndFightShipInfo         *message);
size_t end_fight_ship_info__get_packed_size
                     (const EndFightShipInfo   *message);
size_t end_fight_ship_info__pack
                     (const EndFightShipInfo   *message,
                      uint8_t             *out);
size_t end_fight_ship_info__pack_to_buffer
                     (const EndFightShipInfo   *message,
                      ProtobufCBuffer     *buffer);
EndFightShipInfo *
       end_fight_ship_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_fight_ship_info__free_unpacked
                     (EndFightShipInfo *message,
                      ProtobufCAllocator *allocator);
/* BattleLogItem methods */
void   battle_log_item__init
                     (BattleLogItem         *message);
size_t battle_log_item__get_packed_size
                     (const BattleLogItem   *message);
size_t battle_log_item__pack
                     (const BattleLogItem   *message,
                      uint8_t             *out);
size_t battle_log_item__pack_to_buffer
                     (const BattleLogItem   *message,
                      ProtobufCBuffer     *buffer);
BattleLogItem *
       battle_log_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   battle_log_item__free_unpacked
                     (BattleLogItem *message,
                      ProtobufCAllocator *allocator);
/* BattleLog methods */
void   battle_log__init
                     (BattleLog         *message);
size_t battle_log__get_packed_size
                     (const BattleLog   *message);
size_t battle_log__pack
                     (const BattleLog   *message,
                      uint8_t             *out);
size_t battle_log__pack_to_buffer
                     (const BattleLog   *message,
                      ProtobufCBuffer     *buffer);
BattleLog *
       battle_log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   battle_log__free_unpacked
                     (BattleLog *message,
                      ProtobufCAllocator *allocator);
/* EndFight methods */
void   end_fight__init
                     (EndFight         *message);
size_t end_fight__get_packed_size
                     (const EndFight   *message);
size_t end_fight__pack
                     (const EndFight   *message,
                      uint8_t             *out);
size_t end_fight__pack_to_buffer
                     (const EndFight   *message,
                      ProtobufCBuffer     *buffer);
EndFight *
       end_fight__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_fight__free_unpacked
                     (EndFight *message,
                      ProtobufCAllocator *allocator);
/* LootDefine methods */
void   loot_define__init
                     (LootDefine         *message);
size_t loot_define__get_packed_size
                     (const LootDefine   *message);
size_t loot_define__pack
                     (const LootDefine   *message,
                      uint8_t             *out);
size_t loot_define__pack_to_buffer
                     (const LootDefine   *message,
                      ProtobufCBuffer     *buffer);
LootDefine *
       loot_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   loot_define__free_unpacked
                     (LootDefine *message,
                      ProtobufCAllocator *allocator);
/* LostGoodsDefine methods */
void   lost_goods_define__init
                     (LostGoodsDefine         *message);
size_t lost_goods_define__get_packed_size
                     (const LostGoodsDefine   *message);
size_t lost_goods_define__pack
                     (const LostGoodsDefine   *message,
                      uint8_t             *out);
size_t lost_goods_define__pack_to_buffer
                     (const LostGoodsDefine   *message,
                      ProtobufCBuffer     *buffer);
LostGoodsDefine *
       lost_goods_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lost_goods_define__free_unpacked
                     (LostGoodsDefine *message,
                      ProtobufCAllocator *allocator);
/* SunkShipDetails methods */
void   sunk_ship_details__init
                     (SunkShipDetails         *message);
size_t sunk_ship_details__get_packed_size
                     (const SunkShipDetails   *message);
size_t sunk_ship_details__pack
                     (const SunkShipDetails   *message,
                      uint8_t             *out);
size_t sunk_ship_details__pack_to_buffer
                     (const SunkShipDetails   *message,
                      ProtobufCBuffer     *buffer);
SunkShipDetails *
       sunk_ship_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sunk_ship_details__free_unpacked
                     (SunkShipDetails *message,
                      ProtobufCAllocator *allocator);
/* SurvivedShipdetails methods */
void   survived_shipdetails__init
                     (SurvivedShipdetails         *message);
size_t survived_shipdetails__get_packed_size
                     (const SurvivedShipdetails   *message);
size_t survived_shipdetails__pack
                     (const SurvivedShipdetails   *message,
                      uint8_t             *out);
size_t survived_shipdetails__pack_to_buffer
                     (const SurvivedShipdetails   *message,
                      ProtobufCBuffer     *buffer);
SurvivedShipdetails *
       survived_shipdetails__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   survived_shipdetails__free_unpacked
                     (SurvivedShipdetails *message,
                      ProtobufCAllocator *allocator);
/* CaptainInfo methods */
void   captain_info__init
                     (CaptainInfo         *message);
size_t captain_info__get_packed_size
                     (const CaptainInfo   *message);
size_t captain_info__pack
                     (const CaptainInfo   *message,
                      uint8_t             *out);
size_t captain_info__pack_to_buffer
                     (const CaptainInfo   *message,
                      ProtobufCBuffer     *buffer);
CaptainInfo *
       captain_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   captain_info__free_unpacked
                     (CaptainInfo *message,
                      ProtobufCAllocator *allocator);
/* EndFightResult methods */
void   end_fight_result__init
                     (EndFightResult         *message);
size_t end_fight_result__get_packed_size
                     (const EndFightResult   *message);
size_t end_fight_result__pack
                     (const EndFightResult   *message,
                      uint8_t             *out);
size_t end_fight_result__pack_to_buffer
                     (const EndFightResult   *message,
                      ProtobufCBuffer     *buffer);
EndFightResult *
       end_fight_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_fight_result__free_unpacked
                     (EndFightResult *message,
                      ProtobufCAllocator *allocator);
/* StartAutoFight methods */
void   start_auto_fight__init
                     (StartAutoFight         *message);
size_t start_auto_fight__get_packed_size
                     (const StartAutoFight   *message);
size_t start_auto_fight__pack
                     (const StartAutoFight   *message,
                      uint8_t             *out);
size_t start_auto_fight__pack_to_buffer
                     (const StartAutoFight   *message,
                      ProtobufCBuffer     *buffer);
StartAutoFight *
       start_auto_fight__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   start_auto_fight__free_unpacked
                     (StartAutoFight *message,
                      ProtobufCAllocator *allocator);
/* AutoFightShipInfo methods */
void   auto_fight_ship_info__init
                     (AutoFightShipInfo         *message);
size_t auto_fight_ship_info__get_packed_size
                     (const AutoFightShipInfo   *message);
size_t auto_fight_ship_info__pack
                     (const AutoFightShipInfo   *message,
                      uint8_t             *out);
size_t auto_fight_ship_info__pack_to_buffer
                     (const AutoFightShipInfo   *message,
                      ProtobufCBuffer     *buffer);
AutoFightShipInfo *
       auto_fight_ship_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   auto_fight_ship_info__free_unpacked
                     (AutoFightShipInfo *message,
                      ProtobufCAllocator *allocator);
/* StartAutoFightResult methods */
void   start_auto_fight_result__init
                     (StartAutoFightResult         *message);
size_t start_auto_fight_result__get_packed_size
                     (const StartAutoFightResult   *message);
size_t start_auto_fight_result__pack
                     (const StartAutoFightResult   *message,
                      uint8_t             *out);
size_t start_auto_fight_result__pack_to_buffer
                     (const StartAutoFightResult   *message,
                      ProtobufCBuffer     *buffer);
StartAutoFightResult *
       start_auto_fight_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   start_auto_fight_result__free_unpacked
                     (StartAutoFightResult *message,
                      ProtobufCAllocator *allocator);
/* GetSkillsDetails methods */
void   get_skills_details__init
                     (GetSkillsDetails         *message);
size_t get_skills_details__get_packed_size
                     (const GetSkillsDetails   *message);
size_t get_skills_details__pack
                     (const GetSkillsDetails   *message,
                      uint8_t             *out);
size_t get_skills_details__pack_to_buffer
                     (const GetSkillsDetails   *message,
                      ProtobufCBuffer     *buffer);
GetSkillsDetails *
       get_skills_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_skills_details__free_unpacked
                     (GetSkillsDetails *message,
                      ProtobufCAllocator *allocator);
/* SkillDefine methods */
void   skill_define__init
                     (SkillDefine         *message);
size_t skill_define__get_packed_size
                     (const SkillDefine   *message);
size_t skill_define__pack
                     (const SkillDefine   *message,
                      uint8_t             *out);
size_t skill_define__pack_to_buffer
                     (const SkillDefine   *message,
                      ProtobufCBuffer     *buffer);
SkillDefine *
       skill_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   skill_define__free_unpacked
                     (SkillDefine *message,
                      ProtobufCAllocator *allocator);
/* GetSkillsDetailsResult methods */
void   get_skills_details_result__init
                     (GetSkillsDetailsResult         *message);
size_t get_skills_details_result__get_packed_size
                     (const GetSkillsDetailsResult   *message);
size_t get_skills_details_result__pack
                     (const GetSkillsDetailsResult   *message,
                      uint8_t             *out);
size_t get_skills_details_result__pack_to_buffer
                     (const GetSkillsDetailsResult   *message,
                      ProtobufCBuffer     *buffer);
GetSkillsDetailsResult *
       get_skills_details_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_skills_details_result__free_unpacked
                     (GetSkillsDetailsResult *message,
                      ProtobufCAllocator *allocator);
/* AddSkillPoint methods */
void   add_skill_point__init
                     (AddSkillPoint         *message);
size_t add_skill_point__get_packed_size
                     (const AddSkillPoint   *message);
size_t add_skill_point__pack
                     (const AddSkillPoint   *message,
                      uint8_t             *out);
size_t add_skill_point__pack_to_buffer
                     (const AddSkillPoint   *message,
                      ProtobufCBuffer     *buffer);
AddSkillPoint *
       add_skill_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_skill_point__free_unpacked
                     (AddSkillPoint *message,
                      ProtobufCAllocator *allocator);
/* AddSkillPointResult methods */
void   add_skill_point_result__init
                     (AddSkillPointResult         *message);
size_t add_skill_point_result__get_packed_size
                     (const AddSkillPointResult   *message);
size_t add_skill_point_result__pack
                     (const AddSkillPointResult   *message,
                      uint8_t             *out);
size_t add_skill_point_result__pack_to_buffer
                     (const AddSkillPointResult   *message,
                      ProtobufCBuffer     *buffer);
AddSkillPointResult *
       add_skill_point_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_skill_point_result__free_unpacked
                     (AddSkillPointResult *message,
                      ProtobufCAllocator *allocator);
/* ResetSkillPoints methods */
void   reset_skill_points__init
                     (ResetSkillPoints         *message);
size_t reset_skill_points__get_packed_size
                     (const ResetSkillPoints   *message);
size_t reset_skill_points__pack
                     (const ResetSkillPoints   *message,
                      uint8_t             *out);
size_t reset_skill_points__pack_to_buffer
                     (const ResetSkillPoints   *message,
                      ProtobufCBuffer     *buffer);
ResetSkillPoints *
       reset_skill_points__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reset_skill_points__free_unpacked
                     (ResetSkillPoints *message,
                      ProtobufCAllocator *allocator);
/* ResetSkillPointsResult methods */
void   reset_skill_points_result__init
                     (ResetSkillPointsResult         *message);
size_t reset_skill_points_result__get_packed_size
                     (const ResetSkillPointsResult   *message);
size_t reset_skill_points_result__pack
                     (const ResetSkillPointsResult   *message,
                      uint8_t             *out);
size_t reset_skill_points_result__pack_to_buffer
                     (const ResetSkillPointsResult   *message,
                      ProtobufCBuffer     *buffer);
ResetSkillPointsResult *
       reset_skill_points_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reset_skill_points_result__free_unpacked
                     (ResetSkillPointsResult *message,
                      ProtobufCAllocator *allocator);
/* NotifyBattleLog methods */
void   notify_battle_log__init
                     (NotifyBattleLog         *message);
size_t notify_battle_log__get_packed_size
                     (const NotifyBattleLog   *message);
size_t notify_battle_log__pack
                     (const NotifyBattleLog   *message,
                      uint8_t             *out);
size_t notify_battle_log__pack_to_buffer
                     (const NotifyBattleLog   *message,
                      ProtobufCBuffer     *buffer);
NotifyBattleLog *
       notify_battle_log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   notify_battle_log__free_unpacked
                     (NotifyBattleLog *message,
                      ProtobufCAllocator *allocator);
/* NotifyBattleLogResult methods */
void   notify_battle_log_result__init
                     (NotifyBattleLogResult         *message);
size_t notify_battle_log_result__get_packed_size
                     (const NotifyBattleLogResult   *message);
size_t notify_battle_log_result__pack
                     (const NotifyBattleLogResult   *message,
                      uint8_t             *out);
size_t notify_battle_log_result__pack_to_buffer
                     (const NotifyBattleLogResult   *message,
                      ProtobufCBuffer     *buffer);
NotifyBattleLogResult *
       notify_battle_log_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   notify_battle_log_result__free_unpacked
                     (NotifyBattleLogResult *message,
                      ProtobufCAllocator *allocator);
/* GetPersonalInfo methods */
void   get_personal_info__init
                     (GetPersonalInfo         *message);
size_t get_personal_info__get_packed_size
                     (const GetPersonalInfo   *message);
size_t get_personal_info__pack
                     (const GetPersonalInfo   *message,
                      uint8_t             *out);
size_t get_personal_info__pack_to_buffer
                     (const GetPersonalInfo   *message,
                      ProtobufCBuffer     *buffer);
GetPersonalInfo *
       get_personal_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_personal_info__free_unpacked
                     (GetPersonalInfo *message,
                      ProtobufCAllocator *allocator);
/* FriendValue methods */
void   friend_value__init
                     (FriendValue         *message);
size_t friend_value__get_packed_size
                     (const FriendValue   *message);
size_t friend_value__pack
                     (const FriendValue   *message,
                      uint8_t             *out);
size_t friend_value__pack_to_buffer
                     (const FriendValue   *message,
                      ProtobufCBuffer     *buffer);
FriendValue *
       friend_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_value__free_unpacked
                     (FriendValue *message,
                      ProtobufCAllocator *allocator);
/* GetPersonalInfoResult methods */
void   get_personal_info_result__init
                     (GetPersonalInfoResult         *message);
size_t get_personal_info_result__get_packed_size
                     (const GetPersonalInfoResult   *message);
size_t get_personal_info_result__pack
                     (const GetPersonalInfoResult   *message,
                      uint8_t             *out);
size_t get_personal_info_result__pack_to_buffer
                     (const GetPersonalInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetPersonalInfoResult *
       get_personal_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_personal_info_result__free_unpacked
                     (GetPersonalInfoResult *message,
                      ProtobufCAllocator *allocator);
/* SetBioInfo methods */
void   set_bio_info__init
                     (SetBioInfo         *message);
size_t set_bio_info__get_packed_size
                     (const SetBioInfo   *message);
size_t set_bio_info__pack
                     (const SetBioInfo   *message,
                      uint8_t             *out);
size_t set_bio_info__pack_to_buffer
                     (const SetBioInfo   *message,
                      ProtobufCBuffer     *buffer);
SetBioInfo *
       set_bio_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_bio_info__free_unpacked
                     (SetBioInfo *message,
                      ProtobufCAllocator *allocator);
/* SetBioInfoResult methods */
void   set_bio_info_result__init
                     (SetBioInfoResult         *message);
size_t set_bio_info_result__get_packed_size
                     (const SetBioInfoResult   *message);
size_t set_bio_info_result__pack
                     (const SetBioInfoResult   *message,
                      uint8_t             *out);
size_t set_bio_info_result__pack_to_buffer
                     (const SetBioInfoResult   *message,
                      ProtobufCBuffer     *buffer);
SetBioInfoResult *
       set_bio_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_bio_info_result__free_unpacked
                     (SetBioInfoResult *message,
                      ProtobufCAllocator *allocator);
/* CancelFight methods */
void   cancel_fight__init
                     (CancelFight         *message);
size_t cancel_fight__get_packed_size
                     (const CancelFight   *message);
size_t cancel_fight__pack
                     (const CancelFight   *message,
                      uint8_t             *out);
size_t cancel_fight__pack_to_buffer
                     (const CancelFight   *message,
                      ProtobufCBuffer     *buffer);
CancelFight *
       cancel_fight__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cancel_fight__free_unpacked
                     (CancelFight *message,
                      ProtobufCAllocator *allocator);
/* CancelFightResult methods */
void   cancel_fight_result__init
                     (CancelFightResult         *message);
size_t cancel_fight_result__get_packed_size
                     (const CancelFightResult   *message);
size_t cancel_fight_result__pack
                     (const CancelFightResult   *message,
                      uint8_t             *out);
size_t cancel_fight_result__pack_to_buffer
                     (const CancelFightResult   *message,
                      ProtobufCBuffer     *buffer);
CancelFightResult *
       cancel_fight_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cancel_fight_result__free_unpacked
                     (CancelFightResult *message,
                      ProtobufCAllocator *allocator);
/* GuildInfoDefine methods */
void   guild_info_define__init
                     (GuildInfoDefine         *message);
size_t guild_info_define__get_packed_size
                     (const GuildInfoDefine   *message);
size_t guild_info_define__pack
                     (const GuildInfoDefine   *message,
                      uint8_t             *out);
size_t guild_info_define__pack_to_buffer
                     (const GuildInfoDefine   *message,
                      ProtobufCBuffer     *buffer);
GuildInfoDefine *
       guild_info_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   guild_info_define__free_unpacked
                     (GuildInfoDefine *message,
                      ProtobufCAllocator *allocator);
/* GetGuildList methods */
void   get_guild_list__init
                     (GetGuildList         *message);
size_t get_guild_list__get_packed_size
                     (const GetGuildList   *message);
size_t get_guild_list__pack
                     (const GetGuildList   *message,
                      uint8_t             *out);
size_t get_guild_list__pack_to_buffer
                     (const GetGuildList   *message,
                      ProtobufCBuffer     *buffer);
GetGuildList *
       get_guild_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_guild_list__free_unpacked
                     (GetGuildList *message,
                      ProtobufCAllocator *allocator);
/* GetGuildListResult methods */
void   get_guild_list_result__init
                     (GetGuildListResult         *message);
size_t get_guild_list_result__get_packed_size
                     (const GetGuildListResult   *message);
size_t get_guild_list_result__pack
                     (const GetGuildListResult   *message,
                      uint8_t             *out);
size_t get_guild_list_result__pack_to_buffer
                     (const GetGuildListResult   *message,
                      ProtobufCBuffer     *buffer);
GetGuildListResult *
       get_guild_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_guild_list_result__free_unpacked
                     (GetGuildListResult *message,
                      ProtobufCAllocator *allocator);
/* GetMyGuildDetails methods */
void   get_my_guild_details__init
                     (GetMyGuildDetails         *message);
size_t get_my_guild_details__get_packed_size
                     (const GetMyGuildDetails   *message);
size_t get_my_guild_details__pack
                     (const GetMyGuildDetails   *message,
                      uint8_t             *out);
size_t get_my_guild_details__pack_to_buffer
                     (const GetMyGuildDetails   *message,
                      ProtobufCBuffer     *buffer);
GetMyGuildDetails *
       get_my_guild_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_my_guild_details__free_unpacked
                     (GetMyGuildDetails *message,
                      ProtobufCAllocator *allocator);
/* GuildPersonalInfoDefine methods */
void   guild_personal_info_define__init
                     (GuildPersonalInfoDefine         *message);
size_t guild_personal_info_define__get_packed_size
                     (const GuildPersonalInfoDefine   *message);
size_t guild_personal_info_define__pack
                     (const GuildPersonalInfoDefine   *message,
                      uint8_t             *out);
size_t guild_personal_info_define__pack_to_buffer
                     (const GuildPersonalInfoDefine   *message,
                      ProtobufCBuffer     *buffer);
GuildPersonalInfoDefine *
       guild_personal_info_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   guild_personal_info_define__free_unpacked
                     (GuildPersonalInfoDefine *message,
                      ProtobufCAllocator *allocator);
/* GuildRelationDefine methods */
void   guild_relation_define__init
                     (GuildRelationDefine         *message);
size_t guild_relation_define__get_packed_size
                     (const GuildRelationDefine   *message);
size_t guild_relation_define__pack
                     (const GuildRelationDefine   *message,
                      uint8_t             *out);
size_t guild_relation_define__pack_to_buffer
                     (const GuildRelationDefine   *message,
                      ProtobufCBuffer     *buffer);
GuildRelationDefine *
       guild_relation_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   guild_relation_define__free_unpacked
                     (GuildRelationDefine *message,
                      ProtobufCAllocator *allocator);
/* GetMyGuildDetailsResult methods */
void   get_my_guild_details_result__init
                     (GetMyGuildDetailsResult         *message);
size_t get_my_guild_details_result__get_packed_size
                     (const GetMyGuildDetailsResult   *message);
size_t get_my_guild_details_result__pack
                     (const GetMyGuildDetailsResult   *message,
                      uint8_t             *out);
size_t get_my_guild_details_result__pack_to_buffer
                     (const GetMyGuildDetailsResult   *message,
                      ProtobufCBuffer     *buffer);
GetMyGuildDetailsResult *
       get_my_guild_details_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_my_guild_details_result__free_unpacked
                     (GetMyGuildDetailsResult *message,
                      ProtobufCAllocator *allocator);
/* GetApplyInfo methods */
void   get_apply_info__init
                     (GetApplyInfo         *message);
size_t get_apply_info__get_packed_size
                     (const GetApplyInfo   *message);
size_t get_apply_info__pack
                     (const GetApplyInfo   *message,
                      uint8_t             *out);
size_t get_apply_info__pack_to_buffer
                     (const GetApplyInfo   *message,
                      ProtobufCBuffer     *buffer);
GetApplyInfo *
       get_apply_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_apply_info__free_unpacked
                     (GetApplyInfo *message,
                      ProtobufCAllocator *allocator);
/* ApplyPersonInfoDefine methods */
void   apply_person_info_define__init
                     (ApplyPersonInfoDefine         *message);
size_t apply_person_info_define__get_packed_size
                     (const ApplyPersonInfoDefine   *message);
size_t apply_person_info_define__pack
                     (const ApplyPersonInfoDefine   *message,
                      uint8_t             *out);
size_t apply_person_info_define__pack_to_buffer
                     (const ApplyPersonInfoDefine   *message,
                      ProtobufCBuffer     *buffer);
ApplyPersonInfoDefine *
       apply_person_info_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   apply_person_info_define__free_unpacked
                     (ApplyPersonInfoDefine *message,
                      ProtobufCAllocator *allocator);
/* GetApplyInfoResult methods */
void   get_apply_info_result__init
                     (GetApplyInfoResult         *message);
size_t get_apply_info_result__get_packed_size
                     (const GetApplyInfoResult   *message);
size_t get_apply_info_result__pack
                     (const GetApplyInfoResult   *message,
                      uint8_t             *out);
size_t get_apply_info_result__pack_to_buffer
                     (const GetApplyInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetApplyInfoResult *
       get_apply_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_apply_info_result__free_unpacked
                     (GetApplyInfoResult *message,
                      ProtobufCAllocator *allocator);
/* CreateNewGuild methods */
void   create_new_guild__init
                     (CreateNewGuild         *message);
size_t create_new_guild__get_packed_size
                     (const CreateNewGuild   *message);
size_t create_new_guild__pack
                     (const CreateNewGuild   *message,
                      uint8_t             *out);
size_t create_new_guild__pack_to_buffer
                     (const CreateNewGuild   *message,
                      ProtobufCBuffer     *buffer);
CreateNewGuild *
       create_new_guild__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_new_guild__free_unpacked
                     (CreateNewGuild *message,
                      ProtobufCAllocator *allocator);
/* CreateNewGuildResult methods */
void   create_new_guild_result__init
                     (CreateNewGuildResult         *message);
size_t create_new_guild_result__get_packed_size
                     (const CreateNewGuildResult   *message);
size_t create_new_guild_result__pack
                     (const CreateNewGuildResult   *message,
                      uint8_t             *out);
size_t create_new_guild_result__pack_to_buffer
                     (const CreateNewGuildResult   *message,
                      ProtobufCBuffer     *buffer);
CreateNewGuildResult *
       create_new_guild_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_new_guild_result__free_unpacked
                     (CreateNewGuildResult *message,
                      ProtobufCAllocator *allocator);
/* JoinGuildRequest methods */
void   join_guild_request__init
                     (JoinGuildRequest         *message);
size_t join_guild_request__get_packed_size
                     (const JoinGuildRequest   *message);
size_t join_guild_request__pack
                     (const JoinGuildRequest   *message,
                      uint8_t             *out);
size_t join_guild_request__pack_to_buffer
                     (const JoinGuildRequest   *message,
                      ProtobufCBuffer     *buffer);
JoinGuildRequest *
       join_guild_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   join_guild_request__free_unpacked
                     (JoinGuildRequest *message,
                      ProtobufCAllocator *allocator);
/* JoinGuildRequestResult methods */
void   join_guild_request_result__init
                     (JoinGuildRequestResult         *message);
size_t join_guild_request_result__get_packed_size
                     (const JoinGuildRequestResult   *message);
size_t join_guild_request_result__pack
                     (const JoinGuildRequestResult   *message,
                      uint8_t             *out);
size_t join_guild_request_result__pack_to_buffer
                     (const JoinGuildRequestResult   *message,
                      ProtobufCBuffer     *buffer);
JoinGuildRequestResult *
       join_guild_request_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   join_guild_request_result__free_unpacked
                     (JoinGuildRequestResult *message,
                      ProtobufCAllocator *allocator);
/* GetGuildDetails methods */
void   get_guild_details__init
                     (GetGuildDetails         *message);
size_t get_guild_details__get_packed_size
                     (const GetGuildDetails   *message);
size_t get_guild_details__pack
                     (const GetGuildDetails   *message,
                      uint8_t             *out);
size_t get_guild_details__pack_to_buffer
                     (const GetGuildDetails   *message,
                      ProtobufCBuffer     *buffer);
GetGuildDetails *
       get_guild_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_guild_details__free_unpacked
                     (GetGuildDetails *message,
                      ProtobufCAllocator *allocator);
/* GetGuildDetailsResult methods */
void   get_guild_details_result__init
                     (GetGuildDetailsResult         *message);
size_t get_guild_details_result__get_packed_size
                     (const GetGuildDetailsResult   *message);
size_t get_guild_details_result__pack
                     (const GetGuildDetailsResult   *message,
                      uint8_t             *out);
size_t get_guild_details_result__pack_to_buffer
                     (const GetGuildDetailsResult   *message,
                      ProtobufCBuffer     *buffer);
GetGuildDetailsResult *
       get_guild_details_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_guild_details_result__free_unpacked
                     (GetGuildDetailsResult *message,
                      ProtobufCAllocator *allocator);
/* ChangeGuildIntro methods */
void   change_guild_intro__init
                     (ChangeGuildIntro         *message);
size_t change_guild_intro__get_packed_size
                     (const ChangeGuildIntro   *message);
size_t change_guild_intro__pack
                     (const ChangeGuildIntro   *message,
                      uint8_t             *out);
size_t change_guild_intro__pack_to_buffer
                     (const ChangeGuildIntro   *message,
                      ProtobufCBuffer     *buffer);
ChangeGuildIntro *
       change_guild_intro__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   change_guild_intro__free_unpacked
                     (ChangeGuildIntro *message,
                      ProtobufCAllocator *allocator);
/* ChangeGuildIntroResult methods */
void   change_guild_intro_result__init
                     (ChangeGuildIntroResult         *message);
size_t change_guild_intro_result__get_packed_size
                     (const ChangeGuildIntroResult   *message);
size_t change_guild_intro_result__pack
                     (const ChangeGuildIntroResult   *message,
                      uint8_t             *out);
size_t change_guild_intro_result__pack_to_buffer
                     (const ChangeGuildIntroResult   *message,
                      ProtobufCBuffer     *buffer);
ChangeGuildIntroResult *
       change_guild_intro_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   change_guild_intro_result__free_unpacked
                     (ChangeGuildIntroResult *message,
                      ProtobufCAllocator *allocator);
/* ExpandGuildCapacity methods */
void   expand_guild_capacity__init
                     (ExpandGuildCapacity         *message);
size_t expand_guild_capacity__get_packed_size
                     (const ExpandGuildCapacity   *message);
size_t expand_guild_capacity__pack
                     (const ExpandGuildCapacity   *message,
                      uint8_t             *out);
size_t expand_guild_capacity__pack_to_buffer
                     (const ExpandGuildCapacity   *message,
                      ProtobufCBuffer     *buffer);
ExpandGuildCapacity *
       expand_guild_capacity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   expand_guild_capacity__free_unpacked
                     (ExpandGuildCapacity *message,
                      ProtobufCAllocator *allocator);
/* ExpandGuildCapacityResult methods */
void   expand_guild_capacity_result__init
                     (ExpandGuildCapacityResult         *message);
size_t expand_guild_capacity_result__get_packed_size
                     (const ExpandGuildCapacityResult   *message);
size_t expand_guild_capacity_result__pack
                     (const ExpandGuildCapacityResult   *message,
                      uint8_t             *out);
size_t expand_guild_capacity_result__pack_to_buffer
                     (const ExpandGuildCapacityResult   *message,
                      ProtobufCBuffer     *buffer);
ExpandGuildCapacityResult *
       expand_guild_capacity_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   expand_guild_capacity_result__free_unpacked
                     (ExpandGuildCapacityResult *message,
                      ProtobufCAllocator *allocator);
/* GuildMemberPermissionDefine methods */
void   guild_member_permission_define__init
                     (GuildMemberPermissionDefine         *message);
size_t guild_member_permission_define__get_packed_size
                     (const GuildMemberPermissionDefine   *message);
size_t guild_member_permission_define__pack
                     (const GuildMemberPermissionDefine   *message,
                      uint8_t             *out);
size_t guild_member_permission_define__pack_to_buffer
                     (const GuildMemberPermissionDefine   *message,
                      ProtobufCBuffer     *buffer);
GuildMemberPermissionDefine *
       guild_member_permission_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   guild_member_permission_define__free_unpacked
                     (GuildMemberPermissionDefine *message,
                      ProtobufCAllocator *allocator);
/* GetGuildMemberPermission methods */
void   get_guild_member_permission__init
                     (GetGuildMemberPermission         *message);
size_t get_guild_member_permission__get_packed_size
                     (const GetGuildMemberPermission   *message);
size_t get_guild_member_permission__pack
                     (const GetGuildMemberPermission   *message,
                      uint8_t             *out);
size_t get_guild_member_permission__pack_to_buffer
                     (const GetGuildMemberPermission   *message,
                      ProtobufCBuffer     *buffer);
GetGuildMemberPermission *
       get_guild_member_permission__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_guild_member_permission__free_unpacked
                     (GetGuildMemberPermission *message,
                      ProtobufCAllocator *allocator);
/* GetGuildMemberPermissionResult methods */
void   get_guild_member_permission_result__init
                     (GetGuildMemberPermissionResult         *message);
size_t get_guild_member_permission_result__get_packed_size
                     (const GetGuildMemberPermissionResult   *message);
size_t get_guild_member_permission_result__pack
                     (const GetGuildMemberPermissionResult   *message,
                      uint8_t             *out);
size_t get_guild_member_permission_result__pack_to_buffer
                     (const GetGuildMemberPermissionResult   *message,
                      ProtobufCBuffer     *buffer);
GetGuildMemberPermissionResult *
       get_guild_member_permission_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_guild_member_permission_result__free_unpacked
                     (GetGuildMemberPermissionResult *message,
                      ProtobufCAllocator *allocator);
/* SetGuildPermissionDefine methods */
void   set_guild_permission_define__init
                     (SetGuildPermissionDefine         *message);
size_t set_guild_permission_define__get_packed_size
                     (const SetGuildPermissionDefine   *message);
size_t set_guild_permission_define__pack
                     (const SetGuildPermissionDefine   *message,
                      uint8_t             *out);
size_t set_guild_permission_define__pack_to_buffer
                     (const SetGuildPermissionDefine   *message,
                      ProtobufCBuffer     *buffer);
SetGuildPermissionDefine *
       set_guild_permission_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_guild_permission_define__free_unpacked
                     (SetGuildPermissionDefine *message,
                      ProtobufCAllocator *allocator);
/* SetGuildMemberPermission methods */
void   set_guild_member_permission__init
                     (SetGuildMemberPermission         *message);
size_t set_guild_member_permission__get_packed_size
                     (const SetGuildMemberPermission   *message);
size_t set_guild_member_permission__pack
                     (const SetGuildMemberPermission   *message,
                      uint8_t             *out);
size_t set_guild_member_permission__pack_to_buffer
                     (const SetGuildMemberPermission   *message,
                      ProtobufCBuffer     *buffer);
SetGuildMemberPermission *
       set_guild_member_permission__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_guild_member_permission__free_unpacked
                     (SetGuildMemberPermission *message,
                      ProtobufCAllocator *allocator);
/* SetGuildMemberPermissionResult methods */
void   set_guild_member_permission_result__init
                     (SetGuildMemberPermissionResult         *message);
size_t set_guild_member_permission_result__get_packed_size
                     (const SetGuildMemberPermissionResult   *message);
size_t set_guild_member_permission_result__pack
                     (const SetGuildMemberPermissionResult   *message,
                      uint8_t             *out);
size_t set_guild_member_permission_result__pack_to_buffer
                     (const SetGuildMemberPermissionResult   *message,
                      ProtobufCBuffer     *buffer);
SetGuildMemberPermissionResult *
       set_guild_member_permission_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_guild_member_permission_result__free_unpacked
                     (SetGuildMemberPermissionResult *message,
                      ProtobufCAllocator *allocator);
/* GetHiredCaptains methods */
void   get_hired_captains__init
                     (GetHiredCaptains         *message);
size_t get_hired_captains__get_packed_size
                     (const GetHiredCaptains   *message);
size_t get_hired_captains__pack
                     (const GetHiredCaptains   *message,
                      uint8_t             *out);
size_t get_hired_captains__pack_to_buffer
                     (const GetHiredCaptains   *message,
                      ProtobufCBuffer     *buffer);
GetHiredCaptains *
       get_hired_captains__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_hired_captains__free_unpacked
                     (GetHiredCaptains *message,
                      ProtobufCAllocator *allocator);
/* GetHiredCaptainsResult methods */
void   get_hired_captains_result__init
                     (GetHiredCaptainsResult         *message);
size_t get_hired_captains_result__get_packed_size
                     (const GetHiredCaptainsResult   *message);
size_t get_hired_captains_result__pack
                     (const GetHiredCaptainsResult   *message,
                      uint8_t             *out);
size_t get_hired_captains_result__pack_to_buffer
                     (const GetHiredCaptainsResult   *message,
                      ProtobufCBuffer     *buffer);
GetHiredCaptainsResult *
       get_hired_captains_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_hired_captains_result__free_unpacked
                     (GetHiredCaptainsResult *message,
                      ProtobufCAllocator *allocator);
/* DealWithGuildJoin methods */
void   deal_with_guild_join__init
                     (DealWithGuildJoin         *message);
size_t deal_with_guild_join__get_packed_size
                     (const DealWithGuildJoin   *message);
size_t deal_with_guild_join__pack
                     (const DealWithGuildJoin   *message,
                      uint8_t             *out);
size_t deal_with_guild_join__pack_to_buffer
                     (const DealWithGuildJoin   *message,
                      ProtobufCBuffer     *buffer);
DealWithGuildJoin *
       deal_with_guild_join__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   deal_with_guild_join__free_unpacked
                     (DealWithGuildJoin *message,
                      ProtobufCAllocator *allocator);
/* DealWithGuildJoinResult methods */
void   deal_with_guild_join_result__init
                     (DealWithGuildJoinResult         *message);
size_t deal_with_guild_join_result__get_packed_size
                     (const DealWithGuildJoinResult   *message);
size_t deal_with_guild_join_result__pack
                     (const DealWithGuildJoinResult   *message,
                      uint8_t             *out);
size_t deal_with_guild_join_result__pack_to_buffer
                     (const DealWithGuildJoinResult   *message,
                      ProtobufCBuffer     *buffer);
DealWithGuildJoinResult *
       deal_with_guild_join_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   deal_with_guild_join_result__free_unpacked
                     (DealWithGuildJoinResult *message,
                      ProtobufCAllocator *allocator);
/* ChangeGuildAnnouncement methods */
void   change_guild_announcement__init
                     (ChangeGuildAnnouncement         *message);
size_t change_guild_announcement__get_packed_size
                     (const ChangeGuildAnnouncement   *message);
size_t change_guild_announcement__pack
                     (const ChangeGuildAnnouncement   *message,
                      uint8_t             *out);
size_t change_guild_announcement__pack_to_buffer
                     (const ChangeGuildAnnouncement   *message,
                      ProtobufCBuffer     *buffer);
ChangeGuildAnnouncement *
       change_guild_announcement__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   change_guild_announcement__free_unpacked
                     (ChangeGuildAnnouncement *message,
                      ProtobufCAllocator *allocator);
/* ChangeGuildAnnouncementResult methods */
void   change_guild_announcement_result__init
                     (ChangeGuildAnnouncementResult         *message);
size_t change_guild_announcement_result__get_packed_size
                     (const ChangeGuildAnnouncementResult   *message);
size_t change_guild_announcement_result__pack
                     (const ChangeGuildAnnouncementResult   *message,
                      uint8_t             *out);
size_t change_guild_announcement_result__pack_to_buffer
                     (const ChangeGuildAnnouncementResult   *message,
                      ProtobufCBuffer     *buffer);
ChangeGuildAnnouncementResult *
       change_guild_announcement_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   change_guild_announcement_result__free_unpacked
                     (ChangeGuildAnnouncementResult *message,
                      ProtobufCAllocator *allocator);
/* RemoveGuildMember methods */
void   remove_guild_member__init
                     (RemoveGuildMember         *message);
size_t remove_guild_member__get_packed_size
                     (const RemoveGuildMember   *message);
size_t remove_guild_member__pack
                     (const RemoveGuildMember   *message,
                      uint8_t             *out);
size_t remove_guild_member__pack_to_buffer
                     (const RemoveGuildMember   *message,
                      ProtobufCBuffer     *buffer);
RemoveGuildMember *
       remove_guild_member__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remove_guild_member__free_unpacked
                     (RemoveGuildMember *message,
                      ProtobufCAllocator *allocator);
/* RemoveGuildMemberResult methods */
void   remove_guild_member_result__init
                     (RemoveGuildMemberResult         *message);
size_t remove_guild_member_result__get_packed_size
                     (const RemoveGuildMemberResult   *message);
size_t remove_guild_member_result__pack
                     (const RemoveGuildMemberResult   *message,
                      uint8_t             *out);
size_t remove_guild_member_result__pack_to_buffer
                     (const RemoveGuildMemberResult   *message,
                      ProtobufCBuffer     *buffer);
RemoveGuildMemberResult *
       remove_guild_member_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remove_guild_member_result__free_unpacked
                     (RemoveGuildMemberResult *message,
                      ProtobufCAllocator *allocator);
/* ExitFromGuild methods */
void   exit_from_guild__init
                     (ExitFromGuild         *message);
size_t exit_from_guild__get_packed_size
                     (const ExitFromGuild   *message);
size_t exit_from_guild__pack
                     (const ExitFromGuild   *message,
                      uint8_t             *out);
size_t exit_from_guild__pack_to_buffer
                     (const ExitFromGuild   *message,
                      ProtobufCBuffer     *buffer);
ExitFromGuild *
       exit_from_guild__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   exit_from_guild__free_unpacked
                     (ExitFromGuild *message,
                      ProtobufCAllocator *allocator);
/* ExitFromGuildResult methods */
void   exit_from_guild_result__init
                     (ExitFromGuildResult         *message);
size_t exit_from_guild_result__get_packed_size
                     (const ExitFromGuildResult   *message);
size_t exit_from_guild_result__pack
                     (const ExitFromGuildResult   *message,
                      uint8_t             *out);
size_t exit_from_guild_result__pack_to_buffer
                     (const ExitFromGuildResult   *message,
                      ProtobufCBuffer     *buffer);
ExitFromGuildResult *
       exit_from_guild_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   exit_from_guild_result__free_unpacked
                     (ExitFromGuildResult *message,
                      ProtobufCAllocator *allocator);
/* DismissGuild methods */
void   dismiss_guild__init
                     (DismissGuild         *message);
size_t dismiss_guild__get_packed_size
                     (const DismissGuild   *message);
size_t dismiss_guild__pack
                     (const DismissGuild   *message,
                      uint8_t             *out);
size_t dismiss_guild__pack_to_buffer
                     (const DismissGuild   *message,
                      ProtobufCBuffer     *buffer);
DismissGuild *
       dismiss_guild__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dismiss_guild__free_unpacked
                     (DismissGuild *message,
                      ProtobufCAllocator *allocator);
/* DismissGuildResult methods */
void   dismiss_guild_result__init
                     (DismissGuildResult         *message);
size_t dismiss_guild_result__get_packed_size
                     (const DismissGuildResult   *message);
size_t dismiss_guild_result__pack
                     (const DismissGuildResult   *message,
                      uint8_t             *out);
size_t dismiss_guild_result__pack_to_buffer
                     (const DismissGuildResult   *message,
                      ProtobufCBuffer     *buffer);
DismissGuildResult *
       dismiss_guild_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dismiss_guild_result__free_unpacked
                     (DismissGuildResult *message,
                      ProtobufCAllocator *allocator);
/* GetSearchGuildList methods */
void   get_search_guild_list__init
                     (GetSearchGuildList         *message);
size_t get_search_guild_list__get_packed_size
                     (const GetSearchGuildList   *message);
size_t get_search_guild_list__pack
                     (const GetSearchGuildList   *message,
                      uint8_t             *out);
size_t get_search_guild_list__pack_to_buffer
                     (const GetSearchGuildList   *message,
                      ProtobufCBuffer     *buffer);
GetSearchGuildList *
       get_search_guild_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_search_guild_list__free_unpacked
                     (GetSearchGuildList *message,
                      ProtobufCAllocator *allocator);
/* GetSearchGuildListResult methods */
void   get_search_guild_list_result__init
                     (GetSearchGuildListResult         *message);
size_t get_search_guild_list_result__get_packed_size
                     (const GetSearchGuildListResult   *message);
size_t get_search_guild_list_result__pack
                     (const GetSearchGuildListResult   *message,
                      uint8_t             *out);
size_t get_search_guild_list_result__pack_to_buffer
                     (const GetSearchGuildListResult   *message,
                      ProtobufCBuffer     *buffer);
GetSearchGuildListResult *
       get_search_guild_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_search_guild_list_result__free_unpacked
                     (GetSearchGuildListResult *message,
                      ProtobufCAllocator *allocator);
/* RefreshCaptainList methods */
void   refresh_captain_list__init
                     (RefreshCaptainList         *message);
size_t refresh_captain_list__get_packed_size
                     (const RefreshCaptainList   *message);
size_t refresh_captain_list__pack
                     (const RefreshCaptainList   *message,
                      uint8_t             *out);
size_t refresh_captain_list__pack_to_buffer
                     (const RefreshCaptainList   *message,
                      ProtobufCBuffer     *buffer);
RefreshCaptainList *
       refresh_captain_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   refresh_captain_list__free_unpacked
                     (RefreshCaptainList *message,
                      ProtobufCAllocator *allocator);
/* RefreshCaptainListResult methods */
void   refresh_captain_list_result__init
                     (RefreshCaptainListResult         *message);
size_t refresh_captain_list_result__get_packed_size
                     (const RefreshCaptainListResult   *message);
size_t refresh_captain_list_result__pack
                     (const RefreshCaptainListResult   *message,
                      uint8_t             *out);
size_t refresh_captain_list_result__pack_to_buffer
                     (const RefreshCaptainListResult   *message,
                      ProtobufCBuffer     *buffer);
RefreshCaptainListResult *
       refresh_captain_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   refresh_captain_list_result__free_unpacked
                     (RefreshCaptainListResult *message,
                      ProtobufCAllocator *allocator);
/* GetFriendsList methods */
void   get_friends_list__init
                     (GetFriendsList         *message);
size_t get_friends_list__get_packed_size
                     (const GetFriendsList   *message);
size_t get_friends_list__pack
                     (const GetFriendsList   *message,
                      uint8_t             *out);
size_t get_friends_list__pack_to_buffer
                     (const GetFriendsList   *message,
                      ProtobufCBuffer     *buffer);
GetFriendsList *
       get_friends_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_friends_list__free_unpacked
                     (GetFriendsList *message,
                      ProtobufCAllocator *allocator);
/* FriendsDefine methods */
void   friends_define__init
                     (FriendsDefine         *message);
size_t friends_define__get_packed_size
                     (const FriendsDefine   *message);
size_t friends_define__pack
                     (const FriendsDefine   *message,
                      uint8_t             *out);
size_t friends_define__pack_to_buffer
                     (const FriendsDefine   *message,
                      ProtobufCBuffer     *buffer);
FriendsDefine *
       friends_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friends_define__free_unpacked
                     (FriendsDefine *message,
                      ProtobufCAllocator *allocator);
/* GetFriendsListResult methods */
void   get_friends_list_result__init
                     (GetFriendsListResult         *message);
size_t get_friends_list_result__get_packed_size
                     (const GetFriendsListResult   *message);
size_t get_friends_list_result__pack
                     (const GetFriendsListResult   *message,
                      uint8_t             *out);
size_t get_friends_list_result__pack_to_buffer
                     (const GetFriendsListResult   *message,
                      ProtobufCBuffer     *buffer);
GetFriendsListResult *
       get_friends_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_friends_list_result__free_unpacked
                     (GetFriendsListResult *message,
                      ProtobufCAllocator *allocator);
/* GetBlackList methods */
void   get_black_list__init
                     (GetBlackList         *message);
size_t get_black_list__get_packed_size
                     (const GetBlackList   *message);
size_t get_black_list__pack
                     (const GetBlackList   *message,
                      uint8_t             *out);
size_t get_black_list__pack_to_buffer
                     (const GetBlackList   *message,
                      ProtobufCBuffer     *buffer);
GetBlackList *
       get_black_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_black_list__free_unpacked
                     (GetBlackList *message,
                      ProtobufCAllocator *allocator);
/* GetBlackListResult methods */
void   get_black_list_result__init
                     (GetBlackListResult         *message);
size_t get_black_list_result__get_packed_size
                     (const GetBlackListResult   *message);
size_t get_black_list_result__pack
                     (const GetBlackListResult   *message,
                      uint8_t             *out);
size_t get_black_list_result__pack_to_buffer
                     (const GetBlackListResult   *message,
                      ProtobufCBuffer     *buffer);
GetBlackListResult *
       get_black_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_black_list_result__free_unpacked
                     (GetBlackListResult *message,
                      ProtobufCAllocator *allocator);
/* FriendsOperation methods */
void   friends_operation__init
                     (FriendsOperation         *message);
size_t friends_operation__get_packed_size
                     (const FriendsOperation   *message);
size_t friends_operation__pack
                     (const FriendsOperation   *message,
                      uint8_t             *out);
size_t friends_operation__pack_to_buffer
                     (const FriendsOperation   *message,
                      ProtobufCBuffer     *buffer);
FriendsOperation *
       friends_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friends_operation__free_unpacked
                     (FriendsOperation *message,
                      ProtobufCAllocator *allocator);
/* FriendsOperationResult methods */
void   friends_operation_result__init
                     (FriendsOperationResult         *message);
size_t friends_operation_result__get_packed_size
                     (const FriendsOperationResult   *message);
size_t friends_operation_result__pack
                     (const FriendsOperationResult   *message,
                      uint8_t             *out);
size_t friends_operation_result__pack_to_buffer
                     (const FriendsOperationResult   *message,
                      ProtobufCBuffer     *buffer);
FriendsOperationResult *
       friends_operation_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friends_operation_result__free_unpacked
                     (FriendsOperationResult *message,
                      ProtobufCAllocator *allocator);
/* GetFriendsReqList methods */
void   get_friends_req_list__init
                     (GetFriendsReqList         *message);
size_t get_friends_req_list__get_packed_size
                     (const GetFriendsReqList   *message);
size_t get_friends_req_list__pack
                     (const GetFriendsReqList   *message,
                      uint8_t             *out);
size_t get_friends_req_list__pack_to_buffer
                     (const GetFriendsReqList   *message,
                      ProtobufCBuffer     *buffer);
GetFriendsReqList *
       get_friends_req_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_friends_req_list__free_unpacked
                     (GetFriendsReqList *message,
                      ProtobufCAllocator *allocator);
/* GetFriendsReqListResult methods */
void   get_friends_req_list_result__init
                     (GetFriendsReqListResult         *message);
size_t get_friends_req_list_result__get_packed_size
                     (const GetFriendsReqListResult   *message);
size_t get_friends_req_list_result__pack
                     (const GetFriendsReqListResult   *message,
                      uint8_t             *out);
size_t get_friends_req_list_result__pack_to_buffer
                     (const GetFriendsReqListResult   *message,
                      ProtobufCBuffer     *buffer);
GetFriendsReqListResult *
       get_friends_req_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_friends_req_list_result__free_unpacked
                     (GetFriendsReqListResult *message,
                      ProtobufCAllocator *allocator);
/* FireCaptain methods */
void   fire_captain__init
                     (FireCaptain         *message);
size_t fire_captain__get_packed_size
                     (const FireCaptain   *message);
size_t fire_captain__pack
                     (const FireCaptain   *message,
                      uint8_t             *out);
size_t fire_captain__pack_to_buffer
                     (const FireCaptain   *message,
                      ProtobufCBuffer     *buffer);
FireCaptain *
       fire_captain__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fire_captain__free_unpacked
                     (FireCaptain *message,
                      ProtobufCAllocator *allocator);
/* FireCaptainResult methods */
void   fire_captain_result__init
                     (FireCaptainResult         *message);
size_t fire_captain_result__get_packed_size
                     (const FireCaptainResult   *message);
size_t fire_captain_result__pack
                     (const FireCaptainResult   *message,
                      uint8_t             *out);
size_t fire_captain_result__pack_to_buffer
                     (const FireCaptainResult   *message,
                      ProtobufCBuffer     *buffer);
FireCaptainResult *
       fire_captain_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fire_captain_result__free_unpacked
                     (FireCaptainResult *message,
                      ProtobufCAllocator *allocator);
/* DestoryItems methods */
void   destory_items__init
                     (DestoryItems         *message);
size_t destory_items__get_packed_size
                     (const DestoryItems   *message);
size_t destory_items__pack
                     (const DestoryItems   *message,
                      uint8_t             *out);
size_t destory_items__pack_to_buffer
                     (const DestoryItems   *message,
                      ProtobufCBuffer     *buffer);
DestoryItems *
       destory_items__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   destory_items__free_unpacked
                     (DestoryItems *message,
                      ProtobufCAllocator *allocator);
/* DestoryItemsResult methods */
void   destory_items_result__init
                     (DestoryItemsResult         *message);
size_t destory_items_result__get_packed_size
                     (const DestoryItemsResult   *message);
size_t destory_items_result__pack
                     (const DestoryItemsResult   *message,
                      uint8_t             *out);
size_t destory_items_result__pack_to_buffer
                     (const DestoryItemsResult   *message,
                      ProtobufCBuffer     *buffer);
DestoryItemsResult *
       destory_items_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   destory_items_result__free_unpacked
                     (DestoryItemsResult *message,
                      ProtobufCAllocator *allocator);
/* SearchUserByName methods */
void   search_user_by_name__init
                     (SearchUserByName         *message);
size_t search_user_by_name__get_packed_size
                     (const SearchUserByName   *message);
size_t search_user_by_name__pack
                     (const SearchUserByName   *message,
                      uint8_t             *out);
size_t search_user_by_name__pack_to_buffer
                     (const SearchUserByName   *message,
                      ProtobufCBuffer     *buffer);
SearchUserByName *
       search_user_by_name__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   search_user_by_name__free_unpacked
                     (SearchUserByName *message,
                      ProtobufCAllocator *allocator);
/* SearchUserByNameResult methods */
void   search_user_by_name_result__init
                     (SearchUserByNameResult         *message);
size_t search_user_by_name_result__get_packed_size
                     (const SearchUserByNameResult   *message);
size_t search_user_by_name_result__pack
                     (const SearchUserByNameResult   *message,
                      uint8_t             *out);
size_t search_user_by_name_result__pack_to_buffer
                     (const SearchUserByNameResult   *message,
                      ProtobufCBuffer     *buffer);
SearchUserByNameResult *
       search_user_by_name_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   search_user_by_name_result__free_unpacked
                     (SearchUserByNameResult *message,
                      ProtobufCAllocator *allocator);
/* TakeAllAttachment methods */
void   take_all_attachment__init
                     (TakeAllAttachment         *message);
size_t take_all_attachment__get_packed_size
                     (const TakeAllAttachment   *message);
size_t take_all_attachment__pack
                     (const TakeAllAttachment   *message,
                      uint8_t             *out);
size_t take_all_attachment__pack_to_buffer
                     (const TakeAllAttachment   *message,
                      ProtobufCBuffer     *buffer);
TakeAllAttachment *
       take_all_attachment__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   take_all_attachment__free_unpacked
                     (TakeAllAttachment *message,
                      ProtobufCAllocator *allocator);
/* TakeAllAttachmentResult methods */
void   take_all_attachment_result__init
                     (TakeAllAttachmentResult         *message);
size_t take_all_attachment_result__get_packed_size
                     (const TakeAllAttachmentResult   *message);
size_t take_all_attachment_result__pack
                     (const TakeAllAttachmentResult   *message,
                      uint8_t             *out);
size_t take_all_attachment_result__pack_to_buffer
                     (const TakeAllAttachmentResult   *message,
                      ProtobufCBuffer     *buffer);
TakeAllAttachmentResult *
       take_all_attachment_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   take_all_attachment_result__free_unpacked
                     (TakeAllAttachmentResult *message,
                      ProtobufCAllocator *allocator);
/* GetItemsDetailInfo methods */
void   get_items_detail_info__init
                     (GetItemsDetailInfo         *message);
size_t get_items_detail_info__get_packed_size
                     (const GetItemsDetailInfo   *message);
size_t get_items_detail_info__pack
                     (const GetItemsDetailInfo   *message,
                      uint8_t             *out);
size_t get_items_detail_info__pack_to_buffer
                     (const GetItemsDetailInfo   *message,
                      ProtobufCBuffer     *buffer);
GetItemsDetailInfo *
       get_items_detail_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_items_detail_info__free_unpacked
                     (GetItemsDetailInfo *message,
                      ProtobufCAllocator *allocator);
/* GetItemsDetailInfoResult methods */
void   get_items_detail_info_result__init
                     (GetItemsDetailInfoResult         *message);
size_t get_items_detail_info_result__get_packed_size
                     (const GetItemsDetailInfoResult   *message);
size_t get_items_detail_info_result__pack
                     (const GetItemsDetailInfoResult   *message,
                      uint8_t             *out);
size_t get_items_detail_info_result__pack_to_buffer
                     (const GetItemsDetailInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetItemsDetailInfoResult *
       get_items_detail_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_items_detail_info_result__free_unpacked
                     (GetItemsDetailInfoResult *message,
                      ProtobufCAllocator *allocator);
/* GetDevGoodsInfo methods */
void   get_dev_goods_info__init
                     (GetDevGoodsInfo         *message);
size_t get_dev_goods_info__get_packed_size
                     (const GetDevGoodsInfo   *message);
size_t get_dev_goods_info__pack
                     (const GetDevGoodsInfo   *message,
                      uint8_t             *out);
size_t get_dev_goods_info__pack_to_buffer
                     (const GetDevGoodsInfo   *message,
                      ProtobufCBuffer     *buffer);
GetDevGoodsInfo *
       get_dev_goods_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_dev_goods_info__free_unpacked
                     (GetDevGoodsInfo *message,
                      ProtobufCAllocator *allocator);
/* DevGoodsDetails methods */
void   dev_goods_details__init
                     (DevGoodsDetails         *message);
size_t dev_goods_details__get_packed_size
                     (const DevGoodsDetails   *message);
size_t dev_goods_details__pack
                     (const DevGoodsDetails   *message,
                      uint8_t             *out);
size_t dev_goods_details__pack_to_buffer
                     (const DevGoodsDetails   *message,
                      ProtobufCBuffer     *buffer);
DevGoodsDetails *
       dev_goods_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dev_goods_details__free_unpacked
                     (DevGoodsDetails *message,
                      ProtobufCAllocator *allocator);
/* GetDevGoodsInfoResult methods */
void   get_dev_goods_info_result__init
                     (GetDevGoodsInfoResult         *message);
size_t get_dev_goods_info_result__get_packed_size
                     (const GetDevGoodsInfoResult   *message);
size_t get_dev_goods_info_result__pack
                     (const GetDevGoodsInfoResult   *message,
                      uint8_t             *out);
size_t get_dev_goods_info_result__pack_to_buffer
                     (const GetDevGoodsInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetDevGoodsInfoResult *
       get_dev_goods_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_dev_goods_info_result__free_unpacked
                     (GetDevGoodsInfoResult *message,
                      ProtobufCAllocator *allocator);
/* ProvideDevGoods methods */
void   provide_dev_goods__init
                     (ProvideDevGoods         *message);
size_t provide_dev_goods__get_packed_size
                     (const ProvideDevGoods   *message);
size_t provide_dev_goods__pack
                     (const ProvideDevGoods   *message,
                      uint8_t             *out);
size_t provide_dev_goods__pack_to_buffer
                     (const ProvideDevGoods   *message,
                      ProtobufCBuffer     *buffer);
ProvideDevGoods *
       provide_dev_goods__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   provide_dev_goods__free_unpacked
                     (ProvideDevGoods *message,
                      ProtobufCAllocator *allocator);
/* ProvideDevGoodsResult methods */
void   provide_dev_goods_result__init
                     (ProvideDevGoodsResult         *message);
size_t provide_dev_goods_result__get_packed_size
                     (const ProvideDevGoodsResult   *message);
size_t provide_dev_goods_result__pack
                     (const ProvideDevGoodsResult   *message,
                      uint8_t             *out);
size_t provide_dev_goods_result__pack_to_buffer
                     (const ProvideDevGoodsResult   *message,
                      ProtobufCBuffer     *buffer);
ProvideDevGoodsResult *
       provide_dev_goods_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   provide_dev_goods_result__free_unpacked
                     (ProvideDevGoodsResult *message,
                      ProtobufCAllocator *allocator);
/* GetDevGoodsCount methods */
void   get_dev_goods_count__init
                     (GetDevGoodsCount         *message);
size_t get_dev_goods_count__get_packed_size
                     (const GetDevGoodsCount   *message);
size_t get_dev_goods_count__pack
                     (const GetDevGoodsCount   *message,
                      uint8_t             *out);
size_t get_dev_goods_count__pack_to_buffer
                     (const GetDevGoodsCount   *message,
                      ProtobufCBuffer     *buffer);
GetDevGoodsCount *
       get_dev_goods_count__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_dev_goods_count__free_unpacked
                     (GetDevGoodsCount *message,
                      ProtobufCAllocator *allocator);
/* GetDevGoodsCountResult methods */
void   get_dev_goods_count_result__init
                     (GetDevGoodsCountResult         *message);
size_t get_dev_goods_count_result__get_packed_size
                     (const GetDevGoodsCountResult   *message);
size_t get_dev_goods_count_result__pack
                     (const GetDevGoodsCountResult   *message,
                      uint8_t             *out);
size_t get_dev_goods_count_result__pack_to_buffer
                     (const GetDevGoodsCountResult   *message,
                      ProtobufCBuffer     *buffer);
GetDevGoodsCountResult *
       get_dev_goods_count_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_dev_goods_count_result__free_unpacked
                     (GetDevGoodsCountResult *message,
                      ProtobufCAllocator *allocator);
/* GetFriendValue methods */
void   get_friend_value__init
                     (GetFriendValue         *message);
size_t get_friend_value__get_packed_size
                     (const GetFriendValue   *message);
size_t get_friend_value__pack
                     (const GetFriendValue   *message,
                      uint8_t             *out);
size_t get_friend_value__pack_to_buffer
                     (const GetFriendValue   *message,
                      ProtobufCBuffer     *buffer);
GetFriendValue *
       get_friend_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_friend_value__free_unpacked
                     (GetFriendValue *message,
                      ProtobufCAllocator *allocator);
/* GetFriendValueResult methods */
void   get_friend_value_result__init
                     (GetFriendValueResult         *message);
size_t get_friend_value_result__get_packed_size
                     (const GetFriendValueResult   *message);
size_t get_friend_value_result__pack
                     (const GetFriendValueResult   *message,
                      uint8_t             *out);
size_t get_friend_value_result__pack_to_buffer
                     (const GetFriendValueResult   *message,
                      ProtobufCBuffer     *buffer);
GetFriendValueResult *
       get_friend_value_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_friend_value_result__free_unpacked
                     (GetFriendValueResult *message,
                      ProtobufCAllocator *allocator);
/* GetUserInfoById methods */
void   get_user_info_by_id__init
                     (GetUserInfoById         *message);
size_t get_user_info_by_id__get_packed_size
                     (const GetUserInfoById   *message);
size_t get_user_info_by_id__pack
                     (const GetUserInfoById   *message,
                      uint8_t             *out);
size_t get_user_info_by_id__pack_to_buffer
                     (const GetUserInfoById   *message,
                      ProtobufCBuffer     *buffer);
GetUserInfoById *
       get_user_info_by_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_user_info_by_id__free_unpacked
                     (GetUserInfoById *message,
                      ProtobufCAllocator *allocator);
/* GetUserInfoByIdResult methods */
void   get_user_info_by_id_result__init
                     (GetUserInfoByIdResult         *message);
size_t get_user_info_by_id_result__get_packed_size
                     (const GetUserInfoByIdResult   *message);
size_t get_user_info_by_id_result__pack
                     (const GetUserInfoByIdResult   *message,
                      uint8_t             *out);
size_t get_user_info_by_id_result__pack_to_buffer
                     (const GetUserInfoByIdResult   *message,
                      ProtobufCBuffer     *buffer);
GetUserInfoByIdResult *
       get_user_info_by_id_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_user_info_by_id_result__free_unpacked
                     (GetUserInfoByIdResult *message,
                      ProtobufCAllocator *allocator);
/* TestCreateNewGuild methods */
void   test_create_new_guild__init
                     (TestCreateNewGuild         *message);
size_t test_create_new_guild__get_packed_size
                     (const TestCreateNewGuild   *message);
size_t test_create_new_guild__pack
                     (const TestCreateNewGuild   *message,
                      uint8_t             *out);
size_t test_create_new_guild__pack_to_buffer
                     (const TestCreateNewGuild   *message,
                      ProtobufCBuffer     *buffer);
TestCreateNewGuild *
       test_create_new_guild__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test_create_new_guild__free_unpacked
                     (TestCreateNewGuild *message,
                      ProtobufCAllocator *allocator);
/* TestCreateNewGuildResult methods */
void   test_create_new_guild_result__init
                     (TestCreateNewGuildResult         *message);
size_t test_create_new_guild_result__get_packed_size
                     (const TestCreateNewGuildResult   *message);
size_t test_create_new_guild_result__pack
                     (const TestCreateNewGuildResult   *message,
                      uint8_t             *out);
size_t test_create_new_guild_result__pack_to_buffer
                     (const TestCreateNewGuildResult   *message,
                      ProtobufCBuffer     *buffer);
TestCreateNewGuildResult *
       test_create_new_guild_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test_create_new_guild_result__free_unpacked
                     (TestCreateNewGuildResult *message,
                      ProtobufCAllocator *allocator);
/* InviteUserToGuild methods */
void   invite_user_to_guild__init
                     (InviteUserToGuild         *message);
size_t invite_user_to_guild__get_packed_size
                     (const InviteUserToGuild   *message);
size_t invite_user_to_guild__pack
                     (const InviteUserToGuild   *message,
                      uint8_t             *out);
size_t invite_user_to_guild__pack_to_buffer
                     (const InviteUserToGuild   *message,
                      ProtobufCBuffer     *buffer);
InviteUserToGuild *
       invite_user_to_guild__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   invite_user_to_guild__free_unpacked
                     (InviteUserToGuild *message,
                      ProtobufCAllocator *allocator);
/* InviteUserToGuildResult methods */
void   invite_user_to_guild_result__init
                     (InviteUserToGuildResult         *message);
size_t invite_user_to_guild_result__get_packed_size
                     (const InviteUserToGuildResult   *message);
size_t invite_user_to_guild_result__pack
                     (const InviteUserToGuildResult   *message,
                      uint8_t             *out);
size_t invite_user_to_guild_result__pack_to_buffer
                     (const InviteUserToGuildResult   *message,
                      ProtobufCBuffer     *buffer);
InviteUserToGuildResult *
       invite_user_to_guild_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   invite_user_to_guild_result__free_unpacked
                     (InviteUserToGuildResult *message,
                      ProtobufCAllocator *allocator);
/* GetInvitationList methods */
void   get_invitation_list__init
                     (GetInvitationList         *message);
size_t get_invitation_list__get_packed_size
                     (const GetInvitationList   *message);
size_t get_invitation_list__pack
                     (const GetInvitationList   *message,
                      uint8_t             *out);
size_t get_invitation_list__pack_to_buffer
                     (const GetInvitationList   *message,
                      ProtobufCBuffer     *buffer);
GetInvitationList *
       get_invitation_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_invitation_list__free_unpacked
                     (GetInvitationList *message,
                      ProtobufCAllocator *allocator);
/* InvitationDefine methods */
void   invitation_define__init
                     (InvitationDefine         *message);
size_t invitation_define__get_packed_size
                     (const InvitationDefine   *message);
size_t invitation_define__pack
                     (const InvitationDefine   *message,
                      uint8_t             *out);
size_t invitation_define__pack_to_buffer
                     (const InvitationDefine   *message,
                      ProtobufCBuffer     *buffer);
InvitationDefine *
       invitation_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   invitation_define__free_unpacked
                     (InvitationDefine *message,
                      ProtobufCAllocator *allocator);
/* GetInvitationListResult methods */
void   get_invitation_list_result__init
                     (GetInvitationListResult         *message);
size_t get_invitation_list_result__get_packed_size
                     (const GetInvitationListResult   *message);
size_t get_invitation_list_result__pack
                     (const GetInvitationListResult   *message,
                      uint8_t             *out);
size_t get_invitation_list_result__pack_to_buffer
                     (const GetInvitationListResult   *message,
                      ProtobufCBuffer     *buffer);
GetInvitationListResult *
       get_invitation_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_invitation_list_result__free_unpacked
                     (GetInvitationListResult *message,
                      ProtobufCAllocator *allocator);
/* DealWithInvitation methods */
void   deal_with_invitation__init
                     (DealWithInvitation         *message);
size_t deal_with_invitation__get_packed_size
                     (const DealWithInvitation   *message);
size_t deal_with_invitation__pack
                     (const DealWithInvitation   *message,
                      uint8_t             *out);
size_t deal_with_invitation__pack_to_buffer
                     (const DealWithInvitation   *message,
                      ProtobufCBuffer     *buffer);
DealWithInvitation *
       deal_with_invitation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   deal_with_invitation__free_unpacked
                     (DealWithInvitation *message,
                      ProtobufCAllocator *allocator);
/* DealWithInvitationResult methods */
void   deal_with_invitation_result__init
                     (DealWithInvitationResult         *message);
size_t deal_with_invitation_result__get_packed_size
                     (const DealWithInvitationResult   *message);
size_t deal_with_invitation_result__pack
                     (const DealWithInvitationResult   *message,
                      uint8_t             *out);
size_t deal_with_invitation_result__pack_to_buffer
                     (const DealWithInvitationResult   *message,
                      ProtobufCBuffer     *buffer);
DealWithInvitationResult *
       deal_with_invitation_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   deal_with_invitation_result__free_unpacked
                     (DealWithInvitationResult *message,
                      ProtobufCAllocator *allocator);
/* GetVTicketMarketItems methods */
void   get_vticket_market_items__init
                     (GetVTicketMarketItems         *message);
size_t get_vticket_market_items__get_packed_size
                     (const GetVTicketMarketItems   *message);
size_t get_vticket_market_items__pack
                     (const GetVTicketMarketItems   *message,
                      uint8_t             *out);
size_t get_vticket_market_items__pack_to_buffer
                     (const GetVTicketMarketItems   *message,
                      ProtobufCBuffer     *buffer);
GetVTicketMarketItems *
       get_vticket_market_items__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_vticket_market_items__free_unpacked
                     (GetVTicketMarketItems *message,
                      ProtobufCAllocator *allocator);
/* VTicketMarketItemDefine methods */
void   vticket_market_item_define__init
                     (VTicketMarketItemDefine         *message);
size_t vticket_market_item_define__get_packed_size
                     (const VTicketMarketItemDefine   *message);
size_t vticket_market_item_define__pack
                     (const VTicketMarketItemDefine   *message,
                      uint8_t             *out);
size_t vticket_market_item_define__pack_to_buffer
                     (const VTicketMarketItemDefine   *message,
                      ProtobufCBuffer     *buffer);
VTicketMarketItemDefine *
       vticket_market_item_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vticket_market_item_define__free_unpacked
                     (VTicketMarketItemDefine *message,
                      ProtobufCAllocator *allocator);
/* BlackMarketRandomShipAndEquipDefine methods */
void   black_market_random_ship_and_equip_define__init
                     (BlackMarketRandomShipAndEquipDefine         *message);
size_t black_market_random_ship_and_equip_define__get_packed_size
                     (const BlackMarketRandomShipAndEquipDefine   *message);
size_t black_market_random_ship_and_equip_define__pack
                     (const BlackMarketRandomShipAndEquipDefine   *message,
                      uint8_t             *out);
size_t black_market_random_ship_and_equip_define__pack_to_buffer
                     (const BlackMarketRandomShipAndEquipDefine   *message,
                      ProtobufCBuffer     *buffer);
BlackMarketRandomShipAndEquipDefine *
       black_market_random_ship_and_equip_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   black_market_random_ship_and_equip_define__free_unpacked
                     (BlackMarketRandomShipAndEquipDefine *message,
                      ProtobufCAllocator *allocator);
/* GetVTicketMarketItemsResult methods */
void   get_vticket_market_items_result__init
                     (GetVTicketMarketItemsResult         *message);
size_t get_vticket_market_items_result__get_packed_size
                     (const GetVTicketMarketItemsResult   *message);
size_t get_vticket_market_items_result__pack
                     (const GetVTicketMarketItemsResult   *message,
                      uint8_t             *out);
size_t get_vticket_market_items_result__pack_to_buffer
                     (const GetVTicketMarketItemsResult   *message,
                      ProtobufCBuffer     *buffer);
GetVTicketMarketItemsResult *
       get_vticket_market_items_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_vticket_market_items_result__free_unpacked
                     (GetVTicketMarketItemsResult *message,
                      ProtobufCAllocator *allocator);
/* BuyVTicketMarketItem methods */
void   buy_vticket_market_item__init
                     (BuyVTicketMarketItem         *message);
size_t buy_vticket_market_item__get_packed_size
                     (const BuyVTicketMarketItem   *message);
size_t buy_vticket_market_item__pack
                     (const BuyVTicketMarketItem   *message,
                      uint8_t             *out);
size_t buy_vticket_market_item__pack_to_buffer
                     (const BuyVTicketMarketItem   *message,
                      ProtobufCBuffer     *buffer);
BuyVTicketMarketItem *
       buy_vticket_market_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_vticket_market_item__free_unpacked
                     (BuyVTicketMarketItem *message,
                      ProtobufCAllocator *allocator);
/* BuyVTicketMarketItemResult methods */
void   buy_vticket_market_item_result__init
                     (BuyVTicketMarketItemResult         *message);
size_t buy_vticket_market_item_result__get_packed_size
                     (const BuyVTicketMarketItemResult   *message);
size_t buy_vticket_market_item_result__pack
                     (const BuyVTicketMarketItemResult   *message,
                      uint8_t             *out);
size_t buy_vticket_market_item_result__pack_to_buffer
                     (const BuyVTicketMarketItemResult   *message,
                      ProtobufCBuffer     *buffer);
BuyVTicketMarketItemResult *
       buy_vticket_market_item_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_vticket_market_item_result__free_unpacked
                     (BuyVTicketMarketItemResult *message,
                      ProtobufCAllocator *allocator);
/* GetCurrentInvestData methods */
void   get_current_invest_data__init
                     (GetCurrentInvestData         *message);
size_t get_current_invest_data__get_packed_size
                     (const GetCurrentInvestData   *message);
size_t get_current_invest_data__pack
                     (const GetCurrentInvestData   *message,
                      uint8_t             *out);
size_t get_current_invest_data__pack_to_buffer
                     (const GetCurrentInvestData   *message,
                      ProtobufCBuffer     *buffer);
GetCurrentInvestData *
       get_current_invest_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_current_invest_data__free_unpacked
                     (GetCurrentInvestData *message,
                      ProtobufCAllocator *allocator);
/* GetCurrentInvestDataResult methods */
void   get_current_invest_data_result__init
                     (GetCurrentInvestDataResult         *message);
size_t get_current_invest_data_result__get_packed_size
                     (const GetCurrentInvestDataResult   *message);
size_t get_current_invest_data_result__pack
                     (const GetCurrentInvestDataResult   *message,
                      uint8_t             *out);
size_t get_current_invest_data_result__pack_to_buffer
                     (const GetCurrentInvestDataResult   *message,
                      ProtobufCBuffer     *buffer);
GetCurrentInvestDataResult *
       get_current_invest_data_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_current_invest_data_result__free_unpacked
                     (GetCurrentInvestDataResult *message,
                      ProtobufCAllocator *allocator);
/* GetUserTasks methods */
void   get_user_tasks__init
                     (GetUserTasks         *message);
size_t get_user_tasks__get_packed_size
                     (const GetUserTasks   *message);
size_t get_user_tasks__pack
                     (const GetUserTasks   *message,
                      uint8_t             *out);
size_t get_user_tasks__pack_to_buffer
                     (const GetUserTasks   *message,
                      ProtobufCBuffer     *buffer);
GetUserTasks *
       get_user_tasks__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_user_tasks__free_unpacked
                     (GetUserTasks *message,
                      ProtobufCAllocator *allocator);
/* AttackBossInfo methods */
void   attack_boss_info__init
                     (AttackBossInfo         *message);
size_t attack_boss_info__get_packed_size
                     (const AttackBossInfo   *message);
size_t attack_boss_info__pack
                     (const AttackBossInfo   *message,
                      uint8_t             *out);
size_t attack_boss_info__pack_to_buffer
                     (const AttackBossInfo   *message,
                      ProtobufCBuffer     *buffer);
AttackBossInfo *
       attack_boss_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   attack_boss_info__free_unpacked
                     (AttackBossInfo *message,
                      ProtobufCAllocator *allocator);
/* CompanionTaskDefine methods */
void   companion_task_define__init
                     (CompanionTaskDefine         *message);
size_t companion_task_define__get_packed_size
                     (const CompanionTaskDefine   *message);
size_t companion_task_define__pack
                     (const CompanionTaskDefine   *message,
                      uint8_t             *out);
size_t companion_task_define__pack_to_buffer
                     (const CompanionTaskDefine   *message,
                      ProtobufCBuffer     *buffer);
CompanionTaskDefine *
       companion_task_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   companion_task_define__free_unpacked
                     (CompanionTaskDefine *message,
                      ProtobufCAllocator *allocator);
/* GetUserTasksResult methods */
void   get_user_tasks_result__init
                     (GetUserTasksResult         *message);
size_t get_user_tasks_result__get_packed_size
                     (const GetUserTasksResult   *message);
size_t get_user_tasks_result__pack
                     (const GetUserTasksResult   *message,
                      uint8_t             *out);
size_t get_user_tasks_result__pack_to_buffer
                     (const GetUserTasksResult   *message,
                      ProtobufCBuffer     *buffer);
GetUserTasksResult *
       get_user_tasks_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_user_tasks_result__free_unpacked
                     (GetUserTasksResult *message,
                      ProtobufCAllocator *allocator);
/* UseSudanMask methods */
void   use_sudan_mask__init
                     (UseSudanMask         *message);
size_t use_sudan_mask__get_packed_size
                     (const UseSudanMask   *message);
size_t use_sudan_mask__pack
                     (const UseSudanMask   *message,
                      uint8_t             *out);
size_t use_sudan_mask__pack_to_buffer
                     (const UseSudanMask   *message,
                      ProtobufCBuffer     *buffer);
UseSudanMask *
       use_sudan_mask__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   use_sudan_mask__free_unpacked
                     (UseSudanMask *message,
                      ProtobufCAllocator *allocator);
/* UseSudanMaskResult methods */
void   use_sudan_mask_result__init
                     (UseSudanMaskResult         *message);
size_t use_sudan_mask_result__get_packed_size
                     (const UseSudanMaskResult   *message);
size_t use_sudan_mask_result__pack
                     (const UseSudanMaskResult   *message,
                      uint8_t             *out);
size_t use_sudan_mask_result__pack_to_buffer
                     (const UseSudanMaskResult   *message,
                      ProtobufCBuffer     *buffer);
UseSudanMaskResult *
       use_sudan_mask_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   use_sudan_mask_result__free_unpacked
                     (UseSudanMaskResult *message,
                      ProtobufCAllocator *allocator);
/* EquipHero methods */
void   equip_hero__init
                     (EquipHero         *message);
size_t equip_hero__get_packed_size
                     (const EquipHero   *message);
size_t equip_hero__pack
                     (const EquipHero   *message,
                      uint8_t             *out);
size_t equip_hero__pack_to_buffer
                     (const EquipHero   *message,
                      ProtobufCBuffer     *buffer);
EquipHero *
       equip_hero__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   equip_hero__free_unpacked
                     (EquipHero *message,
                      ProtobufCAllocator *allocator);
/* EquipHeroResult methods */
void   equip_hero_result__init
                     (EquipHeroResult         *message);
size_t equip_hero_result__get_packed_size
                     (const EquipHeroResult   *message);
size_t equip_hero_result__pack
                     (const EquipHeroResult   *message,
                      uint8_t             *out);
size_t equip_hero_result__pack_to_buffer
                     (const EquipHeroResult   *message,
                      ProtobufCBuffer     *buffer);
EquipHeroResult *
       equip_hero_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   equip_hero_result__free_unpacked
                     (EquipHeroResult *message,
                      ProtobufCAllocator *allocator);
/* GetHeroEquip methods */
void   get_hero_equip__init
                     (GetHeroEquip         *message);
size_t get_hero_equip__get_packed_size
                     (const GetHeroEquip   *message);
size_t get_hero_equip__pack
                     (const GetHeroEquip   *message,
                      uint8_t             *out);
size_t get_hero_equip__pack_to_buffer
                     (const GetHeroEquip   *message,
                      ProtobufCBuffer     *buffer);
GetHeroEquip *
       get_hero_equip__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_hero_equip__free_unpacked
                     (GetHeroEquip *message,
                      ProtobufCAllocator *allocator);
/* ItemIdPair methods */
void   item_id_pair__init
                     (ItemIdPair         *message);
size_t item_id_pair__get_packed_size
                     (const ItemIdPair   *message);
size_t item_id_pair__pack
                     (const ItemIdPair   *message,
                      uint8_t             *out);
size_t item_id_pair__pack_to_buffer
                     (const ItemIdPair   *message,
                      ProtobufCBuffer     *buffer);
ItemIdPair *
       item_id_pair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   item_id_pair__free_unpacked
                     (ItemIdPair *message,
                      ProtobufCAllocator *allocator);
/* GetHeroEquipResult methods */
void   get_hero_equip_result__init
                     (GetHeroEquipResult         *message);
size_t get_hero_equip_result__get_packed_size
                     (const GetHeroEquipResult   *message);
size_t get_hero_equip_result__pack
                     (const GetHeroEquipResult   *message,
                      uint8_t             *out);
size_t get_hero_equip_result__pack_to_buffer
                     (const GetHeroEquipResult   *message,
                      ProtobufCBuffer     *buffer);
GetHeroEquipResult *
       get_hero_equip_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_hero_equip_result__free_unpacked
                     (GetHeroEquipResult *message,
                      ProtobufCAllocator *allocator);
/* BuyCityLicense methods */
void   buy_city_license__init
                     (BuyCityLicense         *message);
size_t buy_city_license__get_packed_size
                     (const BuyCityLicense   *message);
size_t buy_city_license__pack
                     (const BuyCityLicense   *message,
                      uint8_t             *out);
size_t buy_city_license__pack_to_buffer
                     (const BuyCityLicense   *message,
                      ProtobufCBuffer     *buffer);
BuyCityLicense *
       buy_city_license__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_city_license__free_unpacked
                     (BuyCityLicense *message,
                      ProtobufCAllocator *allocator);
/* BuyCityLicenseResult methods */
void   buy_city_license_result__init
                     (BuyCityLicenseResult         *message);
size_t buy_city_license_result__get_packed_size
                     (const BuyCityLicenseResult   *message);
size_t buy_city_license_result__pack
                     (const BuyCityLicenseResult   *message,
                      uint8_t             *out);
size_t buy_city_license_result__pack_to_buffer
                     (const BuyCityLicenseResult   *message,
                      ProtobufCBuffer     *buffer);
BuyCityLicenseResult *
       buy_city_license_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_city_license_result__free_unpacked
                     (BuyCityLicenseResult *message,
                      ProtobufCAllocator *allocator);
/* DeleteUser methods */
void   delete_user__init
                     (DeleteUser         *message);
size_t delete_user__get_packed_size
                     (const DeleteUser   *message);
size_t delete_user__pack
                     (const DeleteUser   *message,
                      uint8_t             *out);
size_t delete_user__pack_to_buffer
                     (const DeleteUser   *message,
                      ProtobufCBuffer     *buffer);
DeleteUser *
       delete_user__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_user__free_unpacked
                     (DeleteUser *message,
                      ProtobufCAllocator *allocator);
/* DeleteUserResult methods */
void   delete_user_result__init
                     (DeleteUserResult         *message);
size_t delete_user_result__get_packed_size
                     (const DeleteUserResult   *message);
size_t delete_user_result__pack
                     (const DeleteUserResult   *message,
                      uint8_t             *out);
size_t delete_user_result__pack_to_buffer
                     (const DeleteUserResult   *message,
                      ProtobufCBuffer     *buffer);
DeleteUserResult *
       delete_user_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_user_result__free_unpacked
                     (DeleteUserResult *message,
                      ProtobufCAllocator *allocator);
/* ChangePassword methods */
void   change_password__init
                     (ChangePassword         *message);
size_t change_password__get_packed_size
                     (const ChangePassword   *message);
size_t change_password__pack
                     (const ChangePassword   *message,
                      uint8_t             *out);
size_t change_password__pack_to_buffer
                     (const ChangePassword   *message,
                      ProtobufCBuffer     *buffer);
ChangePassword *
       change_password__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   change_password__free_unpacked
                     (ChangePassword *message,
                      ProtobufCAllocator *allocator);
/* ChangePasswordResult methods */
void   change_password_result__init
                     (ChangePasswordResult         *message);
size_t change_password_result__get_packed_size
                     (const ChangePasswordResult   *message);
size_t change_password_result__pack
                     (const ChangePasswordResult   *message,
                      uint8_t             *out);
size_t change_password_result__pack_to_buffer
                     (const ChangePasswordResult   *message,
                      ProtobufCBuffer     *buffer);
ChangePasswordResult *
       change_password_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   change_password_result__free_unpacked
                     (ChangePasswordResult *message,
                      ProtobufCAllocator *allocator);
/* SelectHeroPositiveSkill methods */
void   select_hero_positive_skill__init
                     (SelectHeroPositiveSkill         *message);
size_t select_hero_positive_skill__get_packed_size
                     (const SelectHeroPositiveSkill   *message);
size_t select_hero_positive_skill__pack
                     (const SelectHeroPositiveSkill   *message,
                      uint8_t             *out);
size_t select_hero_positive_skill__pack_to_buffer
                     (const SelectHeroPositiveSkill   *message,
                      ProtobufCBuffer     *buffer);
SelectHeroPositiveSkill *
       select_hero_positive_skill__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   select_hero_positive_skill__free_unpacked
                     (SelectHeroPositiveSkill *message,
                      ProtobufCAllocator *allocator);
/* SelectHeroPositiveSkillResult methods */
void   select_hero_positive_skill_result__init
                     (SelectHeroPositiveSkillResult         *message);
size_t select_hero_positive_skill_result__get_packed_size
                     (const SelectHeroPositiveSkillResult   *message);
size_t select_hero_positive_skill_result__pack
                     (const SelectHeroPositiveSkillResult   *message,
                      uint8_t             *out);
size_t select_hero_positive_skill_result__pack_to_buffer
                     (const SelectHeroPositiveSkillResult   *message,
                      ProtobufCBuffer     *buffer);
SelectHeroPositiveSkillResult *
       select_hero_positive_skill_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   select_hero_positive_skill_result__free_unpacked
                     (SelectHeroPositiveSkillResult *message,
                      ProtobufCAllocator *allocator);
/* GetHeroPositiveSkillList methods */
void   get_hero_positive_skill_list__init
                     (GetHeroPositiveSkillList         *message);
size_t get_hero_positive_skill_list__get_packed_size
                     (const GetHeroPositiveSkillList   *message);
size_t get_hero_positive_skill_list__pack
                     (const GetHeroPositiveSkillList   *message,
                      uint8_t             *out);
size_t get_hero_positive_skill_list__pack_to_buffer
                     (const GetHeroPositiveSkillList   *message,
                      ProtobufCBuffer     *buffer);
GetHeroPositiveSkillList *
       get_hero_positive_skill_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_hero_positive_skill_list__free_unpacked
                     (GetHeroPositiveSkillList *message,
                      ProtobufCAllocator *allocator);
/* GetHeroPositiveSkillListResult methods */
void   get_hero_positive_skill_list_result__init
                     (GetHeroPositiveSkillListResult         *message);
size_t get_hero_positive_skill_list_result__get_packed_size
                     (const GetHeroPositiveSkillListResult   *message);
size_t get_hero_positive_skill_list_result__pack
                     (const GetHeroPositiveSkillListResult   *message,
                      uint8_t             *out);
size_t get_hero_positive_skill_list_result__pack_to_buffer
                     (const GetHeroPositiveSkillListResult   *message,
                      ProtobufCBuffer     *buffer);
GetHeroPositiveSkillListResult *
       get_hero_positive_skill_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_hero_positive_skill_list_result__free_unpacked
                     (GetHeroPositiveSkillListResult *message,
                      ProtobufCAllocator *allocator);
/* GetSelectedPositiveSkills methods */
void   get_selected_positive_skills__init
                     (GetSelectedPositiveSkills         *message);
size_t get_selected_positive_skills__get_packed_size
                     (const GetSelectedPositiveSkills   *message);
size_t get_selected_positive_skills__pack
                     (const GetSelectedPositiveSkills   *message,
                      uint8_t             *out);
size_t get_selected_positive_skills__pack_to_buffer
                     (const GetSelectedPositiveSkills   *message,
                      ProtobufCBuffer     *buffer);
GetSelectedPositiveSkills *
       get_selected_positive_skills__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_selected_positive_skills__free_unpacked
                     (GetSelectedPositiveSkills *message,
                      ProtobufCAllocator *allocator);
/* PositiveSkill methods */
void   positive_skill__init
                     (PositiveSkill         *message);
size_t positive_skill__get_packed_size
                     (const PositiveSkill   *message);
size_t positive_skill__pack
                     (const PositiveSkill   *message,
                      uint8_t             *out);
size_t positive_skill__pack_to_buffer
                     (const PositiveSkill   *message,
                      ProtobufCBuffer     *buffer);
PositiveSkill *
       positive_skill__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   positive_skill__free_unpacked
                     (PositiveSkill *message,
                      ProtobufCAllocator *allocator);
/* GetSelectedPositiveSkillsResult methods */
void   get_selected_positive_skills_result__init
                     (GetSelectedPositiveSkillsResult         *message);
size_t get_selected_positive_skills_result__get_packed_size
                     (const GetSelectedPositiveSkillsResult   *message);
size_t get_selected_positive_skills_result__pack
                     (const GetSelectedPositiveSkillsResult   *message,
                      uint8_t             *out);
size_t get_selected_positive_skills_result__pack_to_buffer
                     (const GetSelectedPositiveSkillsResult   *message,
                      ProtobufCBuffer     *buffer);
GetSelectedPositiveSkillsResult *
       get_selected_positive_skills_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_selected_positive_skills_result__free_unpacked
                     (GetSelectedPositiveSkillsResult *message,
                      ProtobufCAllocator *allocator);
/* GetSailInfo methods */
void   get_sail_info__init
                     (GetSailInfo         *message);
size_t get_sail_info__get_packed_size
                     (const GetSailInfo   *message);
size_t get_sail_info__pack
                     (const GetSailInfo   *message,
                      uint8_t             *out);
size_t get_sail_info__pack_to_buffer
                     (const GetSailInfo   *message,
                      ProtobufCBuffer     *buffer);
GetSailInfo *
       get_sail_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_sail_info__free_unpacked
                     (GetSailInfo *message,
                      ProtobufCAllocator *allocator);
/* GetSailInfoResult methods */
void   get_sail_info_result__init
                     (GetSailInfoResult         *message);
size_t get_sail_info_result__get_packed_size
                     (const GetSailInfoResult   *message);
size_t get_sail_info_result__pack
                     (const GetSailInfoResult   *message,
                      uint8_t             *out);
size_t get_sail_info_result__pack_to_buffer
                     (const GetSailInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetSailInfoResult *
       get_sail_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_sail_info_result__free_unpacked
                     (GetSailInfoResult *message,
                      ProtobufCAllocator *allocator);
/* InsertUserName methods */
void   insert_user_name__init
                     (InsertUserName         *message);
size_t insert_user_name__get_packed_size
                     (const InsertUserName   *message);
size_t insert_user_name__pack
                     (const InsertUserName   *message,
                      uint8_t             *out);
size_t insert_user_name__pack_to_buffer
                     (const InsertUserName   *message,
                      ProtobufCBuffer     *buffer);
InsertUserName *
       insert_user_name__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   insert_user_name__free_unpacked
                     (InsertUserName *message,
                      ProtobufCAllocator *allocator);
/* InsertUserNameResult methods */
void   insert_user_name_result__init
                     (InsertUserNameResult         *message);
size_t insert_user_name_result__get_packed_size
                     (const InsertUserNameResult   *message);
size_t insert_user_name_result__pack
                     (const InsertUserNameResult   *message,
                      uint8_t             *out);
size_t insert_user_name_result__pack_to_buffer
                     (const InsertUserNameResult   *message,
                      ProtobufCBuffer     *buffer);
InsertUserNameResult *
       insert_user_name_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   insert_user_name_result__free_unpacked
                     (InsertUserNameResult *message,
                      ProtobufCAllocator *allocator);
/* GetLeaderboard methods */
void   get_leaderboard__init
                     (GetLeaderboard         *message);
size_t get_leaderboard__get_packed_size
                     (const GetLeaderboard   *message);
size_t get_leaderboard__pack
                     (const GetLeaderboard   *message,
                      uint8_t             *out);
size_t get_leaderboard__pack_to_buffer
                     (const GetLeaderboard   *message,
                      ProtobufCBuffer     *buffer);
GetLeaderboard *
       get_leaderboard__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_leaderboard__free_unpacked
                     (GetLeaderboard *message,
                      ProtobufCAllocator *allocator);
/* LeaderboardItem methods */
void   leaderboard_item__init
                     (LeaderboardItem         *message);
size_t leaderboard_item__get_packed_size
                     (const LeaderboardItem   *message);
size_t leaderboard_item__pack
                     (const LeaderboardItem   *message,
                      uint8_t             *out);
size_t leaderboard_item__pack_to_buffer
                     (const LeaderboardItem   *message,
                      ProtobufCBuffer     *buffer);
LeaderboardItem *
       leaderboard_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   leaderboard_item__free_unpacked
                     (LeaderboardItem *message,
                      ProtobufCAllocator *allocator);
/* GetLeaderboardResult methods */
void   get_leaderboard_result__init
                     (GetLeaderboardResult         *message);
size_t get_leaderboard_result__get_packed_size
                     (const GetLeaderboardResult   *message);
size_t get_leaderboard_result__pack
                     (const GetLeaderboardResult   *message,
                      uint8_t             *out);
size_t get_leaderboard_result__pack_to_buffer
                     (const GetLeaderboardResult   *message,
                      ProtobufCBuffer     *buffer);
GetLeaderboardResult *
       get_leaderboard_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_leaderboard_result__free_unpacked
                     (GetLeaderboardResult *message,
                      ProtobufCAllocator *allocator);
/* GetCityStatus methods */
void   get_city_status__init
                     (GetCityStatus         *message);
size_t get_city_status__get_packed_size
                     (const GetCityStatus   *message);
size_t get_city_status__pack
                     (const GetCityStatus   *message,
                      uint8_t             *out);
size_t get_city_status__pack_to_buffer
                     (const GetCityStatus   *message,
                      ProtobufCBuffer     *buffer);
GetCityStatus *
       get_city_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_city_status__free_unpacked
                     (GetCityStatus *message,
                      ProtobufCAllocator *allocator);
/* GetCityStatusResult methods */
void   get_city_status_result__init
                     (GetCityStatusResult         *message);
size_t get_city_status_result__get_packed_size
                     (const GetCityStatusResult   *message);
size_t get_city_status_result__pack
                     (const GetCityStatusResult   *message,
                      uint8_t             *out);
size_t get_city_status_result__pack_to_buffer
                     (const GetCityStatusResult   *message,
                      ProtobufCBuffer     *buffer);
GetCityStatusResult *
       get_city_status_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_city_status_result__free_unpacked
                     (GetCityStatusResult *message,
                      ProtobufCAllocator *allocator);
/* GetDiscoveredCities methods */
void   get_discovered_cities__init
                     (GetDiscoveredCities         *message);
size_t get_discovered_cities__get_packed_size
                     (const GetDiscoveredCities   *message);
size_t get_discovered_cities__pack
                     (const GetDiscoveredCities   *message,
                      uint8_t             *out);
size_t get_discovered_cities__pack_to_buffer
                     (const GetDiscoveredCities   *message,
                      ProtobufCBuffer     *buffer);
GetDiscoveredCities *
       get_discovered_cities__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_discovered_cities__free_unpacked
                     (GetDiscoveredCities *message,
                      ProtobufCAllocator *allocator);
/* GetDiscoveredCitiesResult methods */
void   get_discovered_cities_result__init
                     (GetDiscoveredCitiesResult         *message);
size_t get_discovered_cities_result__get_packed_size
                     (const GetDiscoveredCitiesResult   *message);
size_t get_discovered_cities_result__pack
                     (const GetDiscoveredCitiesResult   *message,
                      uint8_t             *out);
size_t get_discovered_cities_result__pack_to_buffer
                     (const GetDiscoveredCitiesResult   *message,
                      ProtobufCBuffer     *buffer);
GetDiscoveredCitiesResult *
       get_discovered_cities_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_discovered_cities_result__free_unpacked
                     (GetDiscoveredCitiesResult *message,
                      ProtobufCAllocator *allocator);
/* AddDiscoveredCity methods */
void   add_discovered_city__init
                     (AddDiscoveredCity         *message);
size_t add_discovered_city__get_packed_size
                     (const AddDiscoveredCity   *message);
size_t add_discovered_city__pack
                     (const AddDiscoveredCity   *message,
                      uint8_t             *out);
size_t add_discovered_city__pack_to_buffer
                     (const AddDiscoveredCity   *message,
                      ProtobufCBuffer     *buffer);
AddDiscoveredCity *
       add_discovered_city__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_discovered_city__free_unpacked
                     (AddDiscoveredCity *message,
                      ProtobufCAllocator *allocator);
/* AddDiscoveredCityResult methods */
void   add_discovered_city_result__init
                     (AddDiscoveredCityResult         *message);
size_t add_discovered_city_result__get_packed_size
                     (const AddDiscoveredCityResult   *message);
size_t add_discovered_city_result__pack
                     (const AddDiscoveredCityResult   *message,
                      uint8_t             *out);
size_t add_discovered_city_result__pack_to_buffer
                     (const AddDiscoveredCityResult   *message,
                      ProtobufCBuffer     *buffer);
AddDiscoveredCityResult *
       add_discovered_city_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_discovered_city_result__free_unpacked
                     (AddDiscoveredCityResult *message,
                      ProtobufCAllocator *allocator);
/* ForceFightStatus methods */
void   force_fight_status__init
                     (ForceFightStatus         *message);
size_t force_fight_status__get_packed_size
                     (const ForceFightStatus   *message);
size_t force_fight_status__pack
                     (const ForceFightStatus   *message,
                      uint8_t             *out);
size_t force_fight_status__pack_to_buffer
                     (const ForceFightStatus   *message,
                      ProtobufCBuffer     *buffer);
ForceFightStatus *
       force_fight_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   force_fight_status__free_unpacked
                     (ForceFightStatus *message,
                      ProtobufCAllocator *allocator);
/* ForceFightStatusResult methods */
void   force_fight_status_result__init
                     (ForceFightStatusResult         *message);
size_t force_fight_status_result__get_packed_size
                     (const ForceFightStatusResult   *message);
size_t force_fight_status_result__pack
                     (const ForceFightStatusResult   *message,
                      uint8_t             *out);
size_t force_fight_status_result__pack_to_buffer
                     (const ForceFightStatusResult   *message,
                      ProtobufCBuffer     *buffer);
ForceFightStatusResult *
       force_fight_status_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   force_fight_status_result__free_unpacked
                     (ForceFightStatusResult *message,
                      ProtobufCAllocator *allocator);
/* GetCityProduces methods */
void   get_city_produces__init
                     (GetCityProduces         *message);
size_t get_city_produces__get_packed_size
                     (const GetCityProduces   *message);
size_t get_city_produces__pack
                     (const GetCityProduces   *message,
                      uint8_t             *out);
size_t get_city_produces__pack_to_buffer
                     (const GetCityProduces   *message,
                      ProtobufCBuffer     *buffer);
GetCityProduces *
       get_city_produces__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_city_produces__free_unpacked
                     (GetCityProduces *message,
                      ProtobufCAllocator *allocator);
/* CityProduceDefine methods */
void   city_produce_define__init
                     (CityProduceDefine         *message);
size_t city_produce_define__get_packed_size
                     (const CityProduceDefine   *message);
size_t city_produce_define__pack
                     (const CityProduceDefine   *message,
                      uint8_t             *out);
size_t city_produce_define__pack_to_buffer
                     (const CityProduceDefine   *message,
                      ProtobufCBuffer     *buffer);
CityProduceDefine *
       city_produce_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   city_produce_define__free_unpacked
                     (CityProduceDefine *message,
                      ProtobufCAllocator *allocator);
/* GetCityProducesResult methods */
void   get_city_produces_result__init
                     (GetCityProducesResult         *message);
size_t get_city_produces_result__get_packed_size
                     (const GetCityProducesResult   *message);
size_t get_city_produces_result__pack
                     (const GetCityProducesResult   *message,
                      uint8_t             *out);
size_t get_city_produces_result__pack_to_buffer
                     (const GetCityProducesResult   *message,
                      ProtobufCBuffer     *buffer);
GetCityProducesResult *
       get_city_produces_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_city_produces_result__free_unpacked
                     (GetCityProducesResult *message,
                      ProtobufCAllocator *allocator);
/* GetCityDemands methods */
void   get_city_demands__init
                     (GetCityDemands         *message);
size_t get_city_demands__get_packed_size
                     (const GetCityDemands   *message);
size_t get_city_demands__pack
                     (const GetCityDemands   *message,
                      uint8_t             *out);
size_t get_city_demands__pack_to_buffer
                     (const GetCityDemands   *message,
                      ProtobufCBuffer     *buffer);
GetCityDemands *
       get_city_demands__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_city_demands__free_unpacked
                     (GetCityDemands *message,
                      ProtobufCAllocator *allocator);
/* CityDemandsDefine methods */
void   city_demands_define__init
                     (CityDemandsDefine         *message);
size_t city_demands_define__get_packed_size
                     (const CityDemandsDefine   *message);
size_t city_demands_define__pack
                     (const CityDemandsDefine   *message,
                      uint8_t             *out);
size_t city_demands_define__pack_to_buffer
                     (const CityDemandsDefine   *message,
                      ProtobufCBuffer     *buffer);
CityDemandsDefine *
       city_demands_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   city_demands_define__free_unpacked
                     (CityDemandsDefine *message,
                      ProtobufCAllocator *allocator);
/* GetCityDemandsResult methods */
void   get_city_demands_result__init
                     (GetCityDemandsResult         *message);
size_t get_city_demands_result__get_packed_size
                     (const GetCityDemandsResult   *message);
size_t get_city_demands_result__pack
                     (const GetCityDemandsResult   *message,
                      uint8_t             *out);
size_t get_city_demands_result__pack_to_buffer
                     (const GetCityDemandsResult   *message,
                      ProtobufCBuffer     *buffer);
GetCityDemandsResult *
       get_city_demands_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_city_demands_result__free_unpacked
                     (GetCityDemandsResult *message,
                      ProtobufCAllocator *allocator);
/* GetMainTask methods */
void   get_main_task__init
                     (GetMainTask         *message);
size_t get_main_task__get_packed_size
                     (const GetMainTask   *message);
size_t get_main_task__pack
                     (const GetMainTask   *message,
                      uint8_t             *out);
size_t get_main_task__pack_to_buffer
                     (const GetMainTask   *message,
                      ProtobufCBuffer     *buffer);
GetMainTask *
       get_main_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_main_task__free_unpacked
                     (GetMainTask *message,
                      ProtobufCAllocator *allocator);
/* GetMainTaskResult methods */
void   get_main_task_result__init
                     (GetMainTaskResult         *message);
size_t get_main_task_result__get_packed_size
                     (const GetMainTaskResult   *message);
size_t get_main_task_result__pack
                     (const GetMainTaskResult   *message,
                      uint8_t             *out);
size_t get_main_task_result__pack_to_buffer
                     (const GetMainTaskResult   *message,
                      ProtobufCBuffer     *buffer);
GetMainTaskResult *
       get_main_task_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_main_task_result__free_unpacked
                     (GetMainTaskResult *message,
                      ProtobufCAllocator *allocator);
/* CompleteMainTask methods */
void   complete_main_task__init
                     (CompleteMainTask         *message);
size_t complete_main_task__get_packed_size
                     (const CompleteMainTask   *message);
size_t complete_main_task__pack
                     (const CompleteMainTask   *message,
                      uint8_t             *out);
size_t complete_main_task__pack_to_buffer
                     (const CompleteMainTask   *message,
                      ProtobufCBuffer     *buffer);
CompleteMainTask *
       complete_main_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   complete_main_task__free_unpacked
                     (CompleteMainTask *message,
                      ProtobufCAllocator *allocator);
/* CompleteMainTaskResult methods */
void   complete_main_task_result__init
                     (CompleteMainTaskResult         *message);
size_t complete_main_task_result__get_packed_size
                     (const CompleteMainTaskResult   *message);
size_t complete_main_task_result__pack
                     (const CompleteMainTaskResult   *message,
                      uint8_t             *out);
size_t complete_main_task_result__pack_to_buffer
                     (const CompleteMainTaskResult   *message,
                      ProtobufCBuffer     *buffer);
CompleteMainTaskResult *
       complete_main_task_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   complete_main_task_result__free_unpacked
                     (CompleteMainTaskResult *message,
                      ProtobufCAllocator *allocator);
/* GetMainTaskReward methods */
void   get_main_task_reward__init
                     (GetMainTaskReward         *message);
size_t get_main_task_reward__get_packed_size
                     (const GetMainTaskReward   *message);
size_t get_main_task_reward__pack
                     (const GetMainTaskReward   *message,
                      uint8_t             *out);
size_t get_main_task_reward__pack_to_buffer
                     (const GetMainTaskReward   *message,
                      ProtobufCBuffer     *buffer);
GetMainTaskReward *
       get_main_task_reward__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_main_task_reward__free_unpacked
                     (GetMainTaskReward *message,
                      ProtobufCAllocator *allocator);
/* GetMainTaskRewardResult methods */
void   get_main_task_reward_result__init
                     (GetMainTaskRewardResult         *message);
size_t get_main_task_reward_result__get_packed_size
                     (const GetMainTaskRewardResult   *message);
size_t get_main_task_reward_result__pack
                     (const GetMainTaskRewardResult   *message,
                      uint8_t             *out);
size_t get_main_task_reward_result__pack_to_buffer
                     (const GetMainTaskRewardResult   *message,
                      ProtobufCBuffer     *buffer);
GetMainTaskRewardResult *
       get_main_task_reward_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_main_task_reward_result__free_unpacked
                     (GetMainTaskRewardResult *message,
                      ProtobufCAllocator *allocator);
/* GetEventTaskList methods */
void   get_event_task_list__init
                     (GetEventTaskList         *message);
size_t get_event_task_list__get_packed_size
                     (const GetEventTaskList   *message);
size_t get_event_task_list__pack
                     (const GetEventTaskList   *message,
                      uint8_t             *out);
size_t get_event_task_list__pack_to_buffer
                     (const GetEventTaskList   *message,
                      ProtobufCBuffer     *buffer);
GetEventTaskList *
       get_event_task_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_event_task_list__free_unpacked
                     (GetEventTaskList *message,
                      ProtobufCAllocator *allocator);
/* EventTaskListDefine methods */
void   event_task_list_define__init
                     (EventTaskListDefine         *message);
size_t event_task_list_define__get_packed_size
                     (const EventTaskListDefine   *message);
size_t event_task_list_define__pack
                     (const EventTaskListDefine   *message,
                      uint8_t             *out);
size_t event_task_list_define__pack_to_buffer
                     (const EventTaskListDefine   *message,
                      ProtobufCBuffer     *buffer);
EventTaskListDefine *
       event_task_list_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_task_list_define__free_unpacked
                     (EventTaskListDefine *message,
                      ProtobufCAllocator *allocator);
/* GetEventTaskListResult methods */
void   get_event_task_list_result__init
                     (GetEventTaskListResult         *message);
size_t get_event_task_list_result__get_packed_size
                     (const GetEventTaskListResult   *message);
size_t get_event_task_list_result__pack
                     (const GetEventTaskListResult   *message,
                      uint8_t             *out);
size_t get_event_task_list_result__pack_to_buffer
                     (const GetEventTaskListResult   *message,
                      ProtobufCBuffer     *buffer);
GetEventTaskListResult *
       get_event_task_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_event_task_list_result__free_unpacked
                     (GetEventTaskListResult *message,
                      ProtobufCAllocator *allocator);
/* HandleEventTask methods */
void   handle_event_task__init
                     (HandleEventTask         *message);
size_t handle_event_task__get_packed_size
                     (const HandleEventTask   *message);
size_t handle_event_task__pack
                     (const HandleEventTask   *message,
                      uint8_t             *out);
size_t handle_event_task__pack_to_buffer
                     (const HandleEventTask   *message,
                      ProtobufCBuffer     *buffer);
HandleEventTask *
       handle_event_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   handle_event_task__free_unpacked
                     (HandleEventTask *message,
                      ProtobufCAllocator *allocator);
/* HandleEventTaskResult methods */
void   handle_event_task_result__init
                     (HandleEventTaskResult         *message);
size_t handle_event_task_result__get_packed_size
                     (const HandleEventTaskResult   *message);
size_t handle_event_task_result__pack
                     (const HandleEventTaskResult   *message,
                      uint8_t             *out);
size_t handle_event_task_result__pack_to_buffer
                     (const HandleEventTaskResult   *message,
                      ProtobufCBuffer     *buffer);
HandleEventTaskResult *
       handle_event_task_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   handle_event_task_result__free_unpacked
                     (HandleEventTaskResult *message,
                      ProtobufCAllocator *allocator);
/* GetNpcScore methods */
void   get_npc_score__init
                     (GetNpcScore         *message);
size_t get_npc_score__get_packed_size
                     (const GetNpcScore   *message);
size_t get_npc_score__pack
                     (const GetNpcScore   *message,
                      uint8_t             *out);
size_t get_npc_score__pack_to_buffer
                     (const GetNpcScore   *message,
                      ProtobufCBuffer     *buffer);
GetNpcScore *
       get_npc_score__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_npc_score__free_unpacked
                     (GetNpcScore *message,
                      ProtobufCAllocator *allocator);
/* GetNpcScoreResult methods */
void   get_npc_score_result__init
                     (GetNpcScoreResult         *message);
size_t get_npc_score_result__get_packed_size
                     (const GetNpcScoreResult   *message);
size_t get_npc_score_result__pack
                     (const GetNpcScoreResult   *message,
                      uint8_t             *out);
size_t get_npc_score_result__pack_to_buffer
                     (const GetNpcScoreResult   *message,
                      ProtobufCBuffer     *buffer);
GetNpcScoreResult *
       get_npc_score_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_npc_score_result__free_unpacked
                     (GetNpcScoreResult *message,
                      ProtobufCAllocator *allocator);
/* GetServerInfo methods */
void   get_server_info__init
                     (GetServerInfo         *message);
size_t get_server_info__get_packed_size
                     (const GetServerInfo   *message);
size_t get_server_info__pack
                     (const GetServerInfo   *message,
                      uint8_t             *out);
size_t get_server_info__pack_to_buffer
                     (const GetServerInfo   *message,
                      ProtobufCBuffer     *buffer);
GetServerInfo *
       get_server_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_server_info__free_unpacked
                     (GetServerInfo *message,
                      ProtobufCAllocator *allocator);
/* GetServerInfoResult methods */
void   get_server_info_result__init
                     (GetServerInfoResult         *message);
size_t get_server_info_result__get_packed_size
                     (const GetServerInfoResult   *message);
size_t get_server_info_result__pack
                     (const GetServerInfoResult   *message,
                      uint8_t             *out);
size_t get_server_info_result__pack_to_buffer
                     (const GetServerInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetServerInfoResult *
       get_server_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_server_info_result__free_unpacked
                     (GetServerInfoResult *message,
                      ProtobufCAllocator *allocator);
/* PingServer methods */
void   ping_server__init
                     (PingServer         *message);
size_t ping_server__get_packed_size
                     (const PingServer   *message);
size_t ping_server__pack
                     (const PingServer   *message,
                      uint8_t             *out);
size_t ping_server__pack_to_buffer
                     (const PingServer   *message,
                      ProtobufCBuffer     *buffer);
PingServer *
       ping_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ping_server__free_unpacked
                     (PingServer *message,
                      ProtobufCAllocator *allocator);
/* PingServerResult methods */
void   ping_server_result__init
                     (PingServerResult         *message);
size_t ping_server_result__get_packed_size
                     (const PingServerResult   *message);
size_t ping_server_result__pack
                     (const PingServerResult   *message,
                      uint8_t             *out);
size_t ping_server_result__pack_to_buffer
                     (const PingServerResult   *message,
                      ProtobufCBuffer     *buffer);
PingServerResult *
       ping_server_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ping_server_result__free_unpacked
                     (PingServerResult *message,
                      ProtobufCAllocator *allocator);
/* ExpandPackageSize methods */
void   expand_package_size__init
                     (ExpandPackageSize         *message);
size_t expand_package_size__get_packed_size
                     (const ExpandPackageSize   *message);
size_t expand_package_size__pack
                     (const ExpandPackageSize   *message,
                      uint8_t             *out);
size_t expand_package_size__pack_to_buffer
                     (const ExpandPackageSize   *message,
                      ProtobufCBuffer     *buffer);
ExpandPackageSize *
       expand_package_size__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   expand_package_size__free_unpacked
                     (ExpandPackageSize *message,
                      ProtobufCAllocator *allocator);
/* ExpandPackageSizeResult methods */
void   expand_package_size_result__init
                     (ExpandPackageSizeResult         *message);
size_t expand_package_size_result__get_packed_size
                     (const ExpandPackageSizeResult   *message);
size_t expand_package_size_result__pack
                     (const ExpandPackageSizeResult   *message,
                      uint8_t             *out);
size_t expand_package_size_result__pack_to_buffer
                     (const ExpandPackageSizeResult   *message,
                      ProtobufCBuffer     *buffer);
ExpandPackageSizeResult *
       expand_package_size_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   expand_package_size_result__free_unpacked
                     (ExpandPackageSizeResult *message,
                      ProtobufCAllocator *allocator);
/* GetPretaskItems methods */
void   get_pretask_items__init
                     (GetPretaskItems         *message);
size_t get_pretask_items__get_packed_size
                     (const GetPretaskItems   *message);
size_t get_pretask_items__pack
                     (const GetPretaskItems   *message,
                      uint8_t             *out);
size_t get_pretask_items__pack_to_buffer
                     (const GetPretaskItems   *message,
                      ProtobufCBuffer     *buffer);
GetPretaskItems *
       get_pretask_items__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_pretask_items__free_unpacked
                     (GetPretaskItems *message,
                      ProtobufCAllocator *allocator);
/* PretaskItemDefine methods */
void   pretask_item_define__init
                     (PretaskItemDefine         *message);
size_t pretask_item_define__get_packed_size
                     (const PretaskItemDefine   *message);
size_t pretask_item_define__pack
                     (const PretaskItemDefine   *message,
                      uint8_t             *out);
size_t pretask_item_define__pack_to_buffer
                     (const PretaskItemDefine   *message,
                      ProtobufCBuffer     *buffer);
PretaskItemDefine *
       pretask_item_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pretask_item_define__free_unpacked
                     (PretaskItemDefine *message,
                      ProtobufCAllocator *allocator);
/* GetPretaskItemsResult methods */
void   get_pretask_items_result__init
                     (GetPretaskItemsResult         *message);
size_t get_pretask_items_result__get_packed_size
                     (const GetPretaskItemsResult   *message);
size_t get_pretask_items_result__pack
                     (const GetPretaskItemsResult   *message,
                      uint8_t             *out);
size_t get_pretask_items_result__pack_to_buffer
                     (const GetPretaskItemsResult   *message,
                      ProtobufCBuffer     *buffer);
GetPretaskItemsResult *
       get_pretask_items_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_pretask_items_result__free_unpacked
                     (GetPretaskItemsResult *message,
                      ProtobufCAllocator *allocator);
/* GetOnsaleItems methods */
void   get_onsale_items__init
                     (GetOnsaleItems         *message);
size_t get_onsale_items__get_packed_size
                     (const GetOnsaleItems   *message);
size_t get_onsale_items__pack
                     (const GetOnsaleItems   *message,
                      uint8_t             *out);
size_t get_onsale_items__pack_to_buffer
                     (const GetOnsaleItems   *message,
                      ProtobufCBuffer     *buffer);
GetOnsaleItems *
       get_onsale_items__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_onsale_items__free_unpacked
                     (GetOnsaleItems *message,
                      ProtobufCAllocator *allocator);
/* OnsaleItemDefine methods */
void   onsale_item_define__init
                     (OnsaleItemDefine         *message);
size_t onsale_item_define__get_packed_size
                     (const OnsaleItemDefine   *message);
size_t onsale_item_define__pack
                     (const OnsaleItemDefine   *message,
                      uint8_t             *out);
size_t onsale_item_define__pack_to_buffer
                     (const OnsaleItemDefine   *message,
                      ProtobufCBuffer     *buffer);
OnsaleItemDefine *
       onsale_item_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   onsale_item_define__free_unpacked
                     (OnsaleItemDefine *message,
                      ProtobufCAllocator *allocator);
/* OnsaleItemPackageDefine methods */
void   onsale_item_package_define__init
                     (OnsaleItemPackageDefine         *message);
size_t onsale_item_package_define__get_packed_size
                     (const OnsaleItemPackageDefine   *message);
size_t onsale_item_package_define__pack
                     (const OnsaleItemPackageDefine   *message,
                      uint8_t             *out);
size_t onsale_item_package_define__pack_to_buffer
                     (const OnsaleItemPackageDefine   *message,
                      ProtobufCBuffer     *buffer);
OnsaleItemPackageDefine *
       onsale_item_package_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   onsale_item_package_define__free_unpacked
                     (OnsaleItemPackageDefine *message,
                      ProtobufCAllocator *allocator);
/* GetOnsaleItemsResult methods */
void   get_onsale_items_result__init
                     (GetOnsaleItemsResult         *message);
size_t get_onsale_items_result__get_packed_size
                     (const GetOnsaleItemsResult   *message);
size_t get_onsale_items_result__pack
                     (const GetOnsaleItemsResult   *message,
                      uint8_t             *out);
size_t get_onsale_items_result__pack_to_buffer
                     (const GetOnsaleItemsResult   *message,
                      ProtobufCBuffer     *buffer);
GetOnsaleItemsResult *
       get_onsale_items_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_onsale_items_result__free_unpacked
                     (GetOnsaleItemsResult *message,
                      ProtobufCAllocator *allocator);
/* BuyOnsaleItems methods */
void   buy_onsale_items__init
                     (BuyOnsaleItems         *message);
size_t buy_onsale_items__get_packed_size
                     (const BuyOnsaleItems   *message);
size_t buy_onsale_items__pack
                     (const BuyOnsaleItems   *message,
                      uint8_t             *out);
size_t buy_onsale_items__pack_to_buffer
                     (const BuyOnsaleItems   *message,
                      ProtobufCBuffer     *buffer);
BuyOnsaleItems *
       buy_onsale_items__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_onsale_items__free_unpacked
                     (BuyOnsaleItems *message,
                      ProtobufCAllocator *allocator);
/* BuyOnsaleItemsResult methods */
void   buy_onsale_items_result__init
                     (BuyOnsaleItemsResult         *message);
size_t buy_onsale_items_result__get_packed_size
                     (const BuyOnsaleItemsResult   *message);
size_t buy_onsale_items_result__pack
                     (const BuyOnsaleItemsResult   *message,
                      uint8_t             *out);
size_t buy_onsale_items_result__pack_to_buffer
                     (const BuyOnsaleItemsResult   *message,
                      ProtobufCBuffer     *buffer);
BuyOnsaleItemsResult *
       buy_onsale_items_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_onsale_items_result__free_unpacked
                     (BuyOnsaleItemsResult *message,
                      ProtobufCAllocator *allocator);
/* SendCustomServiceInfo methods */
void   send_custom_service_info__init
                     (SendCustomServiceInfo         *message);
size_t send_custom_service_info__get_packed_size
                     (const SendCustomServiceInfo   *message);
size_t send_custom_service_info__pack
                     (const SendCustomServiceInfo   *message,
                      uint8_t             *out);
size_t send_custom_service_info__pack_to_buffer
                     (const SendCustomServiceInfo   *message,
                      ProtobufCBuffer     *buffer);
SendCustomServiceInfo *
       send_custom_service_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_custom_service_info__free_unpacked
                     (SendCustomServiceInfo *message,
                      ProtobufCAllocator *allocator);
/* SendCustomServiceInfoResult methods */
void   send_custom_service_info_result__init
                     (SendCustomServiceInfoResult         *message);
size_t send_custom_service_info_result__get_packed_size
                     (const SendCustomServiceInfoResult   *message);
size_t send_custom_service_info_result__pack
                     (const SendCustomServiceInfoResult   *message,
                      uint8_t             *out);
size_t send_custom_service_info_result__pack_to_buffer
                     (const SendCustomServiceInfoResult   *message,
                      ProtobufCBuffer     *buffer);
SendCustomServiceInfoResult *
       send_custom_service_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_custom_service_info_result__free_unpacked
                     (SendCustomServiceInfoResult *message,
                      ProtobufCAllocator *allocator);
/* GetIABItem methods */
void   get_iabitem__init
                     (GetIABItem         *message);
size_t get_iabitem__get_packed_size
                     (const GetIABItem   *message);
size_t get_iabitem__pack
                     (const GetIABItem   *message,
                      uint8_t             *out);
size_t get_iabitem__pack_to_buffer
                     (const GetIABItem   *message,
                      ProtobufCBuffer     *buffer);
GetIABItem *
       get_iabitem__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_iabitem__free_unpacked
                     (GetIABItem *message,
                      ProtobufCAllocator *allocator);
/* GetIABItemResult methods */
void   get_iabitem_result__init
                     (GetIABItemResult         *message);
size_t get_iabitem_result__get_packed_size
                     (const GetIABItemResult   *message);
size_t get_iabitem_result__pack
                     (const GetIABItemResult   *message,
                      uint8_t             *out);
size_t get_iabitem_result__pack_to_buffer
                     (const GetIABItemResult   *message,
                      ProtobufCBuffer     *buffer);
GetIABItemResult *
       get_iabitem_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_iabitem_result__free_unpacked
                     (GetIABItemResult *message,
                      ProtobufCAllocator *allocator);
/* ChangeEmail methods */
void   change_email__init
                     (ChangeEmail         *message);
size_t change_email__get_packed_size
                     (const ChangeEmail   *message);
size_t change_email__pack
                     (const ChangeEmail   *message,
                      uint8_t             *out);
size_t change_email__pack_to_buffer
                     (const ChangeEmail   *message,
                      ProtobufCBuffer     *buffer);
ChangeEmail *
       change_email__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   change_email__free_unpacked
                     (ChangeEmail *message,
                      ProtobufCAllocator *allocator);
/* ChangeEmailResult methods */
void   change_email_result__init
                     (ChangeEmailResult         *message);
size_t change_email_result__get_packed_size
                     (const ChangeEmailResult   *message);
size_t change_email_result__pack
                     (const ChangeEmailResult   *message,
                      uint8_t             *out);
size_t change_email_result__pack_to_buffer
                     (const ChangeEmailResult   *message,
                      ProtobufCBuffer     *buffer);
ChangeEmailResult *
       change_email_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   change_email_result__free_unpacked
                     (ChangeEmailResult *message,
                      ProtobufCAllocator *allocator);
/* TokenLogin methods */
void   token_login__init
                     (TokenLogin         *message);
size_t token_login__get_packed_size
                     (const TokenLogin   *message);
size_t token_login__pack
                     (const TokenLogin   *message,
                      uint8_t             *out);
size_t token_login__pack_to_buffer
                     (const TokenLogin   *message,
                      ProtobufCBuffer     *buffer);
TokenLogin *
       token_login__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   token_login__free_unpacked
                     (TokenLogin *message,
                      ProtobufCAllocator *allocator);
/* EngageInFightForTask methods */
void   engage_in_fight_for_task__init
                     (EngageInFightForTask         *message);
size_t engage_in_fight_for_task__get_packed_size
                     (const EngageInFightForTask   *message);
size_t engage_in_fight_for_task__pack
                     (const EngageInFightForTask   *message,
                      uint8_t             *out);
size_t engage_in_fight_for_task__pack_to_buffer
                     (const EngageInFightForTask   *message,
                      ProtobufCBuffer     *buffer);
EngageInFightForTask *
       engage_in_fight_for_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   engage_in_fight_for_task__free_unpacked
                     (EngageInFightForTask *message,
                      ProtobufCAllocator *allocator);
/* EngageInFightForTaskResult methods */
void   engage_in_fight_for_task_result__init
                     (EngageInFightForTaskResult         *message);
size_t engage_in_fight_for_task_result__get_packed_size
                     (const EngageInFightForTaskResult   *message);
size_t engage_in_fight_for_task_result__pack
                     (const EngageInFightForTaskResult   *message,
                      uint8_t             *out);
size_t engage_in_fight_for_task_result__pack_to_buffer
                     (const EngageInFightForTaskResult   *message,
                      ProtobufCBuffer     *buffer);
EngageInFightForTaskResult *
       engage_in_fight_for_task_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   engage_in_fight_for_task_result__free_unpacked
                     (EngageInFightForTaskResult *message,
                      ProtobufCAllocator *allocator);
/* AuthenticateAccount methods */
void   authenticate_account__init
                     (AuthenticateAccount         *message);
size_t authenticate_account__get_packed_size
                     (const AuthenticateAccount   *message);
size_t authenticate_account__pack
                     (const AuthenticateAccount   *message,
                      uint8_t             *out);
size_t authenticate_account__pack_to_buffer
                     (const AuthenticateAccount   *message,
                      ProtobufCBuffer     *buffer);
AuthenticateAccount *
       authenticate_account__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   authenticate_account__free_unpacked
                     (AuthenticateAccount *message,
                      ProtobufCAllocator *allocator);
/* AuthenticateAccountResult methods */
void   authenticate_account_result__init
                     (AuthenticateAccountResult         *message);
size_t authenticate_account_result__get_packed_size
                     (const AuthenticateAccountResult   *message);
size_t authenticate_account_result__pack
                     (const AuthenticateAccountResult   *message,
                      uint8_t             *out);
size_t authenticate_account_result__pack_to_buffer
                     (const AuthenticateAccountResult   *message,
                      ProtobufCBuffer     *buffer);
AuthenticateAccountResult *
       authenticate_account_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   authenticate_account_result__free_unpacked
                     (AuthenticateAccountResult *message,
                      ProtobufCAllocator *allocator);
/* Salvage methods */
void   salvage__init
                     (Salvage         *message);
size_t salvage__get_packed_size
                     (const Salvage   *message);
size_t salvage__pack
                     (const Salvage   *message,
                      uint8_t             *out);
size_t salvage__pack_to_buffer
                     (const Salvage   *message,
                      ProtobufCBuffer     *buffer);
Salvage *
       salvage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   salvage__free_unpacked
                     (Salvage *message,
                      ProtobufCAllocator *allocator);
/* SalvageResult methods */
void   salvage_result__init
                     (SalvageResult         *message);
size_t salvage_result__get_packed_size
                     (const SalvageResult   *message);
size_t salvage_result__pack
                     (const SalvageResult   *message,
                      uint8_t             *out);
size_t salvage_result__pack_to_buffer
                     (const SalvageResult   *message,
                      ProtobufCBuffer     *buffer);
SalvageResult *
       salvage_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   salvage_result__free_unpacked
                     (SalvageResult *message,
                      ProtobufCAllocator *allocator);
/* GetEmailVerifiedReward methods */
void   get_email_verified_reward__init
                     (GetEmailVerifiedReward         *message);
size_t get_email_verified_reward__get_packed_size
                     (const GetEmailVerifiedReward   *message);
size_t get_email_verified_reward__pack
                     (const GetEmailVerifiedReward   *message,
                      uint8_t             *out);
size_t get_email_verified_reward__pack_to_buffer
                     (const GetEmailVerifiedReward   *message,
                      ProtobufCBuffer     *buffer);
GetEmailVerifiedReward *
       get_email_verified_reward__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_email_verified_reward__free_unpacked
                     (GetEmailVerifiedReward *message,
                      ProtobufCAllocator *allocator);
/* GetEmailVerifiedRewardResult methods */
void   get_email_verified_reward_result__init
                     (GetEmailVerifiedRewardResult         *message);
size_t get_email_verified_reward_result__get_packed_size
                     (const GetEmailVerifiedRewardResult   *message);
size_t get_email_verified_reward_result__pack
                     (const GetEmailVerifiedRewardResult   *message,
                      uint8_t             *out);
size_t get_email_verified_reward_result__pack_to_buffer
                     (const GetEmailVerifiedRewardResult   *message,
                      ProtobufCBuffer     *buffer);
GetEmailVerifiedRewardResult *
       get_email_verified_reward_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_email_verified_reward_result__free_unpacked
                     (GetEmailVerifiedRewardResult *message,
                      ProtobufCAllocator *allocator);
/* StartSalvage methods */
void   start_salvage__init
                     (StartSalvage         *message);
size_t start_salvage__get_packed_size
                     (const StartSalvage   *message);
size_t start_salvage__pack
                     (const StartSalvage   *message,
                      uint8_t             *out);
size_t start_salvage__pack_to_buffer
                     (const StartSalvage   *message,
                      ProtobufCBuffer     *buffer);
StartSalvage *
       start_salvage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   start_salvage__free_unpacked
                     (StartSalvage *message,
                      ProtobufCAllocator *allocator);
/* StartSalvageResult methods */
void   start_salvage_result__init
                     (StartSalvageResult         *message);
size_t start_salvage_result__get_packed_size
                     (const StartSalvageResult   *message);
size_t start_salvage_result__pack
                     (const StartSalvageResult   *message,
                      uint8_t             *out);
size_t start_salvage_result__pack_to_buffer
                     (const StartSalvageResult   *message,
                      ProtobufCBuffer     *buffer);
StartSalvageResult *
       start_salvage_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   start_salvage_result__free_unpacked
                     (StartSalvageResult *message,
                      ProtobufCAllocator *allocator);
/* GetEmailVerifiedInfo methods */
void   get_email_verified_info__init
                     (GetEmailVerifiedInfo         *message);
size_t get_email_verified_info__get_packed_size
                     (const GetEmailVerifiedInfo   *message);
size_t get_email_verified_info__pack
                     (const GetEmailVerifiedInfo   *message,
                      uint8_t             *out);
size_t get_email_verified_info__pack_to_buffer
                     (const GetEmailVerifiedInfo   *message,
                      ProtobufCBuffer     *buffer);
GetEmailVerifiedInfo *
       get_email_verified_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_email_verified_info__free_unpacked
                     (GetEmailVerifiedInfo *message,
                      ProtobufCAllocator *allocator);
/* GetEmailVerifiedInfoResult methods */
void   get_email_verified_info_result__init
                     (GetEmailVerifiedInfoResult         *message);
size_t get_email_verified_info_result__get_packed_size
                     (const GetEmailVerifiedInfoResult   *message);
size_t get_email_verified_info_result__pack
                     (const GetEmailVerifiedInfoResult   *message,
                      uint8_t             *out);
size_t get_email_verified_info_result__pack_to_buffer
                     (const GetEmailVerifiedInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetEmailVerifiedInfoResult *
       get_email_verified_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_email_verified_info_result__free_unpacked
                     (GetEmailVerifiedInfoResult *message,
                      ProtobufCAllocator *allocator);
/* GetSalvageCondition methods */
void   get_salvage_condition__init
                     (GetSalvageCondition         *message);
size_t get_salvage_condition__get_packed_size
                     (const GetSalvageCondition   *message);
size_t get_salvage_condition__pack
                     (const GetSalvageCondition   *message,
                      uint8_t             *out);
size_t get_salvage_condition__pack_to_buffer
                     (const GetSalvageCondition   *message,
                      ProtobufCBuffer     *buffer);
GetSalvageCondition *
       get_salvage_condition__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_salvage_condition__free_unpacked
                     (GetSalvageCondition *message,
                      ProtobufCAllocator *allocator);
/* GetSalvageConditionResult methods */
void   get_salvage_condition_result__init
                     (GetSalvageConditionResult         *message);
size_t get_salvage_condition_result__get_packed_size
                     (const GetSalvageConditionResult   *message);
size_t get_salvage_condition_result__pack
                     (const GetSalvageConditionResult   *message,
                      uint8_t             *out);
size_t get_salvage_condition_result__pack_to_buffer
                     (const GetSalvageConditionResult   *message,
                      ProtobufCBuffer     *buffer);
GetSalvageConditionResult *
       get_salvage_condition_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_salvage_condition_result__free_unpacked
                     (GetSalvageConditionResult *message,
                      ProtobufCAllocator *allocator);
/* GetActivitiesProps methods */
void   get_activities_props__init
                     (GetActivitiesProps         *message);
size_t get_activities_props__get_packed_size
                     (const GetActivitiesProps   *message);
size_t get_activities_props__pack
                     (const GetActivitiesProps   *message,
                      uint8_t             *out);
size_t get_activities_props__pack_to_buffer
                     (const GetActivitiesProps   *message,
                      ProtobufCBuffer     *buffer);
GetActivitiesProps *
       get_activities_props__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_activities_props__free_unpacked
                     (GetActivitiesProps *message,
                      ProtobufCAllocator *allocator);
/* GetActivitiesPropsResult methods */
void   get_activities_props_result__init
                     (GetActivitiesPropsResult         *message);
size_t get_activities_props_result__get_packed_size
                     (const GetActivitiesPropsResult   *message);
size_t get_activities_props_result__pack
                     (const GetActivitiesPropsResult   *message,
                      uint8_t             *out);
size_t get_activities_props_result__pack_to_buffer
                     (const GetActivitiesPropsResult   *message,
                      ProtobufCBuffer     *buffer);
GetActivitiesPropsResult *
       get_activities_props_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_activities_props_result__free_unpacked
                     (GetActivitiesPropsResult *message,
                      ProtobufCAllocator *allocator);
/* GetActivitiesGiftInfo methods */
void   get_activities_gift_info__init
                     (GetActivitiesGiftInfo         *message);
size_t get_activities_gift_info__get_packed_size
                     (const GetActivitiesGiftInfo   *message);
size_t get_activities_gift_info__pack
                     (const GetActivitiesGiftInfo   *message,
                      uint8_t             *out);
size_t get_activities_gift_info__pack_to_buffer
                     (const GetActivitiesGiftInfo   *message,
                      ProtobufCBuffer     *buffer);
GetActivitiesGiftInfo *
       get_activities_gift_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_activities_gift_info__free_unpacked
                     (GetActivitiesGiftInfo *message,
                      ProtobufCAllocator *allocator);
/* GetActivitiesGiftInfoResult methods */
void   get_activities_gift_info_result__init
                     (GetActivitiesGiftInfoResult         *message);
size_t get_activities_gift_info_result__get_packed_size
                     (const GetActivitiesGiftInfoResult   *message);
size_t get_activities_gift_info_result__pack
                     (const GetActivitiesGiftInfoResult   *message,
                      uint8_t             *out);
size_t get_activities_gift_info_result__pack_to_buffer
                     (const GetActivitiesGiftInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetActivitiesGiftInfoResult *
       get_activities_gift_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_activities_gift_info_result__free_unpacked
                     (GetActivitiesGiftInfoResult *message,
                      ProtobufCAllocator *allocator);
/* GetActivitiesPrayInfo methods */
void   get_activities_pray_info__init
                     (GetActivitiesPrayInfo         *message);
size_t get_activities_pray_info__get_packed_size
                     (const GetActivitiesPrayInfo   *message);
size_t get_activities_pray_info__pack
                     (const GetActivitiesPrayInfo   *message,
                      uint8_t             *out);
size_t get_activities_pray_info__pack_to_buffer
                     (const GetActivitiesPrayInfo   *message,
                      ProtobufCBuffer     *buffer);
GetActivitiesPrayInfo *
       get_activities_pray_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_activities_pray_info__free_unpacked
                     (GetActivitiesPrayInfo *message,
                      ProtobufCAllocator *allocator);
/* GetActivitiesPrayInfoResult methods */
void   get_activities_pray_info_result__init
                     (GetActivitiesPrayInfoResult         *message);
size_t get_activities_pray_info_result__get_packed_size
                     (const GetActivitiesPrayInfoResult   *message);
size_t get_activities_pray_info_result__pack
                     (const GetActivitiesPrayInfoResult   *message,
                      uint8_t             *out);
size_t get_activities_pray_info_result__pack_to_buffer
                     (const GetActivitiesPrayInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetActivitiesPrayInfoResult *
       get_activities_pray_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_activities_pray_info_result__free_unpacked
                     (GetActivitiesPrayInfoResult *message,
                      ProtobufCAllocator *allocator);
/* GetPray methods */
void   get_pray__init
                     (GetPray         *message);
size_t get_pray__get_packed_size
                     (const GetPray   *message);
size_t get_pray__pack
                     (const GetPray   *message,
                      uint8_t             *out);
size_t get_pray__pack_to_buffer
                     (const GetPray   *message,
                      ProtobufCBuffer     *buffer);
GetPray *
       get_pray__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_pray__free_unpacked
                     (GetPray *message,
                      ProtobufCAllocator *allocator);
/* GetPrayResult methods */
void   get_pray_result__init
                     (GetPrayResult         *message);
size_t get_pray_result__get_packed_size
                     (const GetPrayResult   *message);
size_t get_pray_result__pack
                     (const GetPrayResult   *message,
                      uint8_t             *out);
size_t get_pray_result__pack_to_buffer
                     (const GetPrayResult   *message,
                      ProtobufCBuffer     *buffer);
GetPrayResult *
       get_pray_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_pray_result__free_unpacked
                     (GetPrayResult *message,
                      ProtobufCAllocator *allocator);
/* SendActivitiesGift methods */
void   send_activities_gift__init
                     (SendActivitiesGift         *message);
size_t send_activities_gift__get_packed_size
                     (const SendActivitiesGift   *message);
size_t send_activities_gift__pack
                     (const SendActivitiesGift   *message,
                      uint8_t             *out);
size_t send_activities_gift__pack_to_buffer
                     (const SendActivitiesGift   *message,
                      ProtobufCBuffer     *buffer);
SendActivitiesGift *
       send_activities_gift__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_activities_gift__free_unpacked
                     (SendActivitiesGift *message,
                      ProtobufCAllocator *allocator);
/* SendActivitiesGiftResult methods */
void   send_activities_gift_result__init
                     (SendActivitiesGiftResult         *message);
size_t send_activities_gift_result__get_packed_size
                     (const SendActivitiesGiftResult   *message);
size_t send_activities_gift_result__pack
                     (const SendActivitiesGiftResult   *message,
                      uint8_t             *out);
size_t send_activities_gift_result__pack_to_buffer
                     (const SendActivitiesGiftResult   *message,
                      ProtobufCBuffer     *buffer);
SendActivitiesGiftResult *
       send_activities_gift_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_activities_gift_result__free_unpacked
                     (SendActivitiesGiftResult *message,
                      ProtobufCAllocator *allocator);
/* GetPirateAttackInfo methods */
void   get_pirate_attack_info__init
                     (GetPirateAttackInfo         *message);
size_t get_pirate_attack_info__get_packed_size
                     (const GetPirateAttackInfo   *message);
size_t get_pirate_attack_info__pack
                     (const GetPirateAttackInfo   *message,
                      uint8_t             *out);
size_t get_pirate_attack_info__pack_to_buffer
                     (const GetPirateAttackInfo   *message,
                      ProtobufCBuffer     *buffer);
GetPirateAttackInfo *
       get_pirate_attack_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_pirate_attack_info__free_unpacked
                     (GetPirateAttackInfo *message,
                      ProtobufCAllocator *allocator);
/* GetPirateAttackInfoResult methods */
void   get_pirate_attack_info_result__init
                     (GetPirateAttackInfoResult         *message);
size_t get_pirate_attack_info_result__get_packed_size
                     (const GetPirateAttackInfoResult   *message);
size_t get_pirate_attack_info_result__pack
                     (const GetPirateAttackInfoResult   *message,
                      uint8_t             *out);
size_t get_pirate_attack_info_result__pack_to_buffer
                     (const GetPirateAttackInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetPirateAttackInfoResult *
       get_pirate_attack_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_pirate_attack_info_result__free_unpacked
                     (GetPirateAttackInfoResult *message,
                      ProtobufCAllocator *allocator);
/* GetAttackPirateInfo methods */
void   get_attack_pirate_info__init
                     (GetAttackPirateInfo         *message);
size_t get_attack_pirate_info__get_packed_size
                     (const GetAttackPirateInfo   *message);
size_t get_attack_pirate_info__pack
                     (const GetAttackPirateInfo   *message,
                      uint8_t             *out);
size_t get_attack_pirate_info__pack_to_buffer
                     (const GetAttackPirateInfo   *message,
                      ProtobufCBuffer     *buffer);
GetAttackPirateInfo *
       get_attack_pirate_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_attack_pirate_info__free_unpacked
                     (GetAttackPirateInfo *message,
                      ProtobufCAllocator *allocator);
/* GetAttackPirateInfoResult methods */
void   get_attack_pirate_info_result__init
                     (GetAttackPirateInfoResult         *message);
size_t get_attack_pirate_info_result__get_packed_size
                     (const GetAttackPirateInfoResult   *message);
size_t get_attack_pirate_info_result__pack
                     (const GetAttackPirateInfoResult   *message,
                      uint8_t             *out);
size_t get_attack_pirate_info_result__pack_to_buffer
                     (const GetAttackPirateInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetAttackPirateInfoResult *
       get_attack_pirate_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_attack_pirate_info_result__free_unpacked
                     (GetAttackPirateInfoResult *message,
                      ProtobufCAllocator *allocator);
/* GetVTicketMarketActivities methods */
void   get_vticket_market_activities__init
                     (GetVTicketMarketActivities         *message);
size_t get_vticket_market_activities__get_packed_size
                     (const GetVTicketMarketActivities   *message);
size_t get_vticket_market_activities__pack
                     (const GetVTicketMarketActivities   *message,
                      uint8_t             *out);
size_t get_vticket_market_activities__pack_to_buffer
                     (const GetVTicketMarketActivities   *message,
                      ProtobufCBuffer     *buffer);
GetVTicketMarketActivities *
       get_vticket_market_activities__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_vticket_market_activities__free_unpacked
                     (GetVTicketMarketActivities *message,
                      ProtobufCAllocator *allocator);
/* VTicketMarketActivitiesDefine methods */
void   vticket_market_activities_define__init
                     (VTicketMarketActivitiesDefine         *message);
size_t vticket_market_activities_define__get_packed_size
                     (const VTicketMarketActivitiesDefine   *message);
size_t vticket_market_activities_define__pack
                     (const VTicketMarketActivitiesDefine   *message,
                      uint8_t             *out);
size_t vticket_market_activities_define__pack_to_buffer
                     (const VTicketMarketActivitiesDefine   *message,
                      ProtobufCBuffer     *buffer);
VTicketMarketActivitiesDefine *
       vticket_market_activities_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vticket_market_activities_define__free_unpacked
                     (VTicketMarketActivitiesDefine *message,
                      ProtobufCAllocator *allocator);
/* GetVTicketMarketActivitiesResult methods */
void   get_vticket_market_activities_result__init
                     (GetVTicketMarketActivitiesResult         *message);
size_t get_vticket_market_activities_result__get_packed_size
                     (const GetVTicketMarketActivitiesResult   *message);
size_t get_vticket_market_activities_result__pack
                     (const GetVTicketMarketActivitiesResult   *message,
                      uint8_t             *out);
size_t get_vticket_market_activities_result__pack_to_buffer
                     (const GetVTicketMarketActivitiesResult   *message,
                      ProtobufCBuffer     *buffer);
GetVTicketMarketActivitiesResult *
       get_vticket_market_activities_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_vticket_market_activities_result__free_unpacked
                     (GetVTicketMarketActivitiesResult *message,
                      ProtobufCAllocator *allocator);
/* BuyVTicketMarketActivities methods */
void   buy_vticket_market_activities__init
                     (BuyVTicketMarketActivities         *message);
size_t buy_vticket_market_activities__get_packed_size
                     (const BuyVTicketMarketActivities   *message);
size_t buy_vticket_market_activities__pack
                     (const BuyVTicketMarketActivities   *message,
                      uint8_t             *out);
size_t buy_vticket_market_activities__pack_to_buffer
                     (const BuyVTicketMarketActivities   *message,
                      ProtobufCBuffer     *buffer);
BuyVTicketMarketActivities *
       buy_vticket_market_activities__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_vticket_market_activities__free_unpacked
                     (BuyVTicketMarketActivities *message,
                      ProtobufCAllocator *allocator);
/* BuyVTicketMarketActivitiesResult methods */
void   buy_vticket_market_activities_result__init
                     (BuyVTicketMarketActivitiesResult         *message);
size_t buy_vticket_market_activities_result__get_packed_size
                     (const BuyVTicketMarketActivitiesResult   *message);
size_t buy_vticket_market_activities_result__pack
                     (const BuyVTicketMarketActivitiesResult   *message,
                      uint8_t             *out);
size_t buy_vticket_market_activities_result__pack_to_buffer
                     (const BuyVTicketMarketActivitiesResult   *message,
                      ProtobufCBuffer     *buffer);
BuyVTicketMarketActivitiesResult *
       buy_vticket_market_activities_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_vticket_market_activities_result__free_unpacked
                     (BuyVTicketMarketActivitiesResult *message,
                      ProtobufCAllocator *allocator);
/* FinalMyExploitScore methods */
void   final_my_exploit_score__init
                     (FinalMyExploitScore         *message);
size_t final_my_exploit_score__get_packed_size
                     (const FinalMyExploitScore   *message);
size_t final_my_exploit_score__pack
                     (const FinalMyExploitScore   *message,
                      uint8_t             *out);
size_t final_my_exploit_score__pack_to_buffer
                     (const FinalMyExploitScore   *message,
                      ProtobufCBuffer     *buffer);
FinalMyExploitScore *
       final_my_exploit_score__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   final_my_exploit_score__free_unpacked
                     (FinalMyExploitScore *message,
                      ProtobufCAllocator *allocator);
/* FinalMyExploitScoreResult methods */
void   final_my_exploit_score_result__init
                     (FinalMyExploitScoreResult         *message);
size_t final_my_exploit_score_result__get_packed_size
                     (const FinalMyExploitScoreResult   *message);
size_t final_my_exploit_score_result__pack
                     (const FinalMyExploitScoreResult   *message,
                      uint8_t             *out);
size_t final_my_exploit_score_result__pack_to_buffer
                     (const FinalMyExploitScoreResult   *message,
                      ProtobufCBuffer     *buffer);
FinalMyExploitScoreResult *
       final_my_exploit_score_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   final_my_exploit_score_result__free_unpacked
                     (FinalMyExploitScoreResult *message,
                      ProtobufCAllocator *allocator);
/* FindLootPlayer methods */
void   find_loot_player__init
                     (FindLootPlayer         *message);
size_t find_loot_player__get_packed_size
                     (const FindLootPlayer   *message);
size_t find_loot_player__pack
                     (const FindLootPlayer   *message,
                      uint8_t             *out);
size_t find_loot_player__pack_to_buffer
                     (const FindLootPlayer   *message,
                      ProtobufCBuffer     *buffer);
FindLootPlayer *
       find_loot_player__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   find_loot_player__free_unpacked
                     (FindLootPlayer *message,
                      ProtobufCAllocator *allocator);
/* CharacterInfo methods */
void   character_info__init
                     (CharacterInfo         *message);
size_t character_info__get_packed_size
                     (const CharacterInfo   *message);
size_t character_info__pack
                     (const CharacterInfo   *message,
                      uint8_t             *out);
size_t character_info__pack_to_buffer
                     (const CharacterInfo   *message,
                      ProtobufCBuffer     *buffer);
CharacterInfo *
       character_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   character_info__free_unpacked
                     (CharacterInfo *message,
                      ProtobufCAllocator *allocator);
/* FindLootPlayerResult methods */
void   find_loot_player_result__init
                     (FindLootPlayerResult         *message);
size_t find_loot_player_result__get_packed_size
                     (const FindLootPlayerResult   *message);
size_t find_loot_player_result__pack
                     (const FindLootPlayerResult   *message,
                      uint8_t             *out);
size_t find_loot_player_result__pack_to_buffer
                     (const FindLootPlayerResult   *message,
                      ProtobufCBuffer     *buffer);
FindLootPlayerResult *
       find_loot_player_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   find_loot_player_result__free_unpacked
                     (FindLootPlayerResult *message,
                      ProtobufCAllocator *allocator);
/* LootPlayer methods */
void   loot_player__init
                     (LootPlayer         *message);
size_t loot_player__get_packed_size
                     (const LootPlayer   *message);
size_t loot_player__pack
                     (const LootPlayer   *message,
                      uint8_t             *out);
size_t loot_player__pack_to_buffer
                     (const LootPlayer   *message,
                      ProtobufCBuffer     *buffer);
LootPlayer *
       loot_player__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   loot_player__free_unpacked
                     (LootPlayer *message,
                      ProtobufCAllocator *allocator);
/* LootPlayerResult methods */
void   loot_player_result__init
                     (LootPlayerResult         *message);
size_t loot_player_result__get_packed_size
                     (const LootPlayerResult   *message);
size_t loot_player_result__pack
                     (const LootPlayerResult   *message,
                      uint8_t             *out);
size_t loot_player_result__pack_to_buffer
                     (const LootPlayerResult   *message,
                      ProtobufCBuffer     *buffer);
LootPlayerResult *
       loot_player_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   loot_player_result__free_unpacked
                     (LootPlayerResult *message,
                      ProtobufCAllocator *allocator);
/* GetLootPlayerLog methods */
void   get_loot_player_log__init
                     (GetLootPlayerLog         *message);
size_t get_loot_player_log__get_packed_size
                     (const GetLootPlayerLog   *message);
size_t get_loot_player_log__pack
                     (const GetLootPlayerLog   *message,
                      uint8_t             *out);
size_t get_loot_player_log__pack_to_buffer
                     (const GetLootPlayerLog   *message,
                      ProtobufCBuffer     *buffer);
GetLootPlayerLog *
       get_loot_player_log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_loot_player_log__free_unpacked
                     (GetLootPlayerLog *message,
                      ProtobufCAllocator *allocator);
/* LootLog methods */
void   loot_log__init
                     (LootLog         *message);
size_t loot_log__get_packed_size
                     (const LootLog   *message);
size_t loot_log__pack
                     (const LootLog   *message,
                      uint8_t             *out);
size_t loot_log__pack_to_buffer
                     (const LootLog   *message,
                      ProtobufCBuffer     *buffer);
LootLog *
       loot_log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   loot_log__free_unpacked
                     (LootLog *message,
                      ProtobufCAllocator *allocator);
/* GetLootPlayerLogResult methods */
void   get_loot_player_log_result__init
                     (GetLootPlayerLogResult         *message);
size_t get_loot_player_log_result__get_packed_size
                     (const GetLootPlayerLogResult   *message);
size_t get_loot_player_log_result__pack
                     (const GetLootPlayerLogResult   *message,
                      uint8_t             *out);
size_t get_loot_player_log_result__pack_to_buffer
                     (const GetLootPlayerLogResult   *message,
                      ProtobufCBuffer     *buffer);
GetLootPlayerLogResult *
       get_loot_player_log_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_loot_player_log_result__free_unpacked
                     (GetLootPlayerLogResult *message,
                      ProtobufCAllocator *allocator);
/* StartRevengeOnLootPlayer methods */
void   start_revenge_on_loot_player__init
                     (StartRevengeOnLootPlayer         *message);
size_t start_revenge_on_loot_player__get_packed_size
                     (const StartRevengeOnLootPlayer   *message);
size_t start_revenge_on_loot_player__pack
                     (const StartRevengeOnLootPlayer   *message,
                      uint8_t             *out);
size_t start_revenge_on_loot_player__pack_to_buffer
                     (const StartRevengeOnLootPlayer   *message,
                      ProtobufCBuffer     *buffer);
StartRevengeOnLootPlayer *
       start_revenge_on_loot_player__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   start_revenge_on_loot_player__free_unpacked
                     (StartRevengeOnLootPlayer *message,
                      ProtobufCAllocator *allocator);
/* AttackPirateDataInfo methods */
void   attack_pirate_data_info__init
                     (AttackPirateDataInfo         *message);
size_t attack_pirate_data_info__get_packed_size
                     (const AttackPirateDataInfo   *message);
size_t attack_pirate_data_info__pack
                     (const AttackPirateDataInfo   *message,
                      uint8_t             *out);
size_t attack_pirate_data_info__pack_to_buffer
                     (const AttackPirateDataInfo   *message,
                      ProtobufCBuffer     *buffer);
AttackPirateDataInfo *
       attack_pirate_data_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   attack_pirate_data_info__free_unpacked
                     (AttackPirateDataInfo *message,
                      ProtobufCAllocator *allocator);
/* GetAttackPirateRankInfo methods */
void   get_attack_pirate_rank_info__init
                     (GetAttackPirateRankInfo         *message);
size_t get_attack_pirate_rank_info__get_packed_size
                     (const GetAttackPirateRankInfo   *message);
size_t get_attack_pirate_rank_info__pack
                     (const GetAttackPirateRankInfo   *message,
                      uint8_t             *out);
size_t get_attack_pirate_rank_info__pack_to_buffer
                     (const GetAttackPirateRankInfo   *message,
                      ProtobufCBuffer     *buffer);
GetAttackPirateRankInfo *
       get_attack_pirate_rank_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_attack_pirate_rank_info__free_unpacked
                     (GetAttackPirateRankInfo *message,
                      ProtobufCAllocator *allocator);
/* GetAttackPirateRankInfoResult methods */
void   get_attack_pirate_rank_info_result__init
                     (GetAttackPirateRankInfoResult         *message);
size_t get_attack_pirate_rank_info_result__get_packed_size
                     (const GetAttackPirateRankInfoResult   *message);
size_t get_attack_pirate_rank_info_result__pack
                     (const GetAttackPirateRankInfoResult   *message,
                      uint8_t             *out);
size_t get_attack_pirate_rank_info_result__pack_to_buffer
                     (const GetAttackPirateRankInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetAttackPirateRankInfoResult *
       get_attack_pirate_rank_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_attack_pirate_rank_info_result__free_unpacked
                     (GetAttackPirateRankInfoResult *message,
                      ProtobufCAllocator *allocator);
/* GetAttackPirateBossInfo methods */
void   get_attack_pirate_boss_info__init
                     (GetAttackPirateBossInfo         *message);
size_t get_attack_pirate_boss_info__get_packed_size
                     (const GetAttackPirateBossInfo   *message);
size_t get_attack_pirate_boss_info__pack
                     (const GetAttackPirateBossInfo   *message,
                      uint8_t             *out);
size_t get_attack_pirate_boss_info__pack_to_buffer
                     (const GetAttackPirateBossInfo   *message,
                      ProtobufCBuffer     *buffer);
GetAttackPirateBossInfo *
       get_attack_pirate_boss_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_attack_pirate_boss_info__free_unpacked
                     (GetAttackPirateBossInfo *message,
                      ProtobufCAllocator *allocator);
/* GetAttackPirateBossInfoResult methods */
void   get_attack_pirate_boss_info_result__init
                     (GetAttackPirateBossInfoResult         *message);
size_t get_attack_pirate_boss_info_result__get_packed_size
                     (const GetAttackPirateBossInfoResult   *message);
size_t get_attack_pirate_boss_info_result__pack
                     (const GetAttackPirateBossInfoResult   *message,
                      uint8_t             *out);
size_t get_attack_pirate_boss_info_result__pack_to_buffer
                     (const GetAttackPirateBossInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetAttackPirateBossInfoResult *
       get_attack_pirate_boss_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_attack_pirate_boss_info_result__free_unpacked
                     (GetAttackPirateBossInfoResult *message,
                      ProtobufCAllocator *allocator);
/* InsuranceItem methods */
void   insurance_item__init
                     (InsuranceItem         *message);
size_t insurance_item__get_packed_size
                     (const InsuranceItem   *message);
size_t insurance_item__pack
                     (const InsuranceItem   *message,
                      uint8_t             *out);
size_t insurance_item__pack_to_buffer
                     (const InsuranceItem   *message,
                      ProtobufCBuffer     *buffer);
InsuranceItem *
       insurance_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   insurance_item__free_unpacked
                     (InsuranceItem *message,
                      ProtobufCAllocator *allocator);
/* InsuranceItemStatus methods */
void   insurance_item_status__init
                     (InsuranceItemStatus         *message);
size_t insurance_item_status__get_packed_size
                     (const InsuranceItemStatus   *message);
size_t insurance_item_status__pack
                     (const InsuranceItemStatus   *message,
                      uint8_t             *out);
size_t insurance_item_status__pack_to_buffer
                     (const InsuranceItemStatus   *message,
                      ProtobufCBuffer     *buffer);
InsuranceItemStatus *
       insurance_item_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   insurance_item_status__free_unpacked
                     (InsuranceItemStatus *message,
                      ProtobufCAllocator *allocator);
/* BuyInsurance methods */
void   buy_insurance__init
                     (BuyInsurance         *message);
size_t buy_insurance__get_packed_size
                     (const BuyInsurance   *message);
size_t buy_insurance__pack
                     (const BuyInsurance   *message,
                      uint8_t             *out);
size_t buy_insurance__pack_to_buffer
                     (const BuyInsurance   *message,
                      ProtobufCBuffer     *buffer);
BuyInsurance *
       buy_insurance__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_insurance__free_unpacked
                     (BuyInsurance *message,
                      ProtobufCAllocator *allocator);
/* BuyInsuranceResult methods */
void   buy_insurance_result__init
                     (BuyInsuranceResult         *message);
size_t buy_insurance_result__get_packed_size
                     (const BuyInsuranceResult   *message);
size_t buy_insurance_result__pack
                     (const BuyInsuranceResult   *message,
                      uint8_t             *out);
size_t buy_insurance_result__pack_to_buffer
                     (const BuyInsuranceResult   *message,
                      ProtobufCBuffer     *buffer);
BuyInsuranceResult *
       buy_insurance_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_insurance_result__free_unpacked
                     (BuyInsuranceResult *message,
                      ProtobufCAllocator *allocator);
/* CompleteDialogs methods */
void   complete_dialogs__init
                     (CompleteDialogs         *message);
size_t complete_dialogs__get_packed_size
                     (const CompleteDialogs   *message);
size_t complete_dialogs__pack
                     (const CompleteDialogs   *message,
                      uint8_t             *out);
size_t complete_dialogs__pack_to_buffer
                     (const CompleteDialogs   *message,
                      ProtobufCBuffer     *buffer);
CompleteDialogs *
       complete_dialogs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   complete_dialogs__free_unpacked
                     (CompleteDialogs *message,
                      ProtobufCAllocator *allocator);
/* CompleteDialogsResult methods */
void   complete_dialogs_result__init
                     (CompleteDialogsResult         *message);
size_t complete_dialogs_result__get_packed_size
                     (const CompleteDialogsResult   *message);
size_t complete_dialogs_result__pack
                     (const CompleteDialogsResult   *message,
                      uint8_t             *out);
size_t complete_dialogs_result__pack_to_buffer
                     (const CompleteDialogsResult   *message,
                      ProtobufCBuffer     *buffer);
CompleteDialogsResult *
       complete_dialogs_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   complete_dialogs_result__free_unpacked
                     (CompleteDialogsResult *message,
                      ProtobufCAllocator *allocator);
/* ObtainLottoMessage methods */
void   obtain_lotto_message__init
                     (ObtainLottoMessage         *message);
size_t obtain_lotto_message__get_packed_size
                     (const ObtainLottoMessage   *message);
size_t obtain_lotto_message__pack
                     (const ObtainLottoMessage   *message,
                      uint8_t             *out);
size_t obtain_lotto_message__pack_to_buffer
                     (const ObtainLottoMessage   *message,
                      ProtobufCBuffer     *buffer);
ObtainLottoMessage *
       obtain_lotto_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obtain_lotto_message__free_unpacked
                     (ObtainLottoMessage *message,
                      ProtobufCAllocator *allocator);
/* LottoMessage methods */
void   lotto_message__init
                     (LottoMessage         *message);
size_t lotto_message__get_packed_size
                     (const LottoMessage   *message);
size_t lotto_message__pack
                     (const LottoMessage   *message,
                      uint8_t             *out);
size_t lotto_message__pack_to_buffer
                     (const LottoMessage   *message,
                      ProtobufCBuffer     *buffer);
LottoMessage *
       lotto_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lotto_message__free_unpacked
                     (LottoMessage *message,
                      ProtobufCAllocator *allocator);
/* ObtainLottoMessageResult methods */
void   obtain_lotto_message_result__init
                     (ObtainLottoMessageResult         *message);
size_t obtain_lotto_message_result__get_packed_size
                     (const ObtainLottoMessageResult   *message);
size_t obtain_lotto_message_result__pack
                     (const ObtainLottoMessageResult   *message,
                      uint8_t             *out);
size_t obtain_lotto_message_result__pack_to_buffer
                     (const ObtainLottoMessageResult   *message,
                      ProtobufCBuffer     *buffer);
ObtainLottoMessageResult *
       obtain_lotto_message_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obtain_lotto_message_result__free_unpacked
                     (ObtainLottoMessageResult *message,
                      ProtobufCAllocator *allocator);
/* GetInviteBonus methods */
void   get_invite_bonus__init
                     (GetInviteBonus         *message);
size_t get_invite_bonus__get_packed_size
                     (const GetInviteBonus   *message);
size_t get_invite_bonus__pack
                     (const GetInviteBonus   *message,
                      uint8_t             *out);
size_t get_invite_bonus__pack_to_buffer
                     (const GetInviteBonus   *message,
                      ProtobufCBuffer     *buffer);
GetInviteBonus *
       get_invite_bonus__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_invite_bonus__free_unpacked
                     (GetInviteBonus *message,
                      ProtobufCAllocator *allocator);
/* GetInviteBonusResult methods */
void   get_invite_bonus_result__init
                     (GetInviteBonusResult         *message);
size_t get_invite_bonus_result__get_packed_size
                     (const GetInviteBonusResult   *message);
size_t get_invite_bonus_result__pack
                     (const GetInviteBonusResult   *message,
                      uint8_t             *out);
size_t get_invite_bonus_result__pack_to_buffer
                     (const GetInviteBonusResult   *message,
                      ProtobufCBuffer     *buffer);
GetInviteBonusResult *
       get_invite_bonus_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_invite_bonus_result__free_unpacked
                     (GetInviteBonusResult *message,
                      ProtobufCAllocator *allocator);
/* CompanyDefine methods */
void   company_define__init
                     (CompanyDefine         *message);
size_t company_define__get_packed_size
                     (const CompanyDefine   *message);
size_t company_define__pack
                     (const CompanyDefine   *message,
                      uint8_t             *out);
size_t company_define__pack_to_buffer
                     (const CompanyDefine   *message,
                      ProtobufCBuffer     *buffer);
CompanyDefine *
       company_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   company_define__free_unpacked
                     (CompanyDefine *message,
                      ProtobufCAllocator *allocator);
/* GetCompanies methods */
void   get_companies__init
                     (GetCompanies         *message);
size_t get_companies__get_packed_size
                     (const GetCompanies   *message);
size_t get_companies__pack
                     (const GetCompanies   *message,
                      uint8_t             *out);
size_t get_companies__pack_to_buffer
                     (const GetCompanies   *message,
                      ProtobufCBuffer     *buffer);
GetCompanies *
       get_companies__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_companies__free_unpacked
                     (GetCompanies *message,
                      ProtobufCAllocator *allocator);
/* GetCompaniesResult methods */
void   get_companies_result__init
                     (GetCompaniesResult         *message);
size_t get_companies_result__get_packed_size
                     (const GetCompaniesResult   *message);
size_t get_companies_result__pack
                     (const GetCompaniesResult   *message,
                      uint8_t             *out);
size_t get_companies_result__pack_to_buffer
                     (const GetCompaniesResult   *message,
                      ProtobufCBuffer     *buffer);
GetCompaniesResult *
       get_companies_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_companies_result__free_unpacked
                     (GetCompaniesResult *message,
                      ProtobufCAllocator *allocator);
/* EquipCompany methods */
void   equip_company__init
                     (EquipCompany         *message);
size_t equip_company__get_packed_size
                     (const EquipCompany   *message);
size_t equip_company__pack
                     (const EquipCompany   *message,
                      uint8_t             *out);
size_t equip_company__pack_to_buffer
                     (const EquipCompany   *message,
                      ProtobufCBuffer     *buffer);
EquipCompany *
       equip_company__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   equip_company__free_unpacked
                     (EquipCompany *message,
                      ProtobufCAllocator *allocator);
/* EquipCompanyResult methods */
void   equip_company_result__init
                     (EquipCompanyResult         *message);
size_t equip_company_result__get_packed_size
                     (const EquipCompanyResult   *message);
size_t equip_company_result__pack
                     (const EquipCompanyResult   *message,
                      uint8_t             *out);
size_t equip_company_result__pack_to_buffer
                     (const EquipCompanyResult   *message,
                      ProtobufCBuffer     *buffer);
EquipCompanyResult *
       equip_company_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   equip_company_result__free_unpacked
                     (EquipCompanyResult *message,
                      ProtobufCAllocator *allocator);
/* UnlockCompany methods */
void   unlock_company__init
                     (UnlockCompany         *message);
size_t unlock_company__get_packed_size
                     (const UnlockCompany   *message);
size_t unlock_company__pack
                     (const UnlockCompany   *message,
                      uint8_t             *out);
size_t unlock_company__pack_to_buffer
                     (const UnlockCompany   *message,
                      ProtobufCBuffer     *buffer);
UnlockCompany *
       unlock_company__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   unlock_company__free_unpacked
                     (UnlockCompany *message,
                      ProtobufCAllocator *allocator);
/* UnlockCompanyResult methods */
void   unlock_company_result__init
                     (UnlockCompanyResult         *message);
size_t unlock_company_result__get_packed_size
                     (const UnlockCompanyResult   *message);
size_t unlock_company_result__pack
                     (const UnlockCompanyResult   *message,
                      uint8_t             *out);
size_t unlock_company_result__pack_to_buffer
                     (const UnlockCompanyResult   *message,
                      ProtobufCBuffer     *buffer);
UnlockCompanyResult *
       unlock_company_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   unlock_company_result__free_unpacked
                     (UnlockCompanyResult *message,
                      ProtobufCAllocator *allocator);
/* GetCompanionsStatus methods */
void   get_companions_status__init
                     (GetCompanionsStatus         *message);
size_t get_companions_status__get_packed_size
                     (const GetCompanionsStatus   *message);
size_t get_companions_status__pack
                     (const GetCompanionsStatus   *message,
                      uint8_t             *out);
size_t get_companions_status__pack_to_buffer
                     (const GetCompanionsStatus   *message,
                      ProtobufCBuffer     *buffer);
GetCompanionsStatus *
       get_companions_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_companions_status__free_unpacked
                     (GetCompanionsStatus *message,
                      ProtobufCAllocator *allocator);
/* CompanionsStatus methods */
void   companions_status__init
                     (CompanionsStatus         *message);
size_t companions_status__get_packed_size
                     (const CompanionsStatus   *message);
size_t companions_status__pack
                     (const CompanionsStatus   *message,
                      uint8_t             *out);
size_t companions_status__pack_to_buffer
                     (const CompanionsStatus   *message,
                      ProtobufCBuffer     *buffer);
CompanionsStatus *
       companions_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   companions_status__free_unpacked
                     (CompanionsStatus *message,
                      ProtobufCAllocator *allocator);
/* GetCompanionsStatusResult methods */
void   get_companions_status_result__init
                     (GetCompanionsStatusResult         *message);
size_t get_companions_status_result__get_packed_size
                     (const GetCompanionsStatusResult   *message);
size_t get_companions_status_result__pack
                     (const GetCompanionsStatusResult   *message,
                      uint8_t             *out);
size_t get_companions_status_result__pack_to_buffer
                     (const GetCompanionsStatusResult   *message,
                      ProtobufCBuffer     *buffer);
GetCompanionsStatusResult *
       get_companions_status_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_companions_status_result__free_unpacked
                     (GetCompanionsStatusResult *message,
                      ProtobufCAllocator *allocator);
/* UnlockShipCabin methods */
void   unlock_ship_cabin__init
                     (UnlockShipCabin         *message);
size_t unlock_ship_cabin__get_packed_size
                     (const UnlockShipCabin   *message);
size_t unlock_ship_cabin__pack
                     (const UnlockShipCabin   *message,
                      uint8_t             *out);
size_t unlock_ship_cabin__pack_to_buffer
                     (const UnlockShipCabin   *message,
                      ProtobufCBuffer     *buffer);
UnlockShipCabin *
       unlock_ship_cabin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   unlock_ship_cabin__free_unpacked
                     (UnlockShipCabin *message,
                      ProtobufCAllocator *allocator);
/* UnlockShipCabinResult methods */
void   unlock_ship_cabin_result__init
                     (UnlockShipCabinResult         *message);
size_t unlock_ship_cabin_result__get_packed_size
                     (const UnlockShipCabinResult   *message);
size_t unlock_ship_cabin_result__pack
                     (const UnlockShipCabinResult   *message,
                      uint8_t             *out);
size_t unlock_ship_cabin_result__pack_to_buffer
                     (const UnlockShipCabinResult   *message,
                      ProtobufCBuffer     *buffer);
UnlockShipCabinResult *
       unlock_ship_cabin_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   unlock_ship_cabin_result__free_unpacked
                     (UnlockShipCabinResult *message,
                      ProtobufCAllocator *allocator);
/* GetShipCompanions methods */
void   get_ship_companions__init
                     (GetShipCompanions         *message);
size_t get_ship_companions__get_packed_size
                     (const GetShipCompanions   *message);
size_t get_ship_companions__pack
                     (const GetShipCompanions   *message,
                      uint8_t             *out);
size_t get_ship_companions__pack_to_buffer
                     (const GetShipCompanions   *message,
                      ProtobufCBuffer     *buffer);
GetShipCompanions *
       get_ship_companions__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_ship_companions__free_unpacked
                     (GetShipCompanions *message,
                      ProtobufCAllocator *allocator);
/* ShipGearDetail methods */
void   ship_gear_detail__init
                     (ShipGearDetail         *message);
size_t ship_gear_detail__get_packed_size
                     (const ShipGearDetail   *message);
size_t ship_gear_detail__pack
                     (const ShipGearDetail   *message,
                      uint8_t             *out);
size_t ship_gear_detail__pack_to_buffer
                     (const ShipGearDetail   *message,
                      ProtobufCBuffer     *buffer);
ShipGearDetail *
       ship_gear_detail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ship_gear_detail__free_unpacked
                     (ShipGearDetail *message,
                      ProtobufCAllocator *allocator);
/* GetShipCompanionsResult methods */
void   get_ship_companions_result__init
                     (GetShipCompanionsResult         *message);
size_t get_ship_companions_result__get_packed_size
                     (const GetShipCompanionsResult   *message);
size_t get_ship_companions_result__pack
                     (const GetShipCompanionsResult   *message,
                      uint8_t             *out);
size_t get_ship_companions_result__pack_to_buffer
                     (const GetShipCompanionsResult   *message,
                      ProtobufCBuffer     *buffer);
GetShipCompanionsResult *
       get_ship_companions_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_ship_companions_result__free_unpacked
                     (GetShipCompanionsResult *message,
                      ProtobufCAllocator *allocator);
/* SetShipCompanions methods */
void   set_ship_companions__init
                     (SetShipCompanions         *message);
size_t set_ship_companions__get_packed_size
                     (const SetShipCompanions   *message);
size_t set_ship_companions__pack
                     (const SetShipCompanions   *message,
                      uint8_t             *out);
size_t set_ship_companions__pack_to_buffer
                     (const SetShipCompanions   *message,
                      ProtobufCBuffer     *buffer);
SetShipCompanions *
       set_ship_companions__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_ship_companions__free_unpacked
                     (SetShipCompanions *message,
                      ProtobufCAllocator *allocator);
/* SetShipCompanionsResult methods */
void   set_ship_companions_result__init
                     (SetShipCompanionsResult         *message);
size_t set_ship_companions_result__get_packed_size
                     (const SetShipCompanionsResult   *message);
size_t set_ship_companions_result__pack
                     (const SetShipCompanionsResult   *message,
                      uint8_t             *out);
size_t set_ship_companions_result__pack_to_buffer
                     (const SetShipCompanionsResult   *message,
                      ProtobufCBuffer     *buffer);
SetShipCompanionsResult *
       set_ship_companions_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_ship_companions_result__free_unpacked
                     (SetShipCompanionsResult *message,
                      ProtobufCAllocator *allocator);
/* SaveFailedFight methods */
void   save_failed_fight__init
                     (SaveFailedFight         *message);
size_t save_failed_fight__get_packed_size
                     (const SaveFailedFight   *message);
size_t save_failed_fight__pack
                     (const SaveFailedFight   *message,
                      uint8_t             *out);
size_t save_failed_fight__pack_to_buffer
                     (const SaveFailedFight   *message,
                      ProtobufCBuffer     *buffer);
SaveFailedFight *
       save_failed_fight__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   save_failed_fight__free_unpacked
                     (SaveFailedFight *message,
                      ProtobufCAllocator *allocator);
/* SaveFailedFightResult methods */
void   save_failed_fight_result__init
                     (SaveFailedFightResult         *message);
size_t save_failed_fight_result__get_packed_size
                     (const SaveFailedFightResult   *message);
size_t save_failed_fight_result__pack
                     (const SaveFailedFightResult   *message,
                      uint8_t             *out);
size_t save_failed_fight_result__pack_to_buffer
                     (const SaveFailedFightResult   *message,
                      ProtobufCBuffer     *buffer);
SaveFailedFightResult *
       save_failed_fight_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   save_failed_fight_result__free_unpacked
                     (SaveFailedFightResult *message,
                      ProtobufCAllocator *allocator);
/* EndFailedFightByVTicket methods */
void   end_failed_fight_by_vticket__init
                     (EndFailedFightByVTicket         *message);
size_t end_failed_fight_by_vticket__get_packed_size
                     (const EndFailedFightByVTicket   *message);
size_t end_failed_fight_by_vticket__pack
                     (const EndFailedFightByVTicket   *message,
                      uint8_t             *out);
size_t end_failed_fight_by_vticket__pack_to_buffer
                     (const EndFailedFightByVTicket   *message,
                      ProtobufCBuffer     *buffer);
EndFailedFightByVTicket *
       end_failed_fight_by_vticket__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_failed_fight_by_vticket__free_unpacked
                     (EndFailedFightByVTicket *message,
                      ProtobufCAllocator *allocator);
/* EndFailedFightByVTicketResult methods */
void   end_failed_fight_by_vticket_result__init
                     (EndFailedFightByVTicketResult         *message);
size_t end_failed_fight_by_vticket_result__get_packed_size
                     (const EndFailedFightByVTicketResult   *message);
size_t end_failed_fight_by_vticket_result__pack
                     (const EndFailedFightByVTicketResult   *message,
                      uint8_t             *out);
size_t end_failed_fight_by_vticket_result__pack_to_buffer
                     (const EndFailedFightByVTicketResult   *message,
                      ProtobufCBuffer     *buffer);
EndFailedFightByVTicketResult *
       end_failed_fight_by_vticket_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_failed_fight_by_vticket_result__free_unpacked
                     (EndFailedFightByVTicketResult *message,
                      ProtobufCAllocator *allocator);
/* CompleteCompanionTask methods */
void   complete_companion_task__init
                     (CompleteCompanionTask         *message);
size_t complete_companion_task__get_packed_size
                     (const CompleteCompanionTask   *message);
size_t complete_companion_task__pack
                     (const CompleteCompanionTask   *message,
                      uint8_t             *out);
size_t complete_companion_task__pack_to_buffer
                     (const CompleteCompanionTask   *message,
                      ProtobufCBuffer     *buffer);
CompleteCompanionTask *
       complete_companion_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   complete_companion_task__free_unpacked
                     (CompleteCompanionTask *message,
                      ProtobufCAllocator *allocator);
/* CompleteCompanionTaskResult methods */
void   complete_companion_task_result__init
                     (CompleteCompanionTaskResult         *message);
size_t complete_companion_task_result__get_packed_size
                     (const CompleteCompanionTaskResult   *message);
size_t complete_companion_task_result__pack
                     (const CompleteCompanionTaskResult   *message,
                      uint8_t             *out);
size_t complete_companion_task_result__pack_to_buffer
                     (const CompleteCompanionTaskResult   *message,
                      ProtobufCBuffer     *buffer);
CompleteCompanionTaskResult *
       complete_companion_task_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   complete_companion_task_result__free_unpacked
                     (CompleteCompanionTaskResult *message,
                      ProtobufCAllocator *allocator);
/* DeductCoins methods */
void   deduct_coins__init
                     (DeductCoins         *message);
size_t deduct_coins__get_packed_size
                     (const DeductCoins   *message);
size_t deduct_coins__pack
                     (const DeductCoins   *message,
                      uint8_t             *out);
size_t deduct_coins__pack_to_buffer
                     (const DeductCoins   *message,
                      ProtobufCBuffer     *buffer);
DeductCoins *
       deduct_coins__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   deduct_coins__free_unpacked
                     (DeductCoins *message,
                      ProtobufCAllocator *allocator);
/* DeductCoinsResult methods */
void   deduct_coins_result__init
                     (DeductCoinsResult         *message);
size_t deduct_coins_result__get_packed_size
                     (const DeductCoinsResult   *message);
size_t deduct_coins_result__pack
                     (const DeductCoinsResult   *message,
                      uint8_t             *out);
size_t deduct_coins_result__pack_to_buffer
                     (const DeductCoinsResult   *message,
                      ProtobufCBuffer     *buffer);
DeductCoinsResult *
       deduct_coins_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   deduct_coins_result__free_unpacked
                     (DeductCoinsResult *message,
                      ProtobufCAllocator *allocator);
/* UpdateUserSelection methods */
void   update_user_selection__init
                     (UpdateUserSelection         *message);
size_t update_user_selection__get_packed_size
                     (const UpdateUserSelection   *message);
size_t update_user_selection__pack
                     (const UpdateUserSelection   *message,
                      uint8_t             *out);
size_t update_user_selection__pack_to_buffer
                     (const UpdateUserSelection   *message,
                      ProtobufCBuffer     *buffer);
UpdateUserSelection *
       update_user_selection__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_user_selection__free_unpacked
                     (UpdateUserSelection *message,
                      ProtobufCAllocator *allocator);
/* UpdateDataVersion methods */
void   update_data_version__init
                     (UpdateDataVersion         *message);
size_t update_data_version__get_packed_size
                     (const UpdateDataVersion   *message);
size_t update_data_version__pack
                     (const UpdateDataVersion   *message,
                      uint8_t             *out);
size_t update_data_version__pack_to_buffer
                     (const UpdateDataVersion   *message,
                      ProtobufCBuffer     *buffer);
UpdateDataVersion *
       update_data_version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_data_version__free_unpacked
                     (UpdateDataVersion *message,
                      ProtobufCAllocator *allocator);
/* UpdateDataVersionResult methods */
void   update_data_version_result__init
                     (UpdateDataVersionResult         *message);
size_t update_data_version_result__get_packed_size
                     (const UpdateDataVersionResult   *message);
size_t update_data_version_result__pack
                     (const UpdateDataVersionResult   *message,
                      uint8_t             *out);
size_t update_data_version_result__pack_to_buffer
                     (const UpdateDataVersionResult   *message,
                      ProtobufCBuffer     *buffer);
UpdateDataVersionResult *
       update_data_version_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_data_version_result__free_unpacked
                     (UpdateDataVersionResult *message,
                      ProtobufCAllocator *allocator);
/* CalFastHireCrew methods */
void   cal_fast_hire_crew__init
                     (CalFastHireCrew         *message);
size_t cal_fast_hire_crew__get_packed_size
                     (const CalFastHireCrew   *message);
size_t cal_fast_hire_crew__pack
                     (const CalFastHireCrew   *message,
                      uint8_t             *out);
size_t cal_fast_hire_crew__pack_to_buffer
                     (const CalFastHireCrew   *message,
                      ProtobufCBuffer     *buffer);
CalFastHireCrew *
       cal_fast_hire_crew__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cal_fast_hire_crew__free_unpacked
                     (CalFastHireCrew *message,
                      ProtobufCAllocator *allocator);
/* CalFastHireCrewResult methods */
void   cal_fast_hire_crew_result__init
                     (CalFastHireCrewResult         *message);
size_t cal_fast_hire_crew_result__get_packed_size
                     (const CalFastHireCrewResult   *message);
size_t cal_fast_hire_crew_result__pack
                     (const CalFastHireCrewResult   *message,
                      uint8_t             *out);
size_t cal_fast_hire_crew_result__pack_to_buffer
                     (const CalFastHireCrewResult   *message,
                      ProtobufCBuffer     *buffer);
CalFastHireCrewResult *
       cal_fast_hire_crew_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cal_fast_hire_crew_result__free_unpacked
                     (CalFastHireCrewResult *message,
                      ProtobufCAllocator *allocator);
/* CompanionRebirth methods */
void   companion_rebirth__init
                     (CompanionRebirth         *message);
size_t companion_rebirth__get_packed_size
                     (const CompanionRebirth   *message);
size_t companion_rebirth__pack
                     (const CompanionRebirth   *message,
                      uint8_t             *out);
size_t companion_rebirth__pack_to_buffer
                     (const CompanionRebirth   *message,
                      ProtobufCBuffer     *buffer);
CompanionRebirth *
       companion_rebirth__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   companion_rebirth__free_unpacked
                     (CompanionRebirth *message,
                      ProtobufCAllocator *allocator);
/* CompanionRebirthResult methods */
void   companion_rebirth_result__init
                     (CompanionRebirthResult         *message);
size_t companion_rebirth_result__get_packed_size
                     (const CompanionRebirthResult   *message);
size_t companion_rebirth_result__pack
                     (const CompanionRebirthResult   *message,
                      uint8_t             *out);
size_t companion_rebirth_result__pack_to_buffer
                     (const CompanionRebirthResult   *message,
                      ProtobufCBuffer     *buffer);
CompanionRebirthResult *
       companion_rebirth_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   companion_rebirth_result__free_unpacked
                     (CompanionRebirthResult *message,
                      ProtobufCAllocator *allocator);
/* RepairEquipment methods */
void   repair_equipment__init
                     (RepairEquipment         *message);
size_t repair_equipment__get_packed_size
                     (const RepairEquipment   *message);
size_t repair_equipment__pack
                     (const RepairEquipment   *message,
                      uint8_t             *out);
size_t repair_equipment__pack_to_buffer
                     (const RepairEquipment   *message,
                      ProtobufCBuffer     *buffer);
RepairEquipment *
       repair_equipment__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   repair_equipment__free_unpacked
                     (RepairEquipment *message,
                      ProtobufCAllocator *allocator);
/* RepairEquipmentResult methods */
void   repair_equipment_result__init
                     (RepairEquipmentResult         *message);
size_t repair_equipment_result__get_packed_size
                     (const RepairEquipmentResult   *message);
size_t repair_equipment_result__pack
                     (const RepairEquipmentResult   *message,
                      uint8_t             *out);
size_t repair_equipment_result__pack_to_buffer
                     (const RepairEquipmentResult   *message,
                      ProtobufCBuffer     *buffer);
RepairEquipmentResult *
       repair_equipment_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   repair_equipment_result__free_unpacked
                     (RepairEquipmentResult *message,
                      ProtobufCAllocator *allocator);
/* GetRepairEquipmentNeed methods */
void   get_repair_equipment_need__init
                     (GetRepairEquipmentNeed         *message);
size_t get_repair_equipment_need__get_packed_size
                     (const GetRepairEquipmentNeed   *message);
size_t get_repair_equipment_need__pack
                     (const GetRepairEquipmentNeed   *message,
                      uint8_t             *out);
size_t get_repair_equipment_need__pack_to_buffer
                     (const GetRepairEquipmentNeed   *message,
                      ProtobufCBuffer     *buffer);
GetRepairEquipmentNeed *
       get_repair_equipment_need__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_repair_equipment_need__free_unpacked
                     (GetRepairEquipmentNeed *message,
                      ProtobufCAllocator *allocator);
/* GetRepairEquipmentNeedResult methods */
void   get_repair_equipment_need_result__init
                     (GetRepairEquipmentNeedResult         *message);
size_t get_repair_equipment_need_result__get_packed_size
                     (const GetRepairEquipmentNeedResult   *message);
size_t get_repair_equipment_need_result__pack
                     (const GetRepairEquipmentNeedResult   *message,
                      uint8_t             *out);
size_t get_repair_equipment_need_result__pack_to_buffer
                     (const GetRepairEquipmentNeedResult   *message,
                      ProtobufCBuffer     *buffer);
GetRepairEquipmentNeedResult *
       get_repair_equipment_need_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_repair_equipment_need_result__free_unpacked
                     (GetRepairEquipmentNeedResult *message,
                      ProtobufCAllocator *allocator);
/* RecentOrderDefine methods */
void   recent_order_define__init
                     (RecentOrderDefine         *message);
size_t recent_order_define__get_packed_size
                     (const RecentOrderDefine   *message);
size_t recent_order_define__pack
                     (const RecentOrderDefine   *message,
                      uint8_t             *out);
size_t recent_order_define__pack_to_buffer
                     (const RecentOrderDefine   *message,
                      ProtobufCBuffer     *buffer);
RecentOrderDefine *
       recent_order_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   recent_order_define__free_unpacked
                     (RecentOrderDefine *message,
                      ProtobufCAllocator *allocator);
/* GetRecentOrder methods */
void   get_recent_order__init
                     (GetRecentOrder         *message);
size_t get_recent_order__get_packed_size
                     (const GetRecentOrder   *message);
size_t get_recent_order__pack
                     (const GetRecentOrder   *message,
                      uint8_t             *out);
size_t get_recent_order__pack_to_buffer
                     (const GetRecentOrder   *message,
                      ProtobufCBuffer     *buffer);
GetRecentOrder *
       get_recent_order__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_recent_order__free_unpacked
                     (GetRecentOrder *message,
                      ProtobufCAllocator *allocator);
/* GetRecentOrderResult methods */
void   get_recent_order_result__init
                     (GetRecentOrderResult         *message);
size_t get_recent_order_result__get_packed_size
                     (const GetRecentOrderResult   *message);
size_t get_recent_order_result__pack
                     (const GetRecentOrderResult   *message,
                      uint8_t             *out);
size_t get_recent_order_result__pack_to_buffer
                     (const GetRecentOrderResult   *message,
                      ProtobufCBuffer     *buffer);
GetRecentOrderResult *
       get_recent_order_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_recent_order_result__free_unpacked
                     (GetRecentOrderResult *message,
                      ProtobufCAllocator *allocator);
/* GetDropIncreaseRateInfo methods */
void   get_drop_increase_rate_info__init
                     (GetDropIncreaseRateInfo         *message);
size_t get_drop_increase_rate_info__get_packed_size
                     (const GetDropIncreaseRateInfo   *message);
size_t get_drop_increase_rate_info__pack
                     (const GetDropIncreaseRateInfo   *message,
                      uint8_t             *out);
size_t get_drop_increase_rate_info__pack_to_buffer
                     (const GetDropIncreaseRateInfo   *message,
                      ProtobufCBuffer     *buffer);
GetDropIncreaseRateInfo *
       get_drop_increase_rate_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_drop_increase_rate_info__free_unpacked
                     (GetDropIncreaseRateInfo *message,
                      ProtobufCAllocator *allocator);
/* GetDropIncreaseRateInfoResult methods */
void   get_drop_increase_rate_info_result__init
                     (GetDropIncreaseRateInfoResult         *message);
size_t get_drop_increase_rate_info_result__get_packed_size
                     (const GetDropIncreaseRateInfoResult   *message);
size_t get_drop_increase_rate_info_result__pack
                     (const GetDropIncreaseRateInfoResult   *message,
                      uint8_t             *out);
size_t get_drop_increase_rate_info_result__pack_to_buffer
                     (const GetDropIncreaseRateInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetDropIncreaseRateInfoResult *
       get_drop_increase_rate_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_drop_increase_rate_info_result__free_unpacked
                     (GetDropIncreaseRateInfoResult *message,
                      ProtobufCAllocator *allocator);
/* GetDailyActivitiesReward methods */
void   get_daily_activities_reward__init
                     (GetDailyActivitiesReward         *message);
size_t get_daily_activities_reward__get_packed_size
                     (const GetDailyActivitiesReward   *message);
size_t get_daily_activities_reward__pack
                     (const GetDailyActivitiesReward   *message,
                      uint8_t             *out);
size_t get_daily_activities_reward__pack_to_buffer
                     (const GetDailyActivitiesReward   *message,
                      ProtobufCBuffer     *buffer);
GetDailyActivitiesReward *
       get_daily_activities_reward__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_daily_activities_reward__free_unpacked
                     (GetDailyActivitiesReward *message,
                      ProtobufCAllocator *allocator);
/* GetDailyActivitiesRewardResult methods */
void   get_daily_activities_reward_result__init
                     (GetDailyActivitiesRewardResult         *message);
size_t get_daily_activities_reward_result__get_packed_size
                     (const GetDailyActivitiesRewardResult   *message);
size_t get_daily_activities_reward_result__pack
                     (const GetDailyActivitiesRewardResult   *message,
                      uint8_t             *out);
size_t get_daily_activities_reward_result__pack_to_buffer
                     (const GetDailyActivitiesRewardResult   *message,
                      ProtobufCBuffer     *buffer);
GetDailyActivitiesRewardResult *
       get_daily_activities_reward_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_daily_activities_reward_result__free_unpacked
                     (GetDailyActivitiesRewardResult *message,
                      ProtobufCAllocator *allocator);
/* AddProficiency methods */
void   add_proficiency__init
                     (AddProficiency         *message);
size_t add_proficiency__get_packed_size
                     (const AddProficiency   *message);
size_t add_proficiency__pack
                     (const AddProficiency   *message,
                      uint8_t             *out);
size_t add_proficiency__pack_to_buffer
                     (const AddProficiency   *message,
                      ProtobufCBuffer     *buffer);
AddProficiency *
       add_proficiency__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_proficiency__free_unpacked
                     (AddProficiency *message,
                      ProtobufCAllocator *allocator);
/* AddProficiencyResult methods */
void   add_proficiency_result__init
                     (AddProficiencyResult         *message);
size_t add_proficiency_result__get_packed_size
                     (const AddProficiencyResult   *message);
size_t add_proficiency_result__pack
                     (const AddProficiencyResult   *message,
                      uint8_t             *out);
size_t add_proficiency_result__pack_to_buffer
                     (const AddProficiencyResult   *message,
                      ProtobufCBuffer     *buffer);
AddProficiencyResult *
       add_proficiency_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_proficiency_result__free_unpacked
                     (AddProficiencyResult *message,
                      ProtobufCAllocator *allocator);
/* GetProficiencyValues methods */
void   get_proficiency_values__init
                     (GetProficiencyValues         *message);
size_t get_proficiency_values__get_packed_size
                     (const GetProficiencyValues   *message);
size_t get_proficiency_values__pack
                     (const GetProficiencyValues   *message,
                      uint8_t             *out);
size_t get_proficiency_values__pack_to_buffer
                     (const GetProficiencyValues   *message,
                      ProtobufCBuffer     *buffer);
GetProficiencyValues *
       get_proficiency_values__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_proficiency_values__free_unpacked
                     (GetProficiencyValues *message,
                      ProtobufCAllocator *allocator);
/* ProficiencyDefine methods */
void   proficiency_define__init
                     (ProficiencyDefine         *message);
size_t proficiency_define__get_packed_size
                     (const ProficiencyDefine   *message);
size_t proficiency_define__pack
                     (const ProficiencyDefine   *message,
                      uint8_t             *out);
size_t proficiency_define__pack_to_buffer
                     (const ProficiencyDefine   *message,
                      ProtobufCBuffer     *buffer);
ProficiencyDefine *
       proficiency_define__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proficiency_define__free_unpacked
                     (ProficiencyDefine *message,
                      ProtobufCAllocator *allocator);
/* GetProficiencyValuesResult methods */
void   get_proficiency_values_result__init
                     (GetProficiencyValuesResult         *message);
size_t get_proficiency_values_result__get_packed_size
                     (const GetProficiencyValuesResult   *message);
size_t get_proficiency_values_result__pack
                     (const GetProficiencyValuesResult   *message,
                      uint8_t             *out);
size_t get_proficiency_values_result__pack_to_buffer
                     (const GetProficiencyValuesResult   *message,
                      ProtobufCBuffer     *buffer);
GetProficiencyValuesResult *
       get_proficiency_values_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_proficiency_values_result__free_unpacked
                     (GetProficiencyValuesResult *message,
                      ProtobufCAllocator *allocator);
/* GetProficiencyBook methods */
void   get_proficiency_book__init
                     (GetProficiencyBook         *message);
size_t get_proficiency_book__get_packed_size
                     (const GetProficiencyBook   *message);
size_t get_proficiency_book__pack
                     (const GetProficiencyBook   *message,
                      uint8_t             *out);
size_t get_proficiency_book__pack_to_buffer
                     (const GetProficiencyBook   *message,
                      ProtobufCBuffer     *buffer);
GetProficiencyBook *
       get_proficiency_book__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_proficiency_book__free_unpacked
                     (GetProficiencyBook *message,
                      ProtobufCAllocator *allocator);
/* GetProficiencyBookResult methods */
void   get_proficiency_book_result__init
                     (GetProficiencyBookResult         *message);
size_t get_proficiency_book_result__get_packed_size
                     (const GetProficiencyBookResult   *message);
size_t get_proficiency_book_result__pack
                     (const GetProficiencyBookResult   *message,
                      uint8_t             *out);
size_t get_proficiency_book_result__pack_to_buffer
                     (const GetProficiencyBookResult   *message,
                      ProtobufCBuffer     *buffer);
GetProficiencyBookResult *
       get_proficiency_book_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_proficiency_book_result__free_unpacked
                     (GetProficiencyBookResult *message,
                      ProtobufCAllocator *allocator);
/* RepairCityDefenseInWar methods */
void   repair_city_defense_in_war__init
                     (RepairCityDefenseInWar         *message);
size_t repair_city_defense_in_war__get_packed_size
                     (const RepairCityDefenseInWar   *message);
size_t repair_city_defense_in_war__pack
                     (const RepairCityDefenseInWar   *message,
                      uint8_t             *out);
size_t repair_city_defense_in_war__pack_to_buffer
                     (const RepairCityDefenseInWar   *message,
                      ProtobufCBuffer     *buffer);
RepairCityDefenseInWar *
       repair_city_defense_in_war__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   repair_city_defense_in_war__free_unpacked
                     (RepairCityDefenseInWar *message,
                      ProtobufCAllocator *allocator);
/* RepairCityDefenseInWarResult methods */
void   repair_city_defense_in_war_result__init
                     (RepairCityDefenseInWarResult         *message);
size_t repair_city_defense_in_war_result__get_packed_size
                     (const RepairCityDefenseInWarResult   *message);
size_t repair_city_defense_in_war_result__pack
                     (const RepairCityDefenseInWarResult   *message,
                      uint8_t             *out);
size_t repair_city_defense_in_war_result__pack_to_buffer
                     (const RepairCityDefenseInWarResult   *message,
                      ProtobufCBuffer     *buffer);
RepairCityDefenseInWarResult *
       repair_city_defense_in_war_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   repair_city_defense_in_war_result__free_unpacked
                     (RepairCityDefenseInWarResult *message,
                      ProtobufCAllocator *allocator);
/* EnhanceAttack methods */
void   enhance_attack__init
                     (EnhanceAttack         *message);
size_t enhance_attack__get_packed_size
                     (const EnhanceAttack   *message);
size_t enhance_attack__pack
                     (const EnhanceAttack   *message,
                      uint8_t             *out);
size_t enhance_attack__pack_to_buffer
                     (const EnhanceAttack   *message,
                      ProtobufCBuffer     *buffer);
EnhanceAttack *
       enhance_attack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   enhance_attack__free_unpacked
                     (EnhanceAttack *message,
                      ProtobufCAllocator *allocator);
/* EnhanceAttackResult methods */
void   enhance_attack_result__init
                     (EnhanceAttackResult         *message);
size_t enhance_attack_result__get_packed_size
                     (const EnhanceAttackResult   *message);
size_t enhance_attack_result__pack
                     (const EnhanceAttackResult   *message,
                      uint8_t             *out);
size_t enhance_attack_result__pack_to_buffer
                     (const EnhanceAttackResult   *message,
                      ProtobufCBuffer     *buffer);
EnhanceAttackResult *
       enhance_attack_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   enhance_attack_result__free_unpacked
                     (EnhanceAttackResult *message,
                      ProtobufCAllocator *allocator);
/* GetCityPrepareStatus methods */
void   get_city_prepare_status__init
                     (GetCityPrepareStatus         *message);
size_t get_city_prepare_status__get_packed_size
                     (const GetCityPrepareStatus   *message);
size_t get_city_prepare_status__pack
                     (const GetCityPrepareStatus   *message,
                      uint8_t             *out);
size_t get_city_prepare_status__pack_to_buffer
                     (const GetCityPrepareStatus   *message,
                      ProtobufCBuffer     *buffer);
GetCityPrepareStatus *
       get_city_prepare_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_city_prepare_status__free_unpacked
                     (GetCityPrepareStatus *message,
                      ProtobufCAllocator *allocator);
/* NationWarPair methods */
void   nation_war_pair__init
                     (NationWarPair         *message);
size_t nation_war_pair__get_packed_size
                     (const NationWarPair   *message);
size_t nation_war_pair__pack
                     (const NationWarPair   *message,
                      uint8_t             *out);
size_t nation_war_pair__pack_to_buffer
                     (const NationWarPair   *message,
                      ProtobufCBuffer     *buffer);
NationWarPair *
       nation_war_pair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nation_war_pair__free_unpacked
                     (NationWarPair *message,
                      ProtobufCAllocator *allocator);
/* GetCityPrepareStatusResult methods */
void   get_city_prepare_status_result__init
                     (GetCityPrepareStatusResult         *message);
size_t get_city_prepare_status_result__get_packed_size
                     (const GetCityPrepareStatusResult   *message);
size_t get_city_prepare_status_result__pack
                     (const GetCityPrepareStatusResult   *message,
                      uint8_t             *out);
size_t get_city_prepare_status_result__pack_to_buffer
                     (const GetCityPrepareStatusResult   *message,
                      ProtobufCBuffer     *buffer);
GetCityPrepareStatusResult *
       get_city_prepare_status_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_city_prepare_status_result__free_unpacked
                     (GetCityPrepareStatusResult *message,
                      ProtobufCAllocator *allocator);
/* StartAttackCity methods */
void   start_attack_city__init
                     (StartAttackCity         *message);
size_t start_attack_city__get_packed_size
                     (const StartAttackCity   *message);
size_t start_attack_city__pack
                     (const StartAttackCity   *message,
                      uint8_t             *out);
size_t start_attack_city__pack_to_buffer
                     (const StartAttackCity   *message,
                      ProtobufCBuffer     *buffer);
StartAttackCity *
       start_attack_city__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   start_attack_city__free_unpacked
                     (StartAttackCity *message,
                      ProtobufCAllocator *allocator);
/* CityStatus methods */
void   city_status__init
                     (CityStatus         *message);
size_t city_status__get_packed_size
                     (const CityStatus   *message);
size_t city_status__pack
                     (const CityStatus   *message,
                      uint8_t             *out);
size_t city_status__pack_to_buffer
                     (const CityStatus   *message,
                      ProtobufCBuffer     *buffer);
CityStatus *
       city_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   city_status__free_unpacked
                     (CityStatus *message,
                      ProtobufCAllocator *allocator);
/* StartAttackCityResult methods */
void   start_attack_city_result__init
                     (StartAttackCityResult         *message);
size_t start_attack_city_result__get_packed_size
                     (const StartAttackCityResult   *message);
size_t start_attack_city_result__pack
                     (const StartAttackCityResult   *message,
                      uint8_t             *out);
size_t start_attack_city_result__pack_to_buffer
                     (const StartAttackCityResult   *message,
                      ProtobufCBuffer     *buffer);
StartAttackCityResult *
       start_attack_city_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   start_attack_city_result__free_unpacked
                     (StartAttackCityResult *message,
                      ProtobufCAllocator *allocator);
/* GetEnemyNation methods */
void   get_enemy_nation__init
                     (GetEnemyNation         *message);
size_t get_enemy_nation__get_packed_size
                     (const GetEnemyNation   *message);
size_t get_enemy_nation__pack
                     (const GetEnemyNation   *message,
                      uint8_t             *out);
size_t get_enemy_nation__pack_to_buffer
                     (const GetEnemyNation   *message,
                      ProtobufCBuffer     *buffer);
GetEnemyNation *
       get_enemy_nation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_enemy_nation__free_unpacked
                     (GetEnemyNation *message,
                      ProtobufCAllocator *allocator);
/* EnemyNation methods */
void   enemy_nation__init
                     (EnemyNation         *message);
size_t enemy_nation__get_packed_size
                     (const EnemyNation   *message);
size_t enemy_nation__pack
                     (const EnemyNation   *message,
                      uint8_t             *out);
size_t enemy_nation__pack_to_buffer
                     (const EnemyNation   *message,
                      ProtobufCBuffer     *buffer);
EnemyNation *
       enemy_nation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   enemy_nation__free_unpacked
                     (EnemyNation *message,
                      ProtobufCAllocator *allocator);
/* GetEnemyNationResult methods */
void   get_enemy_nation_result__init
                     (GetEnemyNationResult         *message);
size_t get_enemy_nation_result__get_packed_size
                     (const GetEnemyNationResult   *message);
size_t get_enemy_nation_result__pack
                     (const GetEnemyNationResult   *message,
                      uint8_t             *out);
size_t get_enemy_nation_result__pack_to_buffer
                     (const GetEnemyNationResult   *message,
                      ProtobufCBuffer     *buffer);
GetEnemyNationResult *
       get_enemy_nation_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_enemy_nation_result__free_unpacked
                     (GetEnemyNationResult *message,
                      ProtobufCAllocator *allocator);
/* AddCityRepairPool methods */
void   add_city_repair_pool__init
                     (AddCityRepairPool         *message);
size_t add_city_repair_pool__get_packed_size
                     (const AddCityRepairPool   *message);
size_t add_city_repair_pool__pack
                     (const AddCityRepairPool   *message,
                      uint8_t             *out);
size_t add_city_repair_pool__pack_to_buffer
                     (const AddCityRepairPool   *message,
                      ProtobufCBuffer     *buffer);
AddCityRepairPool *
       add_city_repair_pool__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_city_repair_pool__free_unpacked
                     (AddCityRepairPool *message,
                      ProtobufCAllocator *allocator);
/* AddCityRepairPoolResult methods */
void   add_city_repair_pool_result__init
                     (AddCityRepairPoolResult         *message);
size_t add_city_repair_pool_result__get_packed_size
                     (const AddCityRepairPoolResult   *message);
size_t add_city_repair_pool_result__pack
                     (const AddCityRepairPoolResult   *message,
                      uint8_t             *out);
size_t add_city_repair_pool_result__pack_to_buffer
                     (const AddCityRepairPoolResult   *message,
                      ProtobufCBuffer     *buffer);
AddCityRepairPoolResult *
       add_city_repair_pool_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_city_repair_pool_result__free_unpacked
                     (AddCityRepairPoolResult *message,
                      ProtobufCAllocator *allocator);
/* AddCityAttackPool methods */
void   add_city_attack_pool__init
                     (AddCityAttackPool         *message);
size_t add_city_attack_pool__get_packed_size
                     (const AddCityAttackPool   *message);
size_t add_city_attack_pool__pack
                     (const AddCityAttackPool   *message,
                      uint8_t             *out);
size_t add_city_attack_pool__pack_to_buffer
                     (const AddCityAttackPool   *message,
                      ProtobufCBuffer     *buffer);
AddCityAttackPool *
       add_city_attack_pool__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_city_attack_pool__free_unpacked
                     (AddCityAttackPool *message,
                      ProtobufCAllocator *allocator);
/* AddCityAttackPoolResult methods */
void   add_city_attack_pool_result__init
                     (AddCityAttackPoolResult         *message);
size_t add_city_attack_pool_result__get_packed_size
                     (const AddCityAttackPoolResult   *message);
size_t add_city_attack_pool_result__pack
                     (const AddCityAttackPoolResult   *message,
                      uint8_t             *out);
size_t add_city_attack_pool_result__pack_to_buffer
                     (const AddCityAttackPoolResult   *message,
                      ProtobufCBuffer     *buffer);
AddCityAttackPoolResult *
       add_city_attack_pool_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_city_attack_pool_result__free_unpacked
                     (AddCityAttackPoolResult *message,
                      ProtobufCAllocator *allocator);
/* GetPackageInfo methods */
void   get_package_info__init
                     (GetPackageInfo         *message);
size_t get_package_info__get_packed_size
                     (const GetPackageInfo   *message);
size_t get_package_info__pack
                     (const GetPackageInfo   *message,
                      uint8_t             *out);
size_t get_package_info__pack_to_buffer
                     (const GetPackageInfo   *message,
                      ProtobufCBuffer     *buffer);
GetPackageInfo *
       get_package_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_package_info__free_unpacked
                     (GetPackageInfo *message,
                      ProtobufCAllocator *allocator);
/* GetPackageInfoResult methods */
void   get_package_info_result__init
                     (GetPackageInfoResult         *message);
size_t get_package_info_result__get_packed_size
                     (const GetPackageInfoResult   *message);
size_t get_package_info_result__pack
                     (const GetPackageInfoResult   *message,
                      uint8_t             *out);
size_t get_package_info_result__pack_to_buffer
                     (const GetPackageInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetPackageInfoResult *
       get_package_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_package_info_result__free_unpacked
                     (GetPackageInfoResult *message,
                      ProtobufCAllocator *allocator);
/* ApplyStateWar methods */
void   apply_state_war__init
                     (ApplyStateWar         *message);
size_t apply_state_war__get_packed_size
                     (const ApplyStateWar   *message);
size_t apply_state_war__pack
                     (const ApplyStateWar   *message,
                      uint8_t             *out);
size_t apply_state_war__pack_to_buffer
                     (const ApplyStateWar   *message,
                      ProtobufCBuffer     *buffer);
ApplyStateWar *
       apply_state_war__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   apply_state_war__free_unpacked
                     (ApplyStateWar *message,
                      ProtobufCAllocator *allocator);
/* ApplyStateWarResult methods */
void   apply_state_war_result__init
                     (ApplyStateWarResult         *message);
size_t apply_state_war_result__get_packed_size
                     (const ApplyStateWarResult   *message);
size_t apply_state_war_result__pack
                     (const ApplyStateWarResult   *message,
                      uint8_t             *out);
size_t apply_state_war_result__pack_to_buffer
                     (const ApplyStateWarResult   *message,
                      ProtobufCBuffer     *buffer);
ApplyStateWarResult *
       apply_state_war_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   apply_state_war_result__free_unpacked
                     (ApplyStateWarResult *message,
                      ProtobufCAllocator *allocator);
/* ContributionRankInfo methods */
void   contribution_rank_info__init
                     (ContributionRankInfo         *message);
size_t contribution_rank_info__get_packed_size
                     (const ContributionRankInfo   *message);
size_t contribution_rank_info__pack
                     (const ContributionRankInfo   *message,
                      uint8_t             *out);
size_t contribution_rank_info__pack_to_buffer
                     (const ContributionRankInfo   *message,
                      ProtobufCBuffer     *buffer);
ContributionRankInfo *
       contribution_rank_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contribution_rank_info__free_unpacked
                     (ContributionRankInfo *message,
                      ProtobufCAllocator *allocator);
/* GetContributionRank methods */
void   get_contribution_rank__init
                     (GetContributionRank         *message);
size_t get_contribution_rank__get_packed_size
                     (const GetContributionRank   *message);
size_t get_contribution_rank__pack
                     (const GetContributionRank   *message,
                      uint8_t             *out);
size_t get_contribution_rank__pack_to_buffer
                     (const GetContributionRank   *message,
                      ProtobufCBuffer     *buffer);
GetContributionRank *
       get_contribution_rank__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_contribution_rank__free_unpacked
                     (GetContributionRank *message,
                      ProtobufCAllocator *allocator);
/* GetContributionRankResult methods */
void   get_contribution_rank_result__init
                     (GetContributionRankResult         *message);
size_t get_contribution_rank_result__get_packed_size
                     (const GetContributionRankResult   *message);
size_t get_contribution_rank_result__pack
                     (const GetContributionRankResult   *message,
                      uint8_t             *out);
size_t get_contribution_rank_result__pack_to_buffer
                     (const GetContributionRankResult   *message,
                      ProtobufCBuffer     *buffer);
GetContributionRankResult *
       get_contribution_rank_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_contribution_rank_result__free_unpacked
                     (GetContributionRankResult *message,
                      ProtobufCAllocator *allocator);
/* AddSupplyStation methods */
void   add_supply_station__init
                     (AddSupplyStation         *message);
size_t add_supply_station__get_packed_size
                     (const AddSupplyStation   *message);
size_t add_supply_station__pack
                     (const AddSupplyStation   *message,
                      uint8_t             *out);
size_t add_supply_station__pack_to_buffer
                     (const AddSupplyStation   *message,
                      ProtobufCBuffer     *buffer);
AddSupplyStation *
       add_supply_station__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_supply_station__free_unpacked
                     (AddSupplyStation *message,
                      ProtobufCAllocator *allocator);
/* AddSupplyStationResult methods */
void   add_supply_station_result__init
                     (AddSupplyStationResult         *message);
size_t add_supply_station_result__get_packed_size
                     (const AddSupplyStationResult   *message);
size_t add_supply_station_result__pack
                     (const AddSupplyStationResult   *message,
                      uint8_t             *out);
size_t add_supply_station_result__pack_to_buffer
                     (const AddSupplyStationResult   *message,
                      ProtobufCBuffer     *buffer);
AddSupplyStationResult *
       add_supply_station_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_supply_station_result__free_unpacked
                     (AddSupplyStationResult *message,
                      ProtobufCAllocator *allocator);
/* HireArmy methods */
void   hire_army__init
                     (HireArmy         *message);
size_t hire_army__get_packed_size
                     (const HireArmy   *message);
size_t hire_army__pack
                     (const HireArmy   *message,
                      uint8_t             *out);
size_t hire_army__pack_to_buffer
                     (const HireArmy   *message,
                      ProtobufCBuffer     *buffer);
HireArmy *
       hire_army__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hire_army__free_unpacked
                     (HireArmy *message,
                      ProtobufCAllocator *allocator);
/* HireArmyResult methods */
void   hire_army_result__init
                     (HireArmyResult         *message);
size_t hire_army_result__get_packed_size
                     (const HireArmyResult   *message);
size_t hire_army_result__pack
                     (const HireArmyResult   *message,
                      uint8_t             *out);
size_t hire_army_result__pack_to_buffer
                     (const HireArmyResult   *message,
                      ProtobufCBuffer     *buffer);
HireArmyResult *
       hire_army_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hire_army_result__free_unpacked
                     (HireArmyResult *message,
                      ProtobufCAllocator *allocator);
/* GetNationWarEntrance methods */
void   get_nation_war_entrance__init
                     (GetNationWarEntrance         *message);
size_t get_nation_war_entrance__get_packed_size
                     (const GetNationWarEntrance   *message);
size_t get_nation_war_entrance__pack
                     (const GetNationWarEntrance   *message,
                      uint8_t             *out);
size_t get_nation_war_entrance__pack_to_buffer
                     (const GetNationWarEntrance   *message,
                      ProtobufCBuffer     *buffer);
GetNationWarEntrance *
       get_nation_war_entrance__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_nation_war_entrance__free_unpacked
                     (GetNationWarEntrance *message,
                      ProtobufCAllocator *allocator);
/* GetNationWarEntranceResult methods */
void   get_nation_war_entrance_result__init
                     (GetNationWarEntranceResult         *message);
size_t get_nation_war_entrance_result__get_packed_size
                     (const GetNationWarEntranceResult   *message);
size_t get_nation_war_entrance_result__pack
                     (const GetNationWarEntranceResult   *message,
                      uint8_t             *out);
size_t get_nation_war_entrance_result__pack_to_buffer
                     (const GetNationWarEntranceResult   *message,
                      ProtobufCBuffer     *buffer);
GetNationWarEntranceResult *
       get_nation_war_entrance_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_nation_war_entrance_result__free_unpacked
                     (GetNationWarEntranceResult *message,
                      ProtobufCAllocator *allocator);
/* EndAttackCity methods */
void   end_attack_city__init
                     (EndAttackCity         *message);
size_t end_attack_city__get_packed_size
                     (const EndAttackCity   *message);
size_t end_attack_city__pack
                     (const EndAttackCity   *message,
                      uint8_t             *out);
size_t end_attack_city__pack_to_buffer
                     (const EndAttackCity   *message,
                      ProtobufCBuffer     *buffer);
EndAttackCity *
       end_attack_city__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_attack_city__free_unpacked
                     (EndAttackCity *message,
                      ProtobufCAllocator *allocator);
/* EndAttackCityResult methods */
void   end_attack_city_result__init
                     (EndAttackCityResult         *message);
size_t end_attack_city_result__get_packed_size
                     (const EndAttackCityResult   *message);
size_t end_attack_city_result__pack
                     (const EndAttackCityResult   *message,
                      uint8_t             *out);
size_t end_attack_city_result__pack_to_buffer
                     (const EndAttackCityResult   *message,
                      ProtobufCBuffer     *buffer);
EndAttackCityResult *
       end_attack_city_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_attack_city_result__free_unpacked
                     (EndAttackCityResult *message,
                      ProtobufCAllocator *allocator);
/* EnterDepotRepair methods */
void   enter_depot_repair__init
                     (EnterDepotRepair         *message);
size_t enter_depot_repair__get_packed_size
                     (const EnterDepotRepair   *message);
size_t enter_depot_repair__pack
                     (const EnterDepotRepair   *message,
                      uint8_t             *out);
size_t enter_depot_repair__pack_to_buffer
                     (const EnterDepotRepair   *message,
                      ProtobufCBuffer     *buffer);
EnterDepotRepair *
       enter_depot_repair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   enter_depot_repair__free_unpacked
                     (EnterDepotRepair *message,
                      ProtobufCAllocator *allocator);
/* EnterDepotRepairResult methods */
void   enter_depot_repair_result__init
                     (EnterDepotRepairResult         *message);
size_t enter_depot_repair_result__get_packed_size
                     (const EnterDepotRepairResult   *message);
size_t enter_depot_repair_result__pack
                     (const EnterDepotRepairResult   *message,
                      uint8_t             *out);
size_t enter_depot_repair_result__pack_to_buffer
                     (const EnterDepotRepairResult   *message,
                      ProtobufCBuffer     *buffer);
EnterDepotRepairResult *
       enter_depot_repair_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   enter_depot_repair_result__free_unpacked
                     (EnterDepotRepairResult *message,
                      ProtobufCAllocator *allocator);
/* GetNationWarCityLost methods */
void   get_nation_war_city_lost__init
                     (GetNationWarCityLost         *message);
size_t get_nation_war_city_lost__get_packed_size
                     (const GetNationWarCityLost   *message);
size_t get_nation_war_city_lost__pack
                     (const GetNationWarCityLost   *message,
                      uint8_t             *out);
size_t get_nation_war_city_lost__pack_to_buffer
                     (const GetNationWarCityLost   *message,
                      ProtobufCBuffer     *buffer);
GetNationWarCityLost *
       get_nation_war_city_lost__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_nation_war_city_lost__free_unpacked
                     (GetNationWarCityLost *message,
                      ProtobufCAllocator *allocator);
/* CityLost methods */
void   city_lost__init
                     (CityLost         *message);
size_t city_lost__get_packed_size
                     (const CityLost   *message);
size_t city_lost__pack
                     (const CityLost   *message,
                      uint8_t             *out);
size_t city_lost__pack_to_buffer
                     (const CityLost   *message,
                      ProtobufCBuffer     *buffer);
CityLost *
       city_lost__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   city_lost__free_unpacked
                     (CityLost *message,
                      ProtobufCAllocator *allocator);
/* GetNationWarCityLostResult methods */
void   get_nation_war_city_lost_result__init
                     (GetNationWarCityLostResult         *message);
size_t get_nation_war_city_lost_result__get_packed_size
                     (const GetNationWarCityLostResult   *message);
size_t get_nation_war_city_lost_result__pack
                     (const GetNationWarCityLostResult   *message,
                      uint8_t             *out);
size_t get_nation_war_city_lost_result__pack_to_buffer
                     (const GetNationWarCityLostResult   *message,
                      ProtobufCBuffer     *buffer);
GetNationWarCityLostResult *
       get_nation_war_city_lost_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_nation_war_city_lost_result__free_unpacked
                     (GetNationWarCityLostResult *message,
                      ProtobufCAllocator *allocator);
/* NationWarCharacterShip methods */
void   nation_war_character_ship__init
                     (NationWarCharacterShip         *message);
size_t nation_war_character_ship__get_packed_size
                     (const NationWarCharacterShip   *message);
size_t nation_war_character_ship__pack
                     (const NationWarCharacterShip   *message,
                      uint8_t             *out);
size_t nation_war_character_ship__pack_to_buffer
                     (const NationWarCharacterShip   *message,
                      ProtobufCBuffer     *buffer);
NationWarCharacterShip *
       nation_war_character_ship__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nation_war_character_ship__free_unpacked
                     (NationWarCharacterShip *message,
                      ProtobufCAllocator *allocator);
/* NationWarCharacterStatus methods */
void   nation_war_character_status__init
                     (NationWarCharacterStatus         *message);
size_t nation_war_character_status__get_packed_size
                     (const NationWarCharacterStatus   *message);
size_t nation_war_character_status__pack
                     (const NationWarCharacterStatus   *message,
                      uint8_t             *out);
size_t nation_war_character_status__pack_to_buffer
                     (const NationWarCharacterStatus   *message,
                      ProtobufCBuffer     *buffer);
NationWarCharacterStatus *
       nation_war_character_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nation_war_character_status__free_unpacked
                     (NationWarCharacterStatus *message,
                      ProtobufCAllocator *allocator);
/* NationWarBattleTurnResult methods */
void   nation_war_battle_turn_result__init
                     (NationWarBattleTurnResult         *message);
size_t nation_war_battle_turn_result__get_packed_size
                     (const NationWarBattleTurnResult   *message);
size_t nation_war_battle_turn_result__pack
                     (const NationWarBattleTurnResult   *message,
                      uint8_t             *out);
size_t nation_war_battle_turn_result__pack_to_buffer
                     (const NationWarBattleTurnResult   *message,
                      ProtobufCBuffer     *buffer);
NationWarBattleTurnResult *
       nation_war_battle_turn_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nation_war_battle_turn_result__free_unpacked
                     (NationWarBattleTurnResult *message,
                      ProtobufCAllocator *allocator);
/* ReachDepot methods */
void   reach_depot__init
                     (ReachDepot         *message);
size_t reach_depot__get_packed_size
                     (const ReachDepot   *message);
size_t reach_depot__pack
                     (const ReachDepot   *message,
                      uint8_t             *out);
size_t reach_depot__pack_to_buffer
                     (const ReachDepot   *message,
                      ProtobufCBuffer     *buffer);
ReachDepot *
       reach_depot__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reach_depot__free_unpacked
                     (ReachDepot *message,
                      ProtobufCAllocator *allocator);
/* ReachDepotResult methods */
void   reach_depot_result__init
                     (ReachDepotResult         *message);
size_t reach_depot_result__get_packed_size
                     (const ReachDepotResult   *message);
size_t reach_depot_result__pack
                     (const ReachDepotResult   *message,
                      uint8_t             *out);
size_t reach_depot_result__pack_to_buffer
                     (const ReachDepotResult   *message,
                      ProtobufCBuffer     *buffer);
ReachDepotResult *
       reach_depot_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reach_depot_result__free_unpacked
                     (ReachDepotResult *message,
                      ProtobufCAllocator *allocator);
/* ReduceInNationWar methods */
void   reduce_in_nation_war__init
                     (ReduceInNationWar         *message);
size_t reduce_in_nation_war__get_packed_size
                     (const ReduceInNationWar   *message);
size_t reduce_in_nation_war__pack
                     (const ReduceInNationWar   *message,
                      uint8_t             *out);
size_t reduce_in_nation_war__pack_to_buffer
                     (const ReduceInNationWar   *message,
                      ProtobufCBuffer     *buffer);
ReduceInNationWar *
       reduce_in_nation_war__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reduce_in_nation_war__free_unpacked
                     (ReduceInNationWar *message,
                      ProtobufCAllocator *allocator);
/* ReduceInfo methods */
void   reduce_info__init
                     (ReduceInfo         *message);
size_t reduce_info__get_packed_size
                     (const ReduceInfo   *message);
size_t reduce_info__pack
                     (const ReduceInfo   *message,
                      uint8_t             *out);
size_t reduce_info__pack_to_buffer
                     (const ReduceInfo   *message,
                      ProtobufCBuffer     *buffer);
ReduceInfo *
       reduce_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reduce_info__free_unpacked
                     (ReduceInfo *message,
                      ProtobufCAllocator *allocator);
/* ReduceInNationWarResult methods */
void   reduce_in_nation_war_result__init
                     (ReduceInNationWarResult         *message);
size_t reduce_in_nation_war_result__get_packed_size
                     (const ReduceInNationWarResult   *message);
size_t reduce_in_nation_war_result__pack
                     (const ReduceInNationWarResult   *message,
                      uint8_t             *out);
size_t reduce_in_nation_war_result__pack_to_buffer
                     (const ReduceInNationWarResult   *message,
                      ProtobufCBuffer     *buffer);
ReduceInNationWarResult *
       reduce_in_nation_war_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reduce_in_nation_war_result__free_unpacked
                     (ReduceInNationWarResult *message,
                      ProtobufCAllocator *allocator);
/* GetMyNationWar methods */
void   get_my_nation_war__init
                     (GetMyNationWar         *message);
size_t get_my_nation_war__get_packed_size
                     (const GetMyNationWar   *message);
size_t get_my_nation_war__pack
                     (const GetMyNationWar   *message,
                      uint8_t             *out);
size_t get_my_nation_war__pack_to_buffer
                     (const GetMyNationWar   *message,
                      ProtobufCBuffer     *buffer);
GetMyNationWar *
       get_my_nation_war__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_my_nation_war__free_unpacked
                     (GetMyNationWar *message,
                      ProtobufCAllocator *allocator);
/* GetMyNationWarResult methods */
void   get_my_nation_war_result__init
                     (GetMyNationWarResult         *message);
size_t get_my_nation_war_result__get_packed_size
                     (const GetMyNationWarResult   *message);
size_t get_my_nation_war_result__pack
                     (const GetMyNationWarResult   *message,
                      uint8_t             *out);
size_t get_my_nation_war_result__pack_to_buffer
                     (const GetMyNationWarResult   *message,
                      ProtobufCBuffer     *buffer);
GetMyNationWarResult *
       get_my_nation_war_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_my_nation_war_result__free_unpacked
                     (GetMyNationWarResult *message,
                      ProtobufCAllocator *allocator);
/* FuncForTest methods */
void   func_for_test__init
                     (FuncForTest         *message);
size_t func_for_test__get_packed_size
                     (const FuncForTest   *message);
size_t func_for_test__pack
                     (const FuncForTest   *message,
                      uint8_t             *out);
size_t func_for_test__pack_to_buffer
                     (const FuncForTest   *message,
                      ProtobufCBuffer     *buffer);
FuncForTest *
       func_for_test__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   func_for_test__free_unpacked
                     (FuncForTest *message,
                      ProtobufCAllocator *allocator);
/* FuncForTestResult methods */
void   func_for_test_result__init
                     (FuncForTestResult         *message);
size_t func_for_test_result__get_packed_size
                     (const FuncForTestResult   *message);
size_t func_for_test_result__pack
                     (const FuncForTestResult   *message,
                      uint8_t             *out);
size_t func_for_test_result__pack_to_buffer
                     (const FuncForTestResult   *message,
                      ProtobufCBuffer     *buffer);
FuncForTestResult *
       func_for_test_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   func_for_test_result__free_unpacked
                     (FuncForTestResult *message,
                      ProtobufCAllocator *allocator);
/* CheckDeleteCharactersNum methods */
void   check_delete_characters_num__init
                     (CheckDeleteCharactersNum         *message);
size_t check_delete_characters_num__get_packed_size
                     (const CheckDeleteCharactersNum   *message);
size_t check_delete_characters_num__pack
                     (const CheckDeleteCharactersNum   *message,
                      uint8_t             *out);
size_t check_delete_characters_num__pack_to_buffer
                     (const CheckDeleteCharactersNum   *message,
                      ProtobufCBuffer     *buffer);
CheckDeleteCharactersNum *
       check_delete_characters_num__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   check_delete_characters_num__free_unpacked
                     (CheckDeleteCharactersNum *message,
                      ProtobufCAllocator *allocator);
/* CheckDeleteCharactersNumResult methods */
void   check_delete_characters_num_result__init
                     (CheckDeleteCharactersNumResult         *message);
size_t check_delete_characters_num_result__get_packed_size
                     (const CheckDeleteCharactersNumResult   *message);
size_t check_delete_characters_num_result__pack
                     (const CheckDeleteCharactersNumResult   *message,
                      uint8_t             *out);
size_t check_delete_characters_num_result__pack_to_buffer
                     (const CheckDeleteCharactersNumResult   *message,
                      ProtobufCBuffer     *buffer);
CheckDeleteCharactersNumResult *
       check_delete_characters_num_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   check_delete_characters_num_result__free_unpacked
                     (CheckDeleteCharactersNumResult *message,
                      ProtobufCAllocator *allocator);
/* GetPlayerEquipShipInfo methods */
void   get_player_equip_ship_info__init
                     (GetPlayerEquipShipInfo         *message);
size_t get_player_equip_ship_info__get_packed_size
                     (const GetPlayerEquipShipInfo   *message);
size_t get_player_equip_ship_info__pack
                     (const GetPlayerEquipShipInfo   *message,
                      uint8_t             *out);
size_t get_player_equip_ship_info__pack_to_buffer
                     (const GetPlayerEquipShipInfo   *message,
                      ProtobufCBuffer     *buffer);
GetPlayerEquipShipInfo *
       get_player_equip_ship_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_player_equip_ship_info__free_unpacked
                     (GetPlayerEquipShipInfo *message,
                      ProtobufCAllocator *allocator);
/* GetPlayerEquipShipInfoResult methods */
void   get_player_equip_ship_info_result__init
                     (GetPlayerEquipShipInfoResult         *message);
size_t get_player_equip_ship_info_result__get_packed_size
                     (const GetPlayerEquipShipInfoResult   *message);
size_t get_player_equip_ship_info_result__pack
                     (const GetPlayerEquipShipInfoResult   *message,
                      uint8_t             *out);
size_t get_player_equip_ship_info_result__pack_to_buffer
                     (const GetPlayerEquipShipInfoResult   *message,
                      ProtobufCBuffer     *buffer);
GetPlayerEquipShipInfoResult *
       get_player_equip_ship_info_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_player_equip_ship_info_result__free_unpacked
                     (GetPlayerEquipShipInfoResult *message,
                      ProtobufCAllocator *allocator);
/* GetPlayerShipList methods */
void   get_player_ship_list__init
                     (GetPlayerShipList         *message);
size_t get_player_ship_list__get_packed_size
                     (const GetPlayerShipList   *message);
size_t get_player_ship_list__pack
                     (const GetPlayerShipList   *message,
                      uint8_t             *out);
size_t get_player_ship_list__pack_to_buffer
                     (const GetPlayerShipList   *message,
                      ProtobufCBuffer     *buffer);
GetPlayerShipList *
       get_player_ship_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_player_ship_list__free_unpacked
                     (GetPlayerShipList *message,
                      ProtobufCAllocator *allocator);
/* PlayerShipSimpleInfo methods */
void   player_ship_simple_info__init
                     (PlayerShipSimpleInfo         *message);
size_t player_ship_simple_info__get_packed_size
                     (const PlayerShipSimpleInfo   *message);
size_t player_ship_simple_info__pack
                     (const PlayerShipSimpleInfo   *message,
                      uint8_t             *out);
size_t player_ship_simple_info__pack_to_buffer
                     (const PlayerShipSimpleInfo   *message,
                      ProtobufCBuffer     *buffer);
PlayerShipSimpleInfo *
       player_ship_simple_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   player_ship_simple_info__free_unpacked
                     (PlayerShipSimpleInfo *message,
                      ProtobufCAllocator *allocator);
/* GetPlayerShipListResult methods */
void   get_player_ship_list_result__init
                     (GetPlayerShipListResult         *message);
size_t get_player_ship_list_result__get_packed_size
                     (const GetPlayerShipListResult   *message);
size_t get_player_ship_list_result__pack
                     (const GetPlayerShipListResult   *message,
                      uint8_t             *out);
size_t get_player_ship_list_result__pack_to_buffer
                     (const GetPlayerShipListResult   *message,
                      ProtobufCBuffer     *buffer);
GetPlayerShipListResult *
       get_player_ship_list_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_player_ship_list_result__free_unpacked
                     (GetPlayerShipListResult *message,
                      ProtobufCAllocator *allocator);
/* FireCrew methods */
void   fire_crew__init
                     (FireCrew         *message);
size_t fire_crew__get_packed_size
                     (const FireCrew   *message);
size_t fire_crew__pack
                     (const FireCrew   *message,
                      uint8_t             *out);
size_t fire_crew__pack_to_buffer
                     (const FireCrew   *message,
                      ProtobufCBuffer     *buffer);
FireCrew *
       fire_crew__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fire_crew__free_unpacked
                     (FireCrew *message,
                      ProtobufCAllocator *allocator);
/* FireCrewResult methods */
void   fire_crew_result__init
                     (FireCrewResult         *message);
size_t fire_crew_result__get_packed_size
                     (const FireCrewResult   *message);
size_t fire_crew_result__pack
                     (const FireCrewResult   *message,
                      uint8_t             *out);
size_t fire_crew_result__pack_to_buffer
                     (const FireCrewResult   *message,
                      ProtobufCBuffer     *buffer);
FireCrewResult *
       fire_crew_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fire_crew_result__free_unpacked
                     (FireCrewResult *message,
                      ProtobufCAllocator *allocator);
/* GetForceCity methods */
void   get_force_city__init
                     (GetForceCity         *message);
size_t get_force_city__get_packed_size
                     (const GetForceCity   *message);
size_t get_force_city__pack
                     (const GetForceCity   *message,
                      uint8_t             *out);
size_t get_force_city__pack_to_buffer
                     (const GetForceCity   *message,
                      ProtobufCBuffer     *buffer);
GetForceCity *
       get_force_city__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_force_city__free_unpacked
                     (GetForceCity *message,
                      ProtobufCAllocator *allocator);
/* GetForceCityResult methods */
void   get_force_city_result__init
                     (GetForceCityResult         *message);
size_t get_force_city_result__get_packed_size
                     (const GetForceCityResult   *message);
size_t get_force_city_result__pack
                     (const GetForceCityResult   *message,
                      uint8_t             *out);
size_t get_force_city_result__pack_to_buffer
                     (const GetForceCityResult   *message,
                      ProtobufCBuffer     *buffer);
GetForceCityResult *
       get_force_city_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_force_city_result__free_unpacked
                     (GetForceCityResult *message,
                      ProtobufCAllocator *allocator);
/* SaveItemsToWarehouse methods */
void   save_items_to_warehouse__init
                     (SaveItemsToWarehouse         *message);
size_t save_items_to_warehouse__get_packed_size
                     (const SaveItemsToWarehouse   *message);
size_t save_items_to_warehouse__pack
                     (const SaveItemsToWarehouse   *message,
                      uint8_t             *out);
size_t save_items_to_warehouse__pack_to_buffer
                     (const SaveItemsToWarehouse   *message,
                      ProtobufCBuffer     *buffer);
SaveItemsToWarehouse *
       save_items_to_warehouse__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   save_items_to_warehouse__free_unpacked
                     (SaveItemsToWarehouse *message,
                      ProtobufCAllocator *allocator);
/* SaveItemsToWarehouseResult methods */
void   save_items_to_warehouse_result__init
                     (SaveItemsToWarehouseResult         *message);
size_t save_items_to_warehouse_result__get_packed_size
                     (const SaveItemsToWarehouseResult   *message);
size_t save_items_to_warehouse_result__pack
                     (const SaveItemsToWarehouseResult   *message,
                      uint8_t             *out);
size_t save_items_to_warehouse_result__pack_to_buffer
                     (const SaveItemsToWarehouseResult   *message,
                      ProtobufCBuffer     *buffer);
SaveItemsToWarehouseResult *
       save_items_to_warehouse_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   save_items_to_warehouse_result__free_unpacked
                     (SaveItemsToWarehouseResult *message,
                      ProtobufCAllocator *allocator);
/* ExpandWarehouse methods */
void   expand_warehouse__init
                     (ExpandWarehouse         *message);
size_t expand_warehouse__get_packed_size
                     (const ExpandWarehouse   *message);
size_t expand_warehouse__pack
                     (const ExpandWarehouse   *message,
                      uint8_t             *out);
size_t expand_warehouse__pack_to_buffer
                     (const ExpandWarehouse   *message,
                      ProtobufCBuffer     *buffer);
ExpandWarehouse *
       expand_warehouse__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   expand_warehouse__free_unpacked
                     (ExpandWarehouse *message,
                      ProtobufCAllocator *allocator);
/* ExpandWarehouseResult methods */
void   expand_warehouse_result__init
                     (ExpandWarehouseResult         *message);
size_t expand_warehouse_result__get_packed_size
                     (const ExpandWarehouseResult   *message);
size_t expand_warehouse_result__pack
                     (const ExpandWarehouseResult   *message,
                      uint8_t             *out);
size_t expand_warehouse_result__pack_to_buffer
                     (const ExpandWarehouseResult   *message,
                      ProtobufCBuffer     *buffer);
ExpandWarehouseResult *
       expand_warehouse_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   expand_warehouse_result__free_unpacked
                     (ExpandWarehouseResult *message,
                      ProtobufCAllocator *allocator);
/* GetChangeLog methods */
void   get_change_log__init
                     (GetChangeLog         *message);
size_t get_change_log__get_packed_size
                     (const GetChangeLog   *message);
size_t get_change_log__pack
                     (const GetChangeLog   *message,
                      uint8_t             *out);
size_t get_change_log__pack_to_buffer
                     (const GetChangeLog   *message,
                      ProtobufCBuffer     *buffer);
GetChangeLog *
       get_change_log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_change_log__free_unpacked
                     (GetChangeLog *message,
                      ProtobufCAllocator *allocator);
/* GetChangeLogResult methods */
void   get_change_log_result__init
                     (GetChangeLogResult         *message);
size_t get_change_log_result__get_packed_size
                     (const GetChangeLogResult   *message);
size_t get_change_log_result__pack
                     (const GetChangeLogResult   *message,
                      uint8_t             *out);
size_t get_change_log_result__pack_to_buffer
                     (const GetChangeLogResult   *message,
                      ProtobufCBuffer     *buffer);
GetChangeLogResult *
       get_change_log_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_change_log_result__free_unpacked
                     (GetChangeLogResult *message,
                      ProtobufCAllocator *allocator);
/* CompleteSecondaryTask methods */
void   complete_secondary_task__init
                     (CompleteSecondaryTask         *message);
size_t complete_secondary_task__get_packed_size
                     (const CompleteSecondaryTask   *message);
size_t complete_secondary_task__pack
                     (const CompleteSecondaryTask   *message,
                      uint8_t             *out);
size_t complete_secondary_task__pack_to_buffer
                     (const CompleteSecondaryTask   *message,
                      ProtobufCBuffer     *buffer);
CompleteSecondaryTask *
       complete_secondary_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   complete_secondary_task__free_unpacked
                     (CompleteSecondaryTask *message,
                      ProtobufCAllocator *allocator);
/* CompleteSecondaryTaskResult methods */
void   complete_secondary_task_result__init
                     (CompleteSecondaryTaskResult         *message);
size_t complete_secondary_task_result__get_packed_size
                     (const CompleteSecondaryTaskResult   *message);
size_t complete_secondary_task_result__pack
                     (const CompleteSecondaryTaskResult   *message,
                      uint8_t             *out);
size_t complete_secondary_task_result__pack_to_buffer
                     (const CompleteSecondaryTaskResult   *message,
                      ProtobufCBuffer     *buffer);
CompleteSecondaryTaskResult *
       complete_secondary_task_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   complete_secondary_task_result__free_unpacked
                     (CompleteSecondaryTaskResult *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ConfigJsonMd5_Closure)
                 (const ConfigJsonMd5 *message,
                  void *closure_data);
typedef void (*ConfigJsonResult_Closure)
                 (const ConfigJsonResult *message,
                  void *closure_data);
typedef void (*EmailLogin_Closure)
                 (const EmailLogin *message,
                  void *closure_data);
typedef void (*Activity_Closure)
                 (const Activity *message,
                  void *closure_data);
typedef void (*Task_Closure)
                 (const Task *message,
                  void *closure_data);
typedef void (*SysMessage_Closure)
                 (const SysMessage *message,
                  void *closure_data);
typedef void (*City_Closure)
                 (const City *message,
                  void *closure_data);
typedef void (*SeaEventDefine_Closure)
                 (const SeaEventDefine *message,
                  void *closure_data);
typedef void (*SeaBlockInfo_Closure)
                 (const SeaBlockInfo *message,
                  void *closure_data);
typedef void (*DailyRewardData_Closure)
                 (const DailyRewardData *message,
                  void *closure_data);
typedef void (*LoginFirstData_Closure)
                 (const LoginFirstData *message,
                  void *closure_data);
typedef void (*EmailLoginResult_Closure)
                 (const EmailLoginResult *message,
                  void *closure_data);
typedef void (*RegisterUser_Closure)
                 (const RegisterUser *message,
                  void *closure_data);
typedef void (*ProtoSample_Closure)
                 (const ProtoSample *message,
                  void *closure_data);
typedef void (*ProtoSampleResult_Closure)
                 (const ProtoSampleResult *message,
                  void *closure_data);
typedef void (*RegisterUserResult_Closure)
                 (const RegisterUserResult *message,
                  void *closure_data);
typedef void (*CreateCharacter_Closure)
                 (const CreateCharacter *message,
                  void *closure_data);
typedef void (*CreateCharacterFailed_Closure)
                 (const CreateCharacterFailed *message,
                  void *closure_data);
typedef void (*GetFleetCargo_Closure)
                 (const GetFleetCargo *message,
                  void *closure_data);
typedef void (*FleetCaptain_Closure)
                 (const FleetCaptain *message,
                  void *closure_data);
typedef void (*ShipDefine_Closure)
                 (const ShipDefine *message,
                  void *closure_data);
typedef void (*GoodsDefine_Closure)
                 (const GoodsDefine *message,
                  void *closure_data);
typedef void (*ShipGoods_Closure)
                 (const ShipGoods *message,
                  void *closure_data);
typedef void (*GetFleetCargoResult_Closure)
                 (const GetFleetCargoResult *message,
                  void *closure_data);
typedef void (*GetGoodsForShip_Closure)
                 (const GetGoodsForShip *message,
                  void *closure_data);
typedef void (*GetGoodsForShipResult_Closure)
                 (const GetGoodsForShipResult *message,
                  void *closure_data);
typedef void (*ExchangeGoodsForShips_Closure)
                 (const ExchangeGoodsForShips *message,
                  void *closure_data);
typedef void (*ExchangeGoodsForShipsResult_Closure)
                 (const ExchangeGoodsForShipsResult *message,
                  void *closure_data);
typedef void (*CheckMailBox_Closure)
                 (const CheckMailBox *message,
                  void *closure_data);
typedef void (*CheckMailBoxResult_Closure)
                 (const CheckMailBoxResult *message,
                  void *closure_data);
typedef void (*GetMailList_Closure)
                 (const GetMailList *message,
                  void *closure_data);
typedef void (*MailDefine_Closure)
                 (const MailDefine *message,
                  void *closure_data);
typedef void (*GetMailListResult_Closure)
                 (const GetMailListResult *message,
                  void *closure_data);
typedef void (*SendMail_Closure)
                 (const SendMail *message,
                  void *closure_data);
typedef void (*SendMailResult_Closure)
                 (const SendMailResult *message,
                  void *closure_data);
typedef void (*SalvageItem_Closure)
                 (const SalvageItem *message,
                  void *closure_data);
typedef void (*MarkMailStatus_Closure)
                 (const MarkMailStatus *message,
                  void *closure_data);
typedef void (*MarkMailStatusResult_Closure)
                 (const MarkMailStatusResult *message,
                  void *closure_data);
typedef void (*GetItemsBeingSold_Closure)
                 (const GetItemsBeingSold *message,
                  void *closure_data);
typedef void (*BeingSoldItemsDefine_Closure)
                 (const BeingSoldItemsDefine *message,
                  void *closure_data);
typedef void (*GetItemsBeingSoldResult_Closure)
                 (const GetItemsBeingSoldResult *message,
                  void *closure_data);
typedef void (*GetLastPrice_Closure)
                 (const GetLastPrice *message,
                  void *closure_data);
typedef void (*GetLastPriceResult_Closure)
                 (const GetLastPriceResult *message,
                  void *closure_data);
typedef void (*GetOrderList_Closure)
                 (const GetOrderList *message,
                  void *closure_data);
typedef void (*OrderDefine_Closure)
                 (const OrderDefine *message,
                  void *closure_data);
typedef void (*GetOrderListResult_Closure)
                 (const GetOrderListResult *message,
                  void *closure_data);
typedef void (*BuyItemShipDetail_Closure)
                 (const BuyItemShipDetail *message,
                  void *closure_data);
typedef void (*BuyItem_Closure)
                 (const BuyItem *message,
                  void *closure_data);
typedef void (*BuyItemResult_Closure)
                 (const BuyItemResult *message,
                  void *closure_data);
typedef void (*SellItem_Closure)
                 (const SellItem *message,
                  void *closure_data);
typedef void (*SellItemResult_Closure)
                 (const SellItemResult *message,
                  void *closure_data);
typedef void (*CreateOrder_Closure)
                 (const CreateOrder *message,
                  void *closure_data);
typedef void (*CreateOrderResult_Closure)
                 (const CreateOrderResult *message,
                  void *closure_data);
typedef void (*SearchTradeItems_Closure)
                 (const SearchTradeItems *message,
                  void *closure_data);
typedef void (*SearchTradeItemsResult_Closure)
                 (const SearchTradeItemsResult *message,
                  void *closure_data);
typedef void (*GetItemsToSell_Closure)
                 (const GetItemsToSell *message,
                  void *closure_data);
typedef void (*ToSellItemsDefine_Closure)
                 (const ToSellItemsDefine *message,
                  void *closure_data);
typedef void (*GetItemsToSellResult_Closure)
                 (const GetItemsToSellResult *message,
                  void *closure_data);
typedef void (*GetPriceData_Closure)
                 (const GetPriceData *message,
                  void *closure_data);
typedef void (*PriceDataDefine_Closure)
                 (const PriceDataDefine *message,
                  void *closure_data);
typedef void (*ShipSizeInfo_Closure)
                 (const ShipSizeInfo *message,
                  void *closure_data);
typedef void (*GetPriceDataResult_Closure)
                 (const GetPriceDataResult *message,
                  void *closure_data);
typedef void (*GetPersonalItem_Closure)
                 (const GetPersonalItem *message,
                  void *closure_data);
typedef void (*HatchItemsDefine_Closure)
                 (const HatchItemsDefine *message,
                  void *closure_data);
typedef void (*EquipmentDefine_Closure)
                 (const EquipmentDefine *message,
                  void *closure_data);
typedef void (*DrawingItemsDefine_Closure)
                 (const DrawingItemsDefine *message,
                  void *closure_data);
typedef void (*SpecialItemsDefine_Closure)
                 (const SpecialItemsDefine *message,
                  void *closure_data);
typedef void (*GetPersonalItemResult_Closure)
                 (const GetPersonalItemResult *message,
                  void *closure_data);
typedef void (*CancelOrder_Closure)
                 (const CancelOrder *message,
                  void *closure_data);
typedef void (*CancelOrderResult_Closure)
                 (const CancelOrderResult *message,
                  void *closure_data);
typedef void (*WarehouseOpration_Closure)
                 (const WarehouseOpration *message,
                  void *closure_data);
typedef void (*WarehouseOprationResult_Closure)
                 (const WarehouseOprationResult *message,
                  void *closure_data);
typedef void (*GetWarehouseItems_Closure)
                 (const GetWarehouseItems *message,
                  void *closure_data);
typedef void (*CityGoodsDefine_Closure)
                 (const CityGoodsDefine *message,
                  void *closure_data);
typedef void (*CityGoods_Closure)
                 (const CityGoods *message,
                  void *closure_data);
typedef void (*GetWarehouseItemsResult_Closure)
                 (const GetWarehouseItemsResult *message,
                  void *closure_data);
typedef void (*BarConsume_Closure)
                 (const BarConsume *message,
                  void *closure_data);
typedef void (*BarConsumeResult_Closure)
                 (const BarConsumeResult *message,
                  void *closure_data);
typedef void (*GetBarInfo_Closure)
                 (const GetBarInfo *message,
                  void *closure_data);
typedef void (*BarMenuDefine_Closure)
                 (const BarMenuDefine *message,
                  void *closure_data);
typedef void (*BarCaptainDefine_Closure)
                 (const BarCaptainDefine *message,
                  void *closure_data);
typedef void (*GetBarInfoResult_Closure)
                 (const GetBarInfoResult *message,
                  void *closure_data);
typedef void (*GetCrew_Closure)
                 (const GetCrew *message,
                  void *closure_data);
typedef void (*ShipCrewDefine_Closure)
                 (const ShipCrewDefine *message,
                  void *closure_data);
typedef void (*GetCrewResult_Closure)
                 (const GetCrewResult *message,
                  void *closure_data);
typedef void (*TreatBargirl_Closure)
                 (const TreatBargirl *message,
                  void *closure_data);
typedef void (*TreatBargirlResult_Closure)
                 (const TreatBargirlResult *message,
                  void *closure_data);
typedef void (*GiveBargirlGift_Closure)
                 (const GiveBargirlGift *message,
                  void *closure_data);
typedef void (*GiveBargirlGiftResult_Closure)
                 (const GiveBargirlGiftResult *message,
                  void *closure_data);
typedef void (*GetAvailCrewNum_Closure)
                 (const GetAvailCrewNum *message,
                  void *closure_data);
typedef void (*GetAvailCrewNumResult_Closure)
                 (const GetAvailCrewNumResult *message,
                  void *closure_data);
typedef void (*GetTaskList_Closure)
                 (const GetTaskList *message,
                  void *closure_data);
typedef void (*TaskDefine_Closure)
                 (const TaskDefine *message,
                  void *closure_data);
typedef void (*GetTaskListResult_Closure)
                 (const GetTaskListResult *message,
                  void *closure_data);
typedef void (*GetIntelligence_Closure)
                 (const GetIntelligence *message,
                  void *closure_data);
typedef void (*IntelligenceDefine_Closure)
                 (const IntelligenceDefine *message,
                  void *closure_data);
typedef void (*GetIntelligenceResult_Closure)
                 (const GetIntelligenceResult *message,
                  void *closure_data);
typedef void (*GetCaptain_Closure)
                 (const GetCaptain *message,
                  void *closure_data);
typedef void (*GetCaptainResult_Closure)
                 (const GetCaptainResult *message,
                  void *closure_data);
typedef void (*HandleTask_Closure)
                 (const HandleTask *message,
                  void *closure_data);
typedef void (*TaskRewardItems_Closure)
                 (const TaskRewardItems *message,
                  void *closure_data);
typedef void (*HandleTaskResult_Closure)
                 (const HandleTaskResult *message,
                  void *closure_data);
typedef void (*MainTaskItems_Closure)
                 (const MainTaskItems *message,
                  void *closure_data);
typedef void (*CurrentMainTaskInfo_Closure)
                 (const CurrentMainTaskInfo *message,
                  void *closure_data);
typedef void (*CurrentCompanionTaskInfo_Closure)
                 (const CurrentCompanionTaskInfo *message,
                  void *closure_data);
typedef void (*GetCurrentCityData_Closure)
                 (const GetCurrentCityData *message,
                  void *closure_data);
typedef void (*GetCurrentCityDataResult_Closure)
                 (const GetCurrentCityDataResult *message,
                  void *closure_data);
typedef void (*GetShipList_Closure)
                 (const GetShipList *message,
                  void *closure_data);
typedef void (*GetShipListResult_Closure)
                 (const GetShipListResult *message,
                  void *closure_data);
typedef void (*RepairShip_Closure)
                 (const RepairShip *message,
                  void *closure_data);
typedef void (*RepairShipResult_Closure)
                 (const RepairShipResult *message,
                  void *closure_data);
typedef void (*RepairAllShips_Closure)
                 (const RepairAllShips *message,
                  void *closure_data);
typedef void (*RepairAllShipsResult_Closure)
                 (const RepairAllShipsResult *message,
                  void *closure_data);
typedef void (*ShipName_Closure)
                 (const ShipName *message,
                  void *closure_data);
typedef void (*FleetFormation_Closure)
                 (const FleetFormation *message,
                  void *closure_data);
typedef void (*FleetFormationResult_Closure)
                 (const FleetFormationResult *message,
                  void *closure_data);
typedef void (*ParkShip_Closure)
                 (const ParkShip *message,
                  void *closure_data);
typedef void (*ParkShipResult_Closure)
                 (const ParkShipResult *message,
                  void *closure_data);
typedef void (*GetDrawings_Closure)
                 (const GetDrawings *message,
                  void *closure_data);
typedef void (*ItemDefine_Closure)
                 (const ItemDefine *message,
                  void *closure_data);
typedef void (*PredefinedShip_Closure)
                 (const PredefinedShip *message,
                  void *closure_data);
typedef void (*ShipdrawingDefine_Closure)
                 (const ShipdrawingDefine *message,
                  void *closure_data);
typedef void (*EquipdrawingDefine_Closure)
                 (const EquipdrawingDefine *message,
                  void *closure_data);
typedef void (*GetDrawingsResult_Closure)
                 (const GetDrawingsResult *message,
                  void *closure_data);
typedef void (*BuildShip_Closure)
                 (const BuildShip *message,
                  void *closure_data);
typedef void (*BuildShipResult_Closure)
                 (const BuildShipResult *message,
                  void *closure_data);
typedef void (*GetBuildingShips_Closure)
                 (const GetBuildingShips *message,
                  void *closure_data);
typedef void (*BuildingShipDefine_Closure)
                 (const BuildingShipDefine *message,
                  void *closure_data);
typedef void (*GetBuildingShipsResult_Closure)
                 (const GetBuildingShipsResult *message,
                  void *closure_data);
typedef void (*FinishBuilding_Closure)
                 (const FinishBuilding *message,
                  void *closure_data);
typedef void (*FinishBuildingResult_Closure)
                 (const FinishBuildingResult *message,
                  void *closure_data);
typedef void (*GetBuildingEquipment_Closure)
                 (const GetBuildingEquipment *message,
                  void *closure_data);
typedef void (*BuildingEquipmentDefine_Closure)
                 (const BuildingEquipmentDefine *message,
                  void *closure_data);
typedef void (*GetBuildingEquipmentResult_Closure)
                 (const GetBuildingEquipmentResult *message,
                  void *closure_data);
typedef void (*CancelBuild_Closure)
                 (const CancelBuild *message,
                  void *closure_data);
typedef void (*CancelBuildResult_Closure)
                 (const CancelBuildResult *message,
                  void *closure_data);
typedef void (*CaptainDefine_Closure)
                 (const CaptainDefine *message,
                  void *closure_data);
typedef void (*GetFleetAndDockShips_Closure)
                 (const GetFleetAndDockShips *message,
                  void *closure_data);
typedef void (*GetFleetAndDockShipsResult_Closure)
                 (const GetFleetAndDockShipsResult *message,
                  void *closure_data);
typedef void (*GetReinforceShipList_Closure)
                 (const GetReinforceShipList *message,
                  void *closure_data);
typedef void (*ReinforceShipDefine_Closure)
                 (const ReinforceShipDefine *message,
                  void *closure_data);
typedef void (*GetReinforceShipListResult_Closure)
                 (const GetReinforceShipListResult *message,
                  void *closure_data);
typedef void (*ReinforceShip_Closure)
                 (const ReinforceShip *message,
                  void *closure_data);
typedef void (*ReinforceShipResult_Closure)
                 (const ReinforceShipResult *message,
                  void *closure_data);
typedef void (*RerollShip_Closure)
                 (const RerollShip *message,
                  void *closure_data);
typedef void (*RerollShipResult_Closure)
                 (const RerollShipResult *message,
                  void *closure_data);
typedef void (*GetReinforceEquipList_Closure)
                 (const GetReinforceEquipList *message,
                  void *closure_data);
typedef void (*ReinforceEquipDefine_Closure)
                 (const ReinforceEquipDefine *message,
                  void *closure_data);
typedef void (*GetReinforceEquipListResult_Closure)
                 (const GetReinforceEquipListResult *message,
                  void *closure_data);
typedef void (*ReinforceEquip_Closure)
                 (const ReinforceEquip *message,
                  void *closure_data);
typedef void (*ReinforceEquipResult_Closure)
                 (const ReinforceEquipResult *message,
                  void *closure_data);
typedef void (*RerollEquip_Closure)
                 (const RerollEquip *message,
                  void *closure_data);
typedef void (*RerollEquipResult_Closure)
                 (const RerollEquipResult *message,
                  void *closure_data);
typedef void (*EquipShip_Closure)
                 (const EquipShip *message,
                  void *closure_data);
typedef void (*EquipShipResult_Closure)
                 (const EquipShipResult *message,
                  void *closure_data);
typedef void (*GetEquipShipInfo_Closure)
                 (const GetEquipShipInfo *message,
                  void *closure_data);
typedef void (*EquipDetailInfo_Closure)
                 (const EquipDetailInfo *message,
                  void *closure_data);
typedef void (*EquipShipInfo_Closure)
                 (const EquipShipInfo *message,
                  void *closure_data);
typedef void (*GetEquipShipInfoResult_Closure)
                 (const GetEquipShipInfoResult *message,
                  void *closure_data);
typedef void (*GetEquipableItems_Closure)
                 (const GetEquipableItems *message,
                  void *closure_data);
typedef void (*EquipableItem_Closure)
                 (const EquipableItem *message,
                  void *closure_data);
typedef void (*GetEquipableItemsResult_Closure)
                 (const GetEquipableItemsResult *message,
                  void *closure_data);
typedef void (*GetVisitedCities_Closure)
                 (const GetVisitedCities *message,
                  void *closure_data);
typedef void (*CityDefine_Closure)
                 (const CityDefine *message,
                  void *closure_data);
typedef void (*CityInfo_Closure)
                 (const CityInfo *message,
                  void *closure_data);
typedef void (*GetVisitedCitiesResult_Closure)
                 (const GetVisitedCitiesResult *message,
                  void *closure_data);
typedef void (*AddSupply_Closure)
                 (const AddSupply *message,
                  void *closure_data);
typedef void (*AddSupplyResult_Closure)
                 (const AddSupplyResult *message,
                  void *closure_data);
typedef void (*ShipPoint_Closure)
                 (const ShipPoint *message,
                  void *closure_data);
typedef void (*ShipRoutine_Closure)
                 (const ShipRoutine *message,
                  void *closure_data);
typedef void (*GetNextMapBlock_Closure)
                 (const GetNextMapBlock *message,
                  void *closure_data);
typedef void (*NearbyPlayer_Closure)
                 (const NearbyPlayer *message,
                  void *closure_data);
typedef void (*GetNextMapBlockShipInfo_Closure)
                 (const GetNextMapBlockShipInfo *message,
                  void *closure_data);
typedef void (*GetNextMapBlockResult_Closure)
                 (const GetNextMapBlockResult *message,
                  void *closure_data);
typedef void (*ShipBowIconInfo_Closure)
                 (const ShipBowIconInfo *message,
                  void *closure_data);
typedef void (*LeaveCity_Closure)
                 (const LeaveCity *message,
                  void *closure_data);
typedef void (*LeaveCityResult_Closure)
                 (const LeaveCityResult *message,
                  void *closure_data);
typedef void (*ReachCity_Closure)
                 (const ReachCity *message,
                  void *closure_data);
typedef void (*ReachCityResult_Closure)
                 (const ReachCityResult *message,
                  void *closure_data);
typedef void (*TriggerSeaEvent_Closure)
                 (const TriggerSeaEvent *message,
                  void *closure_data);
typedef void (*SeaEventLootDefine_Closure)
                 (const SeaEventLootDefine *message,
                  void *closure_data);
typedef void (*SeaEventShipStatus_Closure)
                 (const SeaEventShipStatus *message,
                  void *closure_data);
typedef void (*SeaEventLossDefine_Closure)
                 (const SeaEventLossDefine *message,
                  void *closure_data);
typedef void (*ShipEquipInfo_Closure)
                 (const ShipEquipInfo *message,
                  void *closure_data);
typedef void (*ShipEquipArray_Closure)
                 (const ShipEquipArray *message,
                  void *closure_data);
typedef void (*OutOfDurableItemDefine_Closure)
                 (const OutOfDurableItemDefine *message,
                  void *closure_data);
typedef void (*TriggerSeaEventResult_Closure)
                 (const TriggerSeaEventResult *message,
                  void *closure_data);
typedef void (*FinishSeaEvent_Closure)
                 (const FinishSeaEvent *message,
                  void *closure_data);
typedef void (*FinishSeaEventResult_Closure)
                 (const FinishSeaEventResult *message,
                  void *closure_data);
typedef void (*GetPalaceInfo_Closure)
                 (const GetPalaceInfo *message,
                  void *closure_data);
typedef void (*GetPalaceInfoResult_Closure)
                 (const GetPalaceInfoResult *message,
                  void *closure_data);
typedef void (*InvestCity_Closure)
                 (const InvestCity *message,
                  void *closure_data);
typedef void (*InvestCityResult_Closure)
                 (const InvestCityResult *message,
                  void *closure_data);
typedef void (*GetRankList_Closure)
                 (const GetRankList *message,
                  void *closure_data);
typedef void (*RankInfoDefine_Closure)
                 (const RankInfoDefine *message,
                  void *closure_data);
typedef void (*GetRankListResult_Closure)
                 (const GetRankListResult *message,
                  void *closure_data);
typedef void (*GetVoteList_Closure)
                 (const GetVoteList *message,
                  void *closure_data);
typedef void (*GetVoteListResult_Closure)
                 (const GetVoteListResult *message,
                  void *closure_data);
typedef void (*VoteMayor_Closure)
                 (const VoteMayor *message,
                  void *closure_data);
typedef void (*VoteMayorResult_Closure)
                 (const VoteMayorResult *message,
                  void *closure_data);
typedef void (*ChangeDevDir_Closure)
                 (const ChangeDevDir *message,
                  void *closure_data);
typedef void (*ChangeDevDirResult_Closure)
                 (const ChangeDevDirResult *message,
                  void *closure_data);
typedef void (*GetLabourUnion_Closure)
                 (const GetLabourUnion *message,
                  void *closure_data);
typedef void (*LabourDefine_Closure)
                 (const LabourDefine *message,
                  void *closure_data);
typedef void (*GetLabourUnionResult_Closure)
                 (const GetLabourUnionResult *message,
                  void *closure_data);
typedef void (*CreateLabourUnion_Closure)
                 (const CreateLabourUnion *message,
                  void *closure_data);
typedef void (*CreateLabourUnionResult_Closure)
                 (const CreateLabourUnionResult *message,
                  void *closure_data);
typedef void (*DeleteLabourUnion_Closure)
                 (const DeleteLabourUnion *message,
                  void *closure_data);
typedef void (*DeleteLabourUnionResult_Closure)
                 (const DeleteLabourUnionResult *message,
                  void *closure_data);
typedef void (*InviteLabour_Closure)
                 (const InviteLabour *message,
                  void *closure_data);
typedef void (*InviteLabourResult_Closure)
                 (const InviteLabourResult *message,
                  void *closure_data);
typedef void (*ApplyLabourUnion_Closure)
                 (const ApplyLabourUnion *message,
                  void *closure_data);
typedef void (*ApplyLabourUnionResult_Closure)
                 (const ApplyLabourUnionResult *message,
                  void *closure_data);
typedef void (*QuitLabourUnion_Closure)
                 (const QuitLabourUnion *message,
                  void *closure_data);
typedef void (*QuitLabourUnionResult_Closure)
                 (const QuitLabourUnionResult *message,
                  void *closure_data);
typedef void (*KickOutMember_Closure)
                 (const KickOutMember *message,
                  void *closure_data);
typedef void (*KickOutMemberResult_Closure)
                 (const KickOutMemberResult *message,
                  void *closure_data);
typedef void (*AdjustPrivilege_Closure)
                 (const AdjustPrivilege *message,
                  void *closure_data);
typedef void (*AdjustPrivilegeResult_Closure)
                 (const AdjustPrivilegeResult *message,
                  void *closure_data);
typedef void (*DepositMoney_Closure)
                 (const DepositMoney *message,
                  void *closure_data);
typedef void (*DepositMoneyResult_Closure)
                 (const DepositMoneyResult *message,
                  void *closure_data);
typedef void (*WithdrawMoney_Closure)
                 (const WithdrawMoney *message,
                  void *closure_data);
typedef void (*WithdrawMoneyResult_Closure)
                 (const WithdrawMoneyResult *message,
                  void *closure_data);
typedef void (*DepositItem_Closure)
                 (const DepositItem *message,
                  void *closure_data);
typedef void (*DepositItemResult_Closure)
                 (const DepositItemResult *message,
                  void *closure_data);
typedef void (*WithdrawItem_Closure)
                 (const WithdrawItem *message,
                  void *closure_data);
typedef void (*WithdrawItemResult_Closure)
                 (const WithdrawItemResult *message,
                  void *closure_data);
typedef void (*ExpandBank_Closure)
                 (const ExpandBank *message,
                  void *closure_data);
typedef void (*ExpandBankResult_Closure)
                 (const ExpandBankResult *message,
                  void *closure_data);
typedef void (*GetBankInfo_Closure)
                 (const GetBankInfo *message,
                  void *closure_data);
typedef void (*BankItemDefine_Closure)
                 (const BankItemDefine *message,
                  void *closure_data);
typedef void (*GetBankInfoResult_Closure)
                 (const GetBankInfoResult *message,
                  void *closure_data);
typedef void (*GetBankLog_Closure)
                 (const GetBankLog *message,
                  void *closure_data);
typedef void (*GetBankLogResult_Closure)
                 (const GetBankLogResult *message,
                  void *closure_data);
typedef void (*SetMainTaskStatus_Closure)
                 (const SetMainTaskStatus *message,
                  void *closure_data);
typedef void (*SetMainTaskStatusResult_Closure)
                 (const SetMainTaskStatusResult *message,
                  void *closure_data);
typedef void (*PropsInfo_Closure)
                 (const PropsInfo *message,
                  void *closure_data);
typedef void (*FightSummary_Closure)
                 (const FightSummary *message,
                  void *closure_data);
typedef void (*FightCannonInfo_Closure)
                 (const FightCannonInfo *message,
                  void *closure_data);
typedef void (*BattleCaptainInfo_Closure)
                 (const BattleCaptainInfo *message,
                  void *closure_data);
typedef void (*FightShipInfo_Closure)
                 (const FightShipInfo *message,
                  void *closure_data);
typedef void (*EngageInFight_Closure)
                 (const EngageInFight *message,
                  void *closure_data);
typedef void (*EngageInFightResult_Closure)
                 (const EngageInFightResult *message,
                  void *closure_data);
typedef void (*EndFightShipInfo_Closure)
                 (const EndFightShipInfo *message,
                  void *closure_data);
typedef void (*BattleLogItem_Closure)
                 (const BattleLogItem *message,
                  void *closure_data);
typedef void (*BattleLog_Closure)
                 (const BattleLog *message,
                  void *closure_data);
typedef void (*EndFight_Closure)
                 (const EndFight *message,
                  void *closure_data);
typedef void (*LootDefine_Closure)
                 (const LootDefine *message,
                  void *closure_data);
typedef void (*LostGoodsDefine_Closure)
                 (const LostGoodsDefine *message,
                  void *closure_data);
typedef void (*SunkShipDetails_Closure)
                 (const SunkShipDetails *message,
                  void *closure_data);
typedef void (*SurvivedShipdetails_Closure)
                 (const SurvivedShipdetails *message,
                  void *closure_data);
typedef void (*CaptainInfo_Closure)
                 (const CaptainInfo *message,
                  void *closure_data);
typedef void (*EndFightResult_Closure)
                 (const EndFightResult *message,
                  void *closure_data);
typedef void (*StartAutoFight_Closure)
                 (const StartAutoFight *message,
                  void *closure_data);
typedef void (*AutoFightShipInfo_Closure)
                 (const AutoFightShipInfo *message,
                  void *closure_data);
typedef void (*StartAutoFightResult_Closure)
                 (const StartAutoFightResult *message,
                  void *closure_data);
typedef void (*GetSkillsDetails_Closure)
                 (const GetSkillsDetails *message,
                  void *closure_data);
typedef void (*SkillDefine_Closure)
                 (const SkillDefine *message,
                  void *closure_data);
typedef void (*GetSkillsDetailsResult_Closure)
                 (const GetSkillsDetailsResult *message,
                  void *closure_data);
typedef void (*AddSkillPoint_Closure)
                 (const AddSkillPoint *message,
                  void *closure_data);
typedef void (*AddSkillPointResult_Closure)
                 (const AddSkillPointResult *message,
                  void *closure_data);
typedef void (*ResetSkillPoints_Closure)
                 (const ResetSkillPoints *message,
                  void *closure_data);
typedef void (*ResetSkillPointsResult_Closure)
                 (const ResetSkillPointsResult *message,
                  void *closure_data);
typedef void (*NotifyBattleLog_Closure)
                 (const NotifyBattleLog *message,
                  void *closure_data);
typedef void (*NotifyBattleLogResult_Closure)
                 (const NotifyBattleLogResult *message,
                  void *closure_data);
typedef void (*GetPersonalInfo_Closure)
                 (const GetPersonalInfo *message,
                  void *closure_data);
typedef void (*FriendValue_Closure)
                 (const FriendValue *message,
                  void *closure_data);
typedef void (*GetPersonalInfoResult_Closure)
                 (const GetPersonalInfoResult *message,
                  void *closure_data);
typedef void (*SetBioInfo_Closure)
                 (const SetBioInfo *message,
                  void *closure_data);
typedef void (*SetBioInfoResult_Closure)
                 (const SetBioInfoResult *message,
                  void *closure_data);
typedef void (*CancelFight_Closure)
                 (const CancelFight *message,
                  void *closure_data);
typedef void (*CancelFightResult_Closure)
                 (const CancelFightResult *message,
                  void *closure_data);
typedef void (*GuildInfoDefine_Closure)
                 (const GuildInfoDefine *message,
                  void *closure_data);
typedef void (*GetGuildList_Closure)
                 (const GetGuildList *message,
                  void *closure_data);
typedef void (*GetGuildListResult_Closure)
                 (const GetGuildListResult *message,
                  void *closure_data);
typedef void (*GetMyGuildDetails_Closure)
                 (const GetMyGuildDetails *message,
                  void *closure_data);
typedef void (*GuildPersonalInfoDefine_Closure)
                 (const GuildPersonalInfoDefine *message,
                  void *closure_data);
typedef void (*GuildRelationDefine_Closure)
                 (const GuildRelationDefine *message,
                  void *closure_data);
typedef void (*GetMyGuildDetailsResult_Closure)
                 (const GetMyGuildDetailsResult *message,
                  void *closure_data);
typedef void (*GetApplyInfo_Closure)
                 (const GetApplyInfo *message,
                  void *closure_data);
typedef void (*ApplyPersonInfoDefine_Closure)
                 (const ApplyPersonInfoDefine *message,
                  void *closure_data);
typedef void (*GetApplyInfoResult_Closure)
                 (const GetApplyInfoResult *message,
                  void *closure_data);
typedef void (*CreateNewGuild_Closure)
                 (const CreateNewGuild *message,
                  void *closure_data);
typedef void (*CreateNewGuildResult_Closure)
                 (const CreateNewGuildResult *message,
                  void *closure_data);
typedef void (*JoinGuildRequest_Closure)
                 (const JoinGuildRequest *message,
                  void *closure_data);
typedef void (*JoinGuildRequestResult_Closure)
                 (const JoinGuildRequestResult *message,
                  void *closure_data);
typedef void (*GetGuildDetails_Closure)
                 (const GetGuildDetails *message,
                  void *closure_data);
typedef void (*GetGuildDetailsResult_Closure)
                 (const GetGuildDetailsResult *message,
                  void *closure_data);
typedef void (*ChangeGuildIntro_Closure)
                 (const ChangeGuildIntro *message,
                  void *closure_data);
typedef void (*ChangeGuildIntroResult_Closure)
                 (const ChangeGuildIntroResult *message,
                  void *closure_data);
typedef void (*ExpandGuildCapacity_Closure)
                 (const ExpandGuildCapacity *message,
                  void *closure_data);
typedef void (*ExpandGuildCapacityResult_Closure)
                 (const ExpandGuildCapacityResult *message,
                  void *closure_data);
typedef void (*GuildMemberPermissionDefine_Closure)
                 (const GuildMemberPermissionDefine *message,
                  void *closure_data);
typedef void (*GetGuildMemberPermission_Closure)
                 (const GetGuildMemberPermission *message,
                  void *closure_data);
typedef void (*GetGuildMemberPermissionResult_Closure)
                 (const GetGuildMemberPermissionResult *message,
                  void *closure_data);
typedef void (*SetGuildPermissionDefine_Closure)
                 (const SetGuildPermissionDefine *message,
                  void *closure_data);
typedef void (*SetGuildMemberPermission_Closure)
                 (const SetGuildMemberPermission *message,
                  void *closure_data);
typedef void (*SetGuildMemberPermissionResult_Closure)
                 (const SetGuildMemberPermissionResult *message,
                  void *closure_data);
typedef void (*GetHiredCaptains_Closure)
                 (const GetHiredCaptains *message,
                  void *closure_data);
typedef void (*GetHiredCaptainsResult_Closure)
                 (const GetHiredCaptainsResult *message,
                  void *closure_data);
typedef void (*DealWithGuildJoin_Closure)
                 (const DealWithGuildJoin *message,
                  void *closure_data);
typedef void (*DealWithGuildJoinResult_Closure)
                 (const DealWithGuildJoinResult *message,
                  void *closure_data);
typedef void (*ChangeGuildAnnouncement_Closure)
                 (const ChangeGuildAnnouncement *message,
                  void *closure_data);
typedef void (*ChangeGuildAnnouncementResult_Closure)
                 (const ChangeGuildAnnouncementResult *message,
                  void *closure_data);
typedef void (*RemoveGuildMember_Closure)
                 (const RemoveGuildMember *message,
                  void *closure_data);
typedef void (*RemoveGuildMemberResult_Closure)
                 (const RemoveGuildMemberResult *message,
                  void *closure_data);
typedef void (*ExitFromGuild_Closure)
                 (const ExitFromGuild *message,
                  void *closure_data);
typedef void (*ExitFromGuildResult_Closure)
                 (const ExitFromGuildResult *message,
                  void *closure_data);
typedef void (*DismissGuild_Closure)
                 (const DismissGuild *message,
                  void *closure_data);
typedef void (*DismissGuildResult_Closure)
                 (const DismissGuildResult *message,
                  void *closure_data);
typedef void (*GetSearchGuildList_Closure)
                 (const GetSearchGuildList *message,
                  void *closure_data);
typedef void (*GetSearchGuildListResult_Closure)
                 (const GetSearchGuildListResult *message,
                  void *closure_data);
typedef void (*RefreshCaptainList_Closure)
                 (const RefreshCaptainList *message,
                  void *closure_data);
typedef void (*RefreshCaptainListResult_Closure)
                 (const RefreshCaptainListResult *message,
                  void *closure_data);
typedef void (*GetFriendsList_Closure)
                 (const GetFriendsList *message,
                  void *closure_data);
typedef void (*FriendsDefine_Closure)
                 (const FriendsDefine *message,
                  void *closure_data);
typedef void (*GetFriendsListResult_Closure)
                 (const GetFriendsListResult *message,
                  void *closure_data);
typedef void (*GetBlackList_Closure)
                 (const GetBlackList *message,
                  void *closure_data);
typedef void (*GetBlackListResult_Closure)
                 (const GetBlackListResult *message,
                  void *closure_data);
typedef void (*FriendsOperation_Closure)
                 (const FriendsOperation *message,
                  void *closure_data);
typedef void (*FriendsOperationResult_Closure)
                 (const FriendsOperationResult *message,
                  void *closure_data);
typedef void (*GetFriendsReqList_Closure)
                 (const GetFriendsReqList *message,
                  void *closure_data);
typedef void (*GetFriendsReqListResult_Closure)
                 (const GetFriendsReqListResult *message,
                  void *closure_data);
typedef void (*FireCaptain_Closure)
                 (const FireCaptain *message,
                  void *closure_data);
typedef void (*FireCaptainResult_Closure)
                 (const FireCaptainResult *message,
                  void *closure_data);
typedef void (*DestoryItems_Closure)
                 (const DestoryItems *message,
                  void *closure_data);
typedef void (*DestoryItemsResult_Closure)
                 (const DestoryItemsResult *message,
                  void *closure_data);
typedef void (*SearchUserByName_Closure)
                 (const SearchUserByName *message,
                  void *closure_data);
typedef void (*SearchUserByNameResult_Closure)
                 (const SearchUserByNameResult *message,
                  void *closure_data);
typedef void (*TakeAllAttachment_Closure)
                 (const TakeAllAttachment *message,
                  void *closure_data);
typedef void (*TakeAllAttachmentResult_Closure)
                 (const TakeAllAttachmentResult *message,
                  void *closure_data);
typedef void (*GetItemsDetailInfo_Closure)
                 (const GetItemsDetailInfo *message,
                  void *closure_data);
typedef void (*GetItemsDetailInfoResult_Closure)
                 (const GetItemsDetailInfoResult *message,
                  void *closure_data);
typedef void (*GetDevGoodsInfo_Closure)
                 (const GetDevGoodsInfo *message,
                  void *closure_data);
typedef void (*DevGoodsDetails_Closure)
                 (const DevGoodsDetails *message,
                  void *closure_data);
typedef void (*GetDevGoodsInfoResult_Closure)
                 (const GetDevGoodsInfoResult *message,
                  void *closure_data);
typedef void (*ProvideDevGoods_Closure)
                 (const ProvideDevGoods *message,
                  void *closure_data);
typedef void (*ProvideDevGoodsResult_Closure)
                 (const ProvideDevGoodsResult *message,
                  void *closure_data);
typedef void (*GetDevGoodsCount_Closure)
                 (const GetDevGoodsCount *message,
                  void *closure_data);
typedef void (*GetDevGoodsCountResult_Closure)
                 (const GetDevGoodsCountResult *message,
                  void *closure_data);
typedef void (*GetFriendValue_Closure)
                 (const GetFriendValue *message,
                  void *closure_data);
typedef void (*GetFriendValueResult_Closure)
                 (const GetFriendValueResult *message,
                  void *closure_data);
typedef void (*GetUserInfoById_Closure)
                 (const GetUserInfoById *message,
                  void *closure_data);
typedef void (*GetUserInfoByIdResult_Closure)
                 (const GetUserInfoByIdResult *message,
                  void *closure_data);
typedef void (*TestCreateNewGuild_Closure)
                 (const TestCreateNewGuild *message,
                  void *closure_data);
typedef void (*TestCreateNewGuildResult_Closure)
                 (const TestCreateNewGuildResult *message,
                  void *closure_data);
typedef void (*InviteUserToGuild_Closure)
                 (const InviteUserToGuild *message,
                  void *closure_data);
typedef void (*InviteUserToGuildResult_Closure)
                 (const InviteUserToGuildResult *message,
                  void *closure_data);
typedef void (*GetInvitationList_Closure)
                 (const GetInvitationList *message,
                  void *closure_data);
typedef void (*InvitationDefine_Closure)
                 (const InvitationDefine *message,
                  void *closure_data);
typedef void (*GetInvitationListResult_Closure)
                 (const GetInvitationListResult *message,
                  void *closure_data);
typedef void (*DealWithInvitation_Closure)
                 (const DealWithInvitation *message,
                  void *closure_data);
typedef void (*DealWithInvitationResult_Closure)
                 (const DealWithInvitationResult *message,
                  void *closure_data);
typedef void (*GetVTicketMarketItems_Closure)
                 (const GetVTicketMarketItems *message,
                  void *closure_data);
typedef void (*VTicketMarketItemDefine_Closure)
                 (const VTicketMarketItemDefine *message,
                  void *closure_data);
typedef void (*BlackMarketRandomShipAndEquipDefine_Closure)
                 (const BlackMarketRandomShipAndEquipDefine *message,
                  void *closure_data);
typedef void (*GetVTicketMarketItemsResult_Closure)
                 (const GetVTicketMarketItemsResult *message,
                  void *closure_data);
typedef void (*BuyVTicketMarketItem_Closure)
                 (const BuyVTicketMarketItem *message,
                  void *closure_data);
typedef void (*BuyVTicketMarketItemResult_Closure)
                 (const BuyVTicketMarketItemResult *message,
                  void *closure_data);
typedef void (*GetCurrentInvestData_Closure)
                 (const GetCurrentInvestData *message,
                  void *closure_data);
typedef void (*GetCurrentInvestDataResult_Closure)
                 (const GetCurrentInvestDataResult *message,
                  void *closure_data);
typedef void (*GetUserTasks_Closure)
                 (const GetUserTasks *message,
                  void *closure_data);
typedef void (*AttackBossInfo_Closure)
                 (const AttackBossInfo *message,
                  void *closure_data);
typedef void (*CompanionTaskDefine_Closure)
                 (const CompanionTaskDefine *message,
                  void *closure_data);
typedef void (*GetUserTasksResult_Closure)
                 (const GetUserTasksResult *message,
                  void *closure_data);
typedef void (*UseSudanMask_Closure)
                 (const UseSudanMask *message,
                  void *closure_data);
typedef void (*UseSudanMaskResult_Closure)
                 (const UseSudanMaskResult *message,
                  void *closure_data);
typedef void (*EquipHero_Closure)
                 (const EquipHero *message,
                  void *closure_data);
typedef void (*EquipHeroResult_Closure)
                 (const EquipHeroResult *message,
                  void *closure_data);
typedef void (*GetHeroEquip_Closure)
                 (const GetHeroEquip *message,
                  void *closure_data);
typedef void (*ItemIdPair_Closure)
                 (const ItemIdPair *message,
                  void *closure_data);
typedef void (*GetHeroEquipResult_Closure)
                 (const GetHeroEquipResult *message,
                  void *closure_data);
typedef void (*BuyCityLicense_Closure)
                 (const BuyCityLicense *message,
                  void *closure_data);
typedef void (*BuyCityLicenseResult_Closure)
                 (const BuyCityLicenseResult *message,
                  void *closure_data);
typedef void (*DeleteUser_Closure)
                 (const DeleteUser *message,
                  void *closure_data);
typedef void (*DeleteUserResult_Closure)
                 (const DeleteUserResult *message,
                  void *closure_data);
typedef void (*ChangePassword_Closure)
                 (const ChangePassword *message,
                  void *closure_data);
typedef void (*ChangePasswordResult_Closure)
                 (const ChangePasswordResult *message,
                  void *closure_data);
typedef void (*SelectHeroPositiveSkill_Closure)
                 (const SelectHeroPositiveSkill *message,
                  void *closure_data);
typedef void (*SelectHeroPositiveSkillResult_Closure)
                 (const SelectHeroPositiveSkillResult *message,
                  void *closure_data);
typedef void (*GetHeroPositiveSkillList_Closure)
                 (const GetHeroPositiveSkillList *message,
                  void *closure_data);
typedef void (*GetHeroPositiveSkillListResult_Closure)
                 (const GetHeroPositiveSkillListResult *message,
                  void *closure_data);
typedef void (*GetSelectedPositiveSkills_Closure)
                 (const GetSelectedPositiveSkills *message,
                  void *closure_data);
typedef void (*PositiveSkill_Closure)
                 (const PositiveSkill *message,
                  void *closure_data);
typedef void (*GetSelectedPositiveSkillsResult_Closure)
                 (const GetSelectedPositiveSkillsResult *message,
                  void *closure_data);
typedef void (*GetSailInfo_Closure)
                 (const GetSailInfo *message,
                  void *closure_data);
typedef void (*GetSailInfoResult_Closure)
                 (const GetSailInfoResult *message,
                  void *closure_data);
typedef void (*InsertUserName_Closure)
                 (const InsertUserName *message,
                  void *closure_data);
typedef void (*InsertUserNameResult_Closure)
                 (const InsertUserNameResult *message,
                  void *closure_data);
typedef void (*GetLeaderboard_Closure)
                 (const GetLeaderboard *message,
                  void *closure_data);
typedef void (*LeaderboardItem_Closure)
                 (const LeaderboardItem *message,
                  void *closure_data);
typedef void (*GetLeaderboardResult_Closure)
                 (const GetLeaderboardResult *message,
                  void *closure_data);
typedef void (*GetCityStatus_Closure)
                 (const GetCityStatus *message,
                  void *closure_data);
typedef void (*GetCityStatusResult_Closure)
                 (const GetCityStatusResult *message,
                  void *closure_data);
typedef void (*GetDiscoveredCities_Closure)
                 (const GetDiscoveredCities *message,
                  void *closure_data);
typedef void (*GetDiscoveredCitiesResult_Closure)
                 (const GetDiscoveredCitiesResult *message,
                  void *closure_data);
typedef void (*AddDiscoveredCity_Closure)
                 (const AddDiscoveredCity *message,
                  void *closure_data);
typedef void (*AddDiscoveredCityResult_Closure)
                 (const AddDiscoveredCityResult *message,
                  void *closure_data);
typedef void (*ForceFightStatus_Closure)
                 (const ForceFightStatus *message,
                  void *closure_data);
typedef void (*ForceFightStatusResult_Closure)
                 (const ForceFightStatusResult *message,
                  void *closure_data);
typedef void (*GetCityProduces_Closure)
                 (const GetCityProduces *message,
                  void *closure_data);
typedef void (*CityProduceDefine_Closure)
                 (const CityProduceDefine *message,
                  void *closure_data);
typedef void (*GetCityProducesResult_Closure)
                 (const GetCityProducesResult *message,
                  void *closure_data);
typedef void (*GetCityDemands_Closure)
                 (const GetCityDemands *message,
                  void *closure_data);
typedef void (*CityDemandsDefine_Closure)
                 (const CityDemandsDefine *message,
                  void *closure_data);
typedef void (*GetCityDemandsResult_Closure)
                 (const GetCityDemandsResult *message,
                  void *closure_data);
typedef void (*GetMainTask_Closure)
                 (const GetMainTask *message,
                  void *closure_data);
typedef void (*GetMainTaskResult_Closure)
                 (const GetMainTaskResult *message,
                  void *closure_data);
typedef void (*CompleteMainTask_Closure)
                 (const CompleteMainTask *message,
                  void *closure_data);
typedef void (*CompleteMainTaskResult_Closure)
                 (const CompleteMainTaskResult *message,
                  void *closure_data);
typedef void (*GetMainTaskReward_Closure)
                 (const GetMainTaskReward *message,
                  void *closure_data);
typedef void (*GetMainTaskRewardResult_Closure)
                 (const GetMainTaskRewardResult *message,
                  void *closure_data);
typedef void (*GetEventTaskList_Closure)
                 (const GetEventTaskList *message,
                  void *closure_data);
typedef void (*EventTaskListDefine_Closure)
                 (const EventTaskListDefine *message,
                  void *closure_data);
typedef void (*GetEventTaskListResult_Closure)
                 (const GetEventTaskListResult *message,
                  void *closure_data);
typedef void (*HandleEventTask_Closure)
                 (const HandleEventTask *message,
                  void *closure_data);
typedef void (*HandleEventTaskResult_Closure)
                 (const HandleEventTaskResult *message,
                  void *closure_data);
typedef void (*GetNpcScore_Closure)
                 (const GetNpcScore *message,
                  void *closure_data);
typedef void (*GetNpcScoreResult_Closure)
                 (const GetNpcScoreResult *message,
                  void *closure_data);
typedef void (*GetServerInfo_Closure)
                 (const GetServerInfo *message,
                  void *closure_data);
typedef void (*GetServerInfoResult_Closure)
                 (const GetServerInfoResult *message,
                  void *closure_data);
typedef void (*PingServer_Closure)
                 (const PingServer *message,
                  void *closure_data);
typedef void (*PingServerResult_Closure)
                 (const PingServerResult *message,
                  void *closure_data);
typedef void (*ExpandPackageSize_Closure)
                 (const ExpandPackageSize *message,
                  void *closure_data);
typedef void (*ExpandPackageSizeResult_Closure)
                 (const ExpandPackageSizeResult *message,
                  void *closure_data);
typedef void (*GetPretaskItems_Closure)
                 (const GetPretaskItems *message,
                  void *closure_data);
typedef void (*PretaskItemDefine_Closure)
                 (const PretaskItemDefine *message,
                  void *closure_data);
typedef void (*GetPretaskItemsResult_Closure)
                 (const GetPretaskItemsResult *message,
                  void *closure_data);
typedef void (*GetOnsaleItems_Closure)
                 (const GetOnsaleItems *message,
                  void *closure_data);
typedef void (*OnsaleItemDefine_Closure)
                 (const OnsaleItemDefine *message,
                  void *closure_data);
typedef void (*OnsaleItemPackageDefine_Closure)
                 (const OnsaleItemPackageDefine *message,
                  void *closure_data);
typedef void (*GetOnsaleItemsResult_Closure)
                 (const GetOnsaleItemsResult *message,
                  void *closure_data);
typedef void (*BuyOnsaleItems_Closure)
                 (const BuyOnsaleItems *message,
                  void *closure_data);
typedef void (*BuyOnsaleItemsResult_Closure)
                 (const BuyOnsaleItemsResult *message,
                  void *closure_data);
typedef void (*SendCustomServiceInfo_Closure)
                 (const SendCustomServiceInfo *message,
                  void *closure_data);
typedef void (*SendCustomServiceInfoResult_Closure)
                 (const SendCustomServiceInfoResult *message,
                  void *closure_data);
typedef void (*GetIABItem_Closure)
                 (const GetIABItem *message,
                  void *closure_data);
typedef void (*GetIABItemResult_Closure)
                 (const GetIABItemResult *message,
                  void *closure_data);
typedef void (*ChangeEmail_Closure)
                 (const ChangeEmail *message,
                  void *closure_data);
typedef void (*ChangeEmailResult_Closure)
                 (const ChangeEmailResult *message,
                  void *closure_data);
typedef void (*TokenLogin_Closure)
                 (const TokenLogin *message,
                  void *closure_data);
typedef void (*EngageInFightForTask_Closure)
                 (const EngageInFightForTask *message,
                  void *closure_data);
typedef void (*EngageInFightForTaskResult_Closure)
                 (const EngageInFightForTaskResult *message,
                  void *closure_data);
typedef void (*AuthenticateAccount_Closure)
                 (const AuthenticateAccount *message,
                  void *closure_data);
typedef void (*AuthenticateAccountResult_Closure)
                 (const AuthenticateAccountResult *message,
                  void *closure_data);
typedef void (*Salvage_Closure)
                 (const Salvage *message,
                  void *closure_data);
typedef void (*SalvageResult_Closure)
                 (const SalvageResult *message,
                  void *closure_data);
typedef void (*GetEmailVerifiedReward_Closure)
                 (const GetEmailVerifiedReward *message,
                  void *closure_data);
typedef void (*GetEmailVerifiedRewardResult_Closure)
                 (const GetEmailVerifiedRewardResult *message,
                  void *closure_data);
typedef void (*StartSalvage_Closure)
                 (const StartSalvage *message,
                  void *closure_data);
typedef void (*StartSalvageResult_Closure)
                 (const StartSalvageResult *message,
                  void *closure_data);
typedef void (*GetEmailVerifiedInfo_Closure)
                 (const GetEmailVerifiedInfo *message,
                  void *closure_data);
typedef void (*GetEmailVerifiedInfoResult_Closure)
                 (const GetEmailVerifiedInfoResult *message,
                  void *closure_data);
typedef void (*GetSalvageCondition_Closure)
                 (const GetSalvageCondition *message,
                  void *closure_data);
typedef void (*GetSalvageConditionResult_Closure)
                 (const GetSalvageConditionResult *message,
                  void *closure_data);
typedef void (*GetActivitiesProps_Closure)
                 (const GetActivitiesProps *message,
                  void *closure_data);
typedef void (*GetActivitiesPropsResult_Closure)
                 (const GetActivitiesPropsResult *message,
                  void *closure_data);
typedef void (*GetActivitiesGiftInfo_Closure)
                 (const GetActivitiesGiftInfo *message,
                  void *closure_data);
typedef void (*GetActivitiesGiftInfoResult_Closure)
                 (const GetActivitiesGiftInfoResult *message,
                  void *closure_data);
typedef void (*GetActivitiesPrayInfo_Closure)
                 (const GetActivitiesPrayInfo *message,
                  void *closure_data);
typedef void (*GetActivitiesPrayInfoResult_Closure)
                 (const GetActivitiesPrayInfoResult *message,
                  void *closure_data);
typedef void (*GetPray_Closure)
                 (const GetPray *message,
                  void *closure_data);
typedef void (*GetPrayResult_Closure)
                 (const GetPrayResult *message,
                  void *closure_data);
typedef void (*SendActivitiesGift_Closure)
                 (const SendActivitiesGift *message,
                  void *closure_data);
typedef void (*SendActivitiesGiftResult_Closure)
                 (const SendActivitiesGiftResult *message,
                  void *closure_data);
typedef void (*GetPirateAttackInfo_Closure)
                 (const GetPirateAttackInfo *message,
                  void *closure_data);
typedef void (*GetPirateAttackInfoResult_Closure)
                 (const GetPirateAttackInfoResult *message,
                  void *closure_data);
typedef void (*GetAttackPirateInfo_Closure)
                 (const GetAttackPirateInfo *message,
                  void *closure_data);
typedef void (*GetAttackPirateInfoResult_Closure)
                 (const GetAttackPirateInfoResult *message,
                  void *closure_data);
typedef void (*GetVTicketMarketActivities_Closure)
                 (const GetVTicketMarketActivities *message,
                  void *closure_data);
typedef void (*VTicketMarketActivitiesDefine_Closure)
                 (const VTicketMarketActivitiesDefine *message,
                  void *closure_data);
typedef void (*GetVTicketMarketActivitiesResult_Closure)
                 (const GetVTicketMarketActivitiesResult *message,
                  void *closure_data);
typedef void (*BuyVTicketMarketActivities_Closure)
                 (const BuyVTicketMarketActivities *message,
                  void *closure_data);
typedef void (*BuyVTicketMarketActivitiesResult_Closure)
                 (const BuyVTicketMarketActivitiesResult *message,
                  void *closure_data);
typedef void (*FinalMyExploitScore_Closure)
                 (const FinalMyExploitScore *message,
                  void *closure_data);
typedef void (*FinalMyExploitScoreResult_Closure)
                 (const FinalMyExploitScoreResult *message,
                  void *closure_data);
typedef void (*FindLootPlayer_Closure)
                 (const FindLootPlayer *message,
                  void *closure_data);
typedef void (*CharacterInfo_Closure)
                 (const CharacterInfo *message,
                  void *closure_data);
typedef void (*FindLootPlayerResult_Closure)
                 (const FindLootPlayerResult *message,
                  void *closure_data);
typedef void (*LootPlayer_Closure)
                 (const LootPlayer *message,
                  void *closure_data);
typedef void (*LootPlayerResult_Closure)
                 (const LootPlayerResult *message,
                  void *closure_data);
typedef void (*GetLootPlayerLog_Closure)
                 (const GetLootPlayerLog *message,
                  void *closure_data);
typedef void (*LootLog_Closure)
                 (const LootLog *message,
                  void *closure_data);
typedef void (*GetLootPlayerLogResult_Closure)
                 (const GetLootPlayerLogResult *message,
                  void *closure_data);
typedef void (*StartRevengeOnLootPlayer_Closure)
                 (const StartRevengeOnLootPlayer *message,
                  void *closure_data);
typedef void (*AttackPirateDataInfo_Closure)
                 (const AttackPirateDataInfo *message,
                  void *closure_data);
typedef void (*GetAttackPirateRankInfo_Closure)
                 (const GetAttackPirateRankInfo *message,
                  void *closure_data);
typedef void (*GetAttackPirateRankInfoResult_Closure)
                 (const GetAttackPirateRankInfoResult *message,
                  void *closure_data);
typedef void (*GetAttackPirateBossInfo_Closure)
                 (const GetAttackPirateBossInfo *message,
                  void *closure_data);
typedef void (*GetAttackPirateBossInfoResult_Closure)
                 (const GetAttackPirateBossInfoResult *message,
                  void *closure_data);
typedef void (*InsuranceItem_Closure)
                 (const InsuranceItem *message,
                  void *closure_data);
typedef void (*InsuranceItemStatus_Closure)
                 (const InsuranceItemStatus *message,
                  void *closure_data);
typedef void (*BuyInsurance_Closure)
                 (const BuyInsurance *message,
                  void *closure_data);
typedef void (*BuyInsuranceResult_Closure)
                 (const BuyInsuranceResult *message,
                  void *closure_data);
typedef void (*CompleteDialogs_Closure)
                 (const CompleteDialogs *message,
                  void *closure_data);
typedef void (*CompleteDialogsResult_Closure)
                 (const CompleteDialogsResult *message,
                  void *closure_data);
typedef void (*ObtainLottoMessage_Closure)
                 (const ObtainLottoMessage *message,
                  void *closure_data);
typedef void (*LottoMessage_Closure)
                 (const LottoMessage *message,
                  void *closure_data);
typedef void (*ObtainLottoMessageResult_Closure)
                 (const ObtainLottoMessageResult *message,
                  void *closure_data);
typedef void (*GetInviteBonus_Closure)
                 (const GetInviteBonus *message,
                  void *closure_data);
typedef void (*GetInviteBonusResult_Closure)
                 (const GetInviteBonusResult *message,
                  void *closure_data);
typedef void (*CompanyDefine_Closure)
                 (const CompanyDefine *message,
                  void *closure_data);
typedef void (*GetCompanies_Closure)
                 (const GetCompanies *message,
                  void *closure_data);
typedef void (*GetCompaniesResult_Closure)
                 (const GetCompaniesResult *message,
                  void *closure_data);
typedef void (*EquipCompany_Closure)
                 (const EquipCompany *message,
                  void *closure_data);
typedef void (*EquipCompanyResult_Closure)
                 (const EquipCompanyResult *message,
                  void *closure_data);
typedef void (*UnlockCompany_Closure)
                 (const UnlockCompany *message,
                  void *closure_data);
typedef void (*UnlockCompanyResult_Closure)
                 (const UnlockCompanyResult *message,
                  void *closure_data);
typedef void (*GetCompanionsStatus_Closure)
                 (const GetCompanionsStatus *message,
                  void *closure_data);
typedef void (*CompanionsStatus_Closure)
                 (const CompanionsStatus *message,
                  void *closure_data);
typedef void (*GetCompanionsStatusResult_Closure)
                 (const GetCompanionsStatusResult *message,
                  void *closure_data);
typedef void (*UnlockShipCabin_Closure)
                 (const UnlockShipCabin *message,
                  void *closure_data);
typedef void (*UnlockShipCabinResult_Closure)
                 (const UnlockShipCabinResult *message,
                  void *closure_data);
typedef void (*GetShipCompanions_Closure)
                 (const GetShipCompanions *message,
                  void *closure_data);
typedef void (*ShipGearDetail_Closure)
                 (const ShipGearDetail *message,
                  void *closure_data);
typedef void (*GetShipCompanionsResult_Closure)
                 (const GetShipCompanionsResult *message,
                  void *closure_data);
typedef void (*SetShipCompanions_Closure)
                 (const SetShipCompanions *message,
                  void *closure_data);
typedef void (*SetShipCompanionsResult_Closure)
                 (const SetShipCompanionsResult *message,
                  void *closure_data);
typedef void (*SaveFailedFight_Closure)
                 (const SaveFailedFight *message,
                  void *closure_data);
typedef void (*SaveFailedFightResult_Closure)
                 (const SaveFailedFightResult *message,
                  void *closure_data);
typedef void (*EndFailedFightByVTicket_Closure)
                 (const EndFailedFightByVTicket *message,
                  void *closure_data);
typedef void (*EndFailedFightByVTicketResult_Closure)
                 (const EndFailedFightByVTicketResult *message,
                  void *closure_data);
typedef void (*CompleteCompanionTask_Closure)
                 (const CompleteCompanionTask *message,
                  void *closure_data);
typedef void (*CompleteCompanionTaskResult_Closure)
                 (const CompleteCompanionTaskResult *message,
                  void *closure_data);
typedef void (*DeductCoins_Closure)
                 (const DeductCoins *message,
                  void *closure_data);
typedef void (*DeductCoinsResult_Closure)
                 (const DeductCoinsResult *message,
                  void *closure_data);
typedef void (*UpdateUserSelection_Closure)
                 (const UpdateUserSelection *message,
                  void *closure_data);
typedef void (*UpdateDataVersion_Closure)
                 (const UpdateDataVersion *message,
                  void *closure_data);
typedef void (*UpdateDataVersionResult_Closure)
                 (const UpdateDataVersionResult *message,
                  void *closure_data);
typedef void (*CalFastHireCrew_Closure)
                 (const CalFastHireCrew *message,
                  void *closure_data);
typedef void (*CalFastHireCrewResult_Closure)
                 (const CalFastHireCrewResult *message,
                  void *closure_data);
typedef void (*CompanionRebirth_Closure)
                 (const CompanionRebirth *message,
                  void *closure_data);
typedef void (*CompanionRebirthResult_Closure)
                 (const CompanionRebirthResult *message,
                  void *closure_data);
typedef void (*RepairEquipment_Closure)
                 (const RepairEquipment *message,
                  void *closure_data);
typedef void (*RepairEquipmentResult_Closure)
                 (const RepairEquipmentResult *message,
                  void *closure_data);
typedef void (*GetRepairEquipmentNeed_Closure)
                 (const GetRepairEquipmentNeed *message,
                  void *closure_data);
typedef void (*GetRepairEquipmentNeedResult_Closure)
                 (const GetRepairEquipmentNeedResult *message,
                  void *closure_data);
typedef void (*RecentOrderDefine_Closure)
                 (const RecentOrderDefine *message,
                  void *closure_data);
typedef void (*GetRecentOrder_Closure)
                 (const GetRecentOrder *message,
                  void *closure_data);
typedef void (*GetRecentOrderResult_Closure)
                 (const GetRecentOrderResult *message,
                  void *closure_data);
typedef void (*GetDropIncreaseRateInfo_Closure)
                 (const GetDropIncreaseRateInfo *message,
                  void *closure_data);
typedef void (*GetDropIncreaseRateInfoResult_Closure)
                 (const GetDropIncreaseRateInfoResult *message,
                  void *closure_data);
typedef void (*GetDailyActivitiesReward_Closure)
                 (const GetDailyActivitiesReward *message,
                  void *closure_data);
typedef void (*GetDailyActivitiesRewardResult_Closure)
                 (const GetDailyActivitiesRewardResult *message,
                  void *closure_data);
typedef void (*AddProficiency_Closure)
                 (const AddProficiency *message,
                  void *closure_data);
typedef void (*AddProficiencyResult_Closure)
                 (const AddProficiencyResult *message,
                  void *closure_data);
typedef void (*GetProficiencyValues_Closure)
                 (const GetProficiencyValues *message,
                  void *closure_data);
typedef void (*ProficiencyDefine_Closure)
                 (const ProficiencyDefine *message,
                  void *closure_data);
typedef void (*GetProficiencyValuesResult_Closure)
                 (const GetProficiencyValuesResult *message,
                  void *closure_data);
typedef void (*GetProficiencyBook_Closure)
                 (const GetProficiencyBook *message,
                  void *closure_data);
typedef void (*GetProficiencyBookResult_Closure)
                 (const GetProficiencyBookResult *message,
                  void *closure_data);
typedef void (*RepairCityDefenseInWar_Closure)
                 (const RepairCityDefenseInWar *message,
                  void *closure_data);
typedef void (*RepairCityDefenseInWarResult_Closure)
                 (const RepairCityDefenseInWarResult *message,
                  void *closure_data);
typedef void (*EnhanceAttack_Closure)
                 (const EnhanceAttack *message,
                  void *closure_data);
typedef void (*EnhanceAttackResult_Closure)
                 (const EnhanceAttackResult *message,
                  void *closure_data);
typedef void (*GetCityPrepareStatus_Closure)
                 (const GetCityPrepareStatus *message,
                  void *closure_data);
typedef void (*NationWarPair_Closure)
                 (const NationWarPair *message,
                  void *closure_data);
typedef void (*GetCityPrepareStatusResult_Closure)
                 (const GetCityPrepareStatusResult *message,
                  void *closure_data);
typedef void (*StartAttackCity_Closure)
                 (const StartAttackCity *message,
                  void *closure_data);
typedef void (*CityStatus_Closure)
                 (const CityStatus *message,
                  void *closure_data);
typedef void (*StartAttackCityResult_Closure)
                 (const StartAttackCityResult *message,
                  void *closure_data);
typedef void (*GetEnemyNation_Closure)
                 (const GetEnemyNation *message,
                  void *closure_data);
typedef void (*EnemyNation_Closure)
                 (const EnemyNation *message,
                  void *closure_data);
typedef void (*GetEnemyNationResult_Closure)
                 (const GetEnemyNationResult *message,
                  void *closure_data);
typedef void (*AddCityRepairPool_Closure)
                 (const AddCityRepairPool *message,
                  void *closure_data);
typedef void (*AddCityRepairPoolResult_Closure)
                 (const AddCityRepairPoolResult *message,
                  void *closure_data);
typedef void (*AddCityAttackPool_Closure)
                 (const AddCityAttackPool *message,
                  void *closure_data);
typedef void (*AddCityAttackPoolResult_Closure)
                 (const AddCityAttackPoolResult *message,
                  void *closure_data);
typedef void (*GetPackageInfo_Closure)
                 (const GetPackageInfo *message,
                  void *closure_data);
typedef void (*GetPackageInfoResult_Closure)
                 (const GetPackageInfoResult *message,
                  void *closure_data);
typedef void (*ApplyStateWar_Closure)
                 (const ApplyStateWar *message,
                  void *closure_data);
typedef void (*ApplyStateWarResult_Closure)
                 (const ApplyStateWarResult *message,
                  void *closure_data);
typedef void (*ContributionRankInfo_Closure)
                 (const ContributionRankInfo *message,
                  void *closure_data);
typedef void (*GetContributionRank_Closure)
                 (const GetContributionRank *message,
                  void *closure_data);
typedef void (*GetContributionRankResult_Closure)
                 (const GetContributionRankResult *message,
                  void *closure_data);
typedef void (*AddSupplyStation_Closure)
                 (const AddSupplyStation *message,
                  void *closure_data);
typedef void (*AddSupplyStationResult_Closure)
                 (const AddSupplyStationResult *message,
                  void *closure_data);
typedef void (*HireArmy_Closure)
                 (const HireArmy *message,
                  void *closure_data);
typedef void (*HireArmyResult_Closure)
                 (const HireArmyResult *message,
                  void *closure_data);
typedef void (*GetNationWarEntrance_Closure)
                 (const GetNationWarEntrance *message,
                  void *closure_data);
typedef void (*GetNationWarEntranceResult_Closure)
                 (const GetNationWarEntranceResult *message,
                  void *closure_data);
typedef void (*EndAttackCity_Closure)
                 (const EndAttackCity *message,
                  void *closure_data);
typedef void (*EndAttackCityResult_Closure)
                 (const EndAttackCityResult *message,
                  void *closure_data);
typedef void (*EnterDepotRepair_Closure)
                 (const EnterDepotRepair *message,
                  void *closure_data);
typedef void (*EnterDepotRepairResult_Closure)
                 (const EnterDepotRepairResult *message,
                  void *closure_data);
typedef void (*GetNationWarCityLost_Closure)
                 (const GetNationWarCityLost *message,
                  void *closure_data);
typedef void (*CityLost_Closure)
                 (const CityLost *message,
                  void *closure_data);
typedef void (*GetNationWarCityLostResult_Closure)
                 (const GetNationWarCityLostResult *message,
                  void *closure_data);
typedef void (*NationWarCharacterShip_Closure)
                 (const NationWarCharacterShip *message,
                  void *closure_data);
typedef void (*NationWarCharacterStatus_Closure)
                 (const NationWarCharacterStatus *message,
                  void *closure_data);
typedef void (*NationWarBattleTurnResult_Closure)
                 (const NationWarBattleTurnResult *message,
                  void *closure_data);
typedef void (*ReachDepot_Closure)
                 (const ReachDepot *message,
                  void *closure_data);
typedef void (*ReachDepotResult_Closure)
                 (const ReachDepotResult *message,
                  void *closure_data);
typedef void (*ReduceInNationWar_Closure)
                 (const ReduceInNationWar *message,
                  void *closure_data);
typedef void (*ReduceInfo_Closure)
                 (const ReduceInfo *message,
                  void *closure_data);
typedef void (*ReduceInNationWarResult_Closure)
                 (const ReduceInNationWarResult *message,
                  void *closure_data);
typedef void (*GetMyNationWar_Closure)
                 (const GetMyNationWar *message,
                  void *closure_data);
typedef void (*GetMyNationWarResult_Closure)
                 (const GetMyNationWarResult *message,
                  void *closure_data);
typedef void (*FuncForTest_Closure)
                 (const FuncForTest *message,
                  void *closure_data);
typedef void (*FuncForTestResult_Closure)
                 (const FuncForTestResult *message,
                  void *closure_data);
typedef void (*CheckDeleteCharactersNum_Closure)
                 (const CheckDeleteCharactersNum *message,
                  void *closure_data);
typedef void (*CheckDeleteCharactersNumResult_Closure)
                 (const CheckDeleteCharactersNumResult *message,
                  void *closure_data);
typedef void (*GetPlayerEquipShipInfo_Closure)
                 (const GetPlayerEquipShipInfo *message,
                  void *closure_data);
typedef void (*GetPlayerEquipShipInfoResult_Closure)
                 (const GetPlayerEquipShipInfoResult *message,
                  void *closure_data);
typedef void (*GetPlayerShipList_Closure)
                 (const GetPlayerShipList *message,
                  void *closure_data);
typedef void (*PlayerShipSimpleInfo_Closure)
                 (const PlayerShipSimpleInfo *message,
                  void *closure_data);
typedef void (*GetPlayerShipListResult_Closure)
                 (const GetPlayerShipListResult *message,
                  void *closure_data);
typedef void (*FireCrew_Closure)
                 (const FireCrew *message,
                  void *closure_data);
typedef void (*FireCrewResult_Closure)
                 (const FireCrewResult *message,
                  void *closure_data);
typedef void (*GetForceCity_Closure)
                 (const GetForceCity *message,
                  void *closure_data);
typedef void (*GetForceCityResult_Closure)
                 (const GetForceCityResult *message,
                  void *closure_data);
typedef void (*SaveItemsToWarehouse_Closure)
                 (const SaveItemsToWarehouse *message,
                  void *closure_data);
typedef void (*SaveItemsToWarehouseResult_Closure)
                 (const SaveItemsToWarehouseResult *message,
                  void *closure_data);
typedef void (*ExpandWarehouse_Closure)
                 (const ExpandWarehouse *message,
                  void *closure_data);
typedef void (*ExpandWarehouseResult_Closure)
                 (const ExpandWarehouseResult *message,
                  void *closure_data);
typedef void (*GetChangeLog_Closure)
                 (const GetChangeLog *message,
                  void *closure_data);
typedef void (*GetChangeLogResult_Closure)
                 (const GetChangeLogResult *message,
                  void *closure_data);
typedef void (*CompleteSecondaryTask_Closure)
                 (const CompleteSecondaryTask *message,
                  void *closure_data);
typedef void (*CompleteSecondaryTaskResult_Closure)
                 (const CompleteSecondaryTaskResult *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    server_verion__descriptor;
extern const ProtobufCMessageDescriptor config_json_md5__descriptor;
extern const ProtobufCMessageDescriptor config_json_result__descriptor;
extern const ProtobufCMessageDescriptor email_login__descriptor;
extern const ProtobufCMessageDescriptor activity__descriptor;
extern const ProtobufCMessageDescriptor task__descriptor;
extern const ProtobufCMessageDescriptor sys_message__descriptor;
extern const ProtobufCMessageDescriptor city__descriptor;
extern const ProtobufCMessageDescriptor sea_event_define__descriptor;
extern const ProtobufCMessageDescriptor sea_block_info__descriptor;
extern const ProtobufCMessageDescriptor daily_reward_data__descriptor;
extern const ProtobufCMessageDescriptor login_first_data__descriptor;
extern const ProtobufCMessageDescriptor email_login_result__descriptor;
extern const ProtobufCMessageDescriptor register_user__descriptor;
extern const ProtobufCMessageDescriptor proto_sample__descriptor;
extern const ProtobufCMessageDescriptor proto_sample_result__descriptor;
extern const ProtobufCMessageDescriptor register_user_result__descriptor;
extern const ProtobufCMessageDescriptor create_character__descriptor;
extern const ProtobufCMessageDescriptor create_character_failed__descriptor;
extern const ProtobufCMessageDescriptor get_fleet_cargo__descriptor;
extern const ProtobufCMessageDescriptor fleet_captain__descriptor;
extern const ProtobufCMessageDescriptor ship_define__descriptor;
extern const ProtobufCMessageDescriptor goods_define__descriptor;
extern const ProtobufCMessageDescriptor ship_goods__descriptor;
extern const ProtobufCMessageDescriptor get_fleet_cargo_result__descriptor;
extern const ProtobufCMessageDescriptor get_goods_for_ship__descriptor;
extern const ProtobufCMessageDescriptor get_goods_for_ship_result__descriptor;
extern const ProtobufCMessageDescriptor exchange_goods_for_ships__descriptor;
extern const ProtobufCMessageDescriptor exchange_goods_for_ships_result__descriptor;
extern const ProtobufCMessageDescriptor check_mail_box__descriptor;
extern const ProtobufCMessageDescriptor check_mail_box_result__descriptor;
extern const ProtobufCMessageDescriptor get_mail_list__descriptor;
extern const ProtobufCMessageDescriptor mail_define__descriptor;
extern const ProtobufCMessageDescriptor get_mail_list_result__descriptor;
extern const ProtobufCMessageDescriptor send_mail__descriptor;
extern const ProtobufCMessageDescriptor send_mail_result__descriptor;
extern const ProtobufCMessageDescriptor salvage_item__descriptor;
extern const ProtobufCMessageDescriptor mark_mail_status__descriptor;
extern const ProtobufCMessageDescriptor mark_mail_status_result__descriptor;
extern const ProtobufCMessageDescriptor get_items_being_sold__descriptor;
extern const ProtobufCMessageDescriptor being_sold_items_define__descriptor;
extern const ProtobufCMessageDescriptor get_items_being_sold_result__descriptor;
extern const ProtobufCMessageDescriptor get_last_price__descriptor;
extern const ProtobufCMessageDescriptor get_last_price_result__descriptor;
extern const ProtobufCMessageDescriptor get_order_list__descriptor;
extern const ProtobufCMessageDescriptor order_define__descriptor;
extern const ProtobufCMessageDescriptor get_order_list_result__descriptor;
extern const ProtobufCMessageDescriptor buy_item_ship_detail__descriptor;
extern const ProtobufCMessageDescriptor buy_item__descriptor;
extern const ProtobufCMessageDescriptor buy_item_result__descriptor;
extern const ProtobufCMessageDescriptor sell_item__descriptor;
extern const ProtobufCMessageDescriptor sell_item_result__descriptor;
extern const ProtobufCMessageDescriptor create_order__descriptor;
extern const ProtobufCMessageDescriptor create_order_result__descriptor;
extern const ProtobufCMessageDescriptor search_trade_items__descriptor;
extern const ProtobufCMessageDescriptor search_trade_items_result__descriptor;
extern const ProtobufCMessageDescriptor get_items_to_sell__descriptor;
extern const ProtobufCMessageDescriptor to_sell_items_define__descriptor;
extern const ProtobufCMessageDescriptor get_items_to_sell_result__descriptor;
extern const ProtobufCMessageDescriptor get_price_data__descriptor;
extern const ProtobufCMessageDescriptor price_data_define__descriptor;
extern const ProtobufCMessageDescriptor ship_size_info__descriptor;
extern const ProtobufCMessageDescriptor get_price_data_result__descriptor;
extern const ProtobufCMessageDescriptor get_personal_item__descriptor;
extern const ProtobufCMessageDescriptor hatch_items_define__descriptor;
extern const ProtobufCMessageDescriptor equipment_define__descriptor;
extern const ProtobufCMessageDescriptor drawing_items_define__descriptor;
extern const ProtobufCMessageDescriptor special_items_define__descriptor;
extern const ProtobufCMessageDescriptor get_personal_item_result__descriptor;
extern const ProtobufCMessageDescriptor cancel_order__descriptor;
extern const ProtobufCMessageDescriptor cancel_order_result__descriptor;
extern const ProtobufCMessageDescriptor warehouse_opration__descriptor;
extern const ProtobufCMessageDescriptor warehouse_opration_result__descriptor;
extern const ProtobufCMessageDescriptor get_warehouse_items__descriptor;
extern const ProtobufCMessageDescriptor city_goods_define__descriptor;
extern const ProtobufCMessageDescriptor city_goods__descriptor;
extern const ProtobufCMessageDescriptor get_warehouse_items_result__descriptor;
extern const ProtobufCMessageDescriptor bar_consume__descriptor;
extern const ProtobufCMessageDescriptor bar_consume_result__descriptor;
extern const ProtobufCMessageDescriptor get_bar_info__descriptor;
extern const ProtobufCMessageDescriptor bar_menu_define__descriptor;
extern const ProtobufCMessageDescriptor bar_captain_define__descriptor;
extern const ProtobufCMessageDescriptor get_bar_info_result__descriptor;
extern const ProtobufCMessageDescriptor get_crew__descriptor;
extern const ProtobufCMessageDescriptor ship_crew_define__descriptor;
extern const ProtobufCMessageDescriptor get_crew_result__descriptor;
extern const ProtobufCMessageDescriptor treat_bargirl__descriptor;
extern const ProtobufCMessageDescriptor treat_bargirl_result__descriptor;
extern const ProtobufCMessageDescriptor give_bargirl_gift__descriptor;
extern const ProtobufCMessageDescriptor give_bargirl_gift_result__descriptor;
extern const ProtobufCMessageDescriptor get_avail_crew_num__descriptor;
extern const ProtobufCMessageDescriptor get_avail_crew_num_result__descriptor;
extern const ProtobufCMessageDescriptor get_task_list__descriptor;
extern const ProtobufCMessageDescriptor task_define__descriptor;
extern const ProtobufCMessageDescriptor get_task_list_result__descriptor;
extern const ProtobufCMessageDescriptor get_intelligence__descriptor;
extern const ProtobufCMessageDescriptor intelligence_define__descriptor;
extern const ProtobufCMessageDescriptor get_intelligence_result__descriptor;
extern const ProtobufCMessageDescriptor get_captain__descriptor;
extern const ProtobufCMessageDescriptor get_captain_result__descriptor;
extern const ProtobufCMessageDescriptor handle_task__descriptor;
extern const ProtobufCMessageDescriptor task_reward_items__descriptor;
extern const ProtobufCMessageDescriptor handle_task_result__descriptor;
extern const ProtobufCMessageDescriptor main_task_items__descriptor;
extern const ProtobufCMessageDescriptor current_main_task_info__descriptor;
extern const ProtobufCMessageDescriptor current_companion_task_info__descriptor;
extern const ProtobufCMessageDescriptor get_current_city_data__descriptor;
extern const ProtobufCMessageDescriptor get_current_city_data_result__descriptor;
extern const ProtobufCMessageDescriptor get_ship_list__descriptor;
extern const ProtobufCMessageDescriptor get_ship_list_result__descriptor;
extern const ProtobufCMessageDescriptor repair_ship__descriptor;
extern const ProtobufCMessageDescriptor repair_ship_result__descriptor;
extern const ProtobufCMessageDescriptor repair_all_ships__descriptor;
extern const ProtobufCMessageDescriptor repair_all_ships_result__descriptor;
extern const ProtobufCMessageDescriptor ship_name__descriptor;
extern const ProtobufCMessageDescriptor fleet_formation__descriptor;
extern const ProtobufCMessageDescriptor fleet_formation_result__descriptor;
extern const ProtobufCMessageDescriptor park_ship__descriptor;
extern const ProtobufCMessageDescriptor park_ship_result__descriptor;
extern const ProtobufCMessageDescriptor get_drawings__descriptor;
extern const ProtobufCMessageDescriptor item_define__descriptor;
extern const ProtobufCMessageDescriptor predefined_ship__descriptor;
extern const ProtobufCMessageDescriptor shipdrawing_define__descriptor;
extern const ProtobufCMessageDescriptor equipdrawing_define__descriptor;
extern const ProtobufCMessageDescriptor get_drawings_result__descriptor;
extern const ProtobufCMessageDescriptor build_ship__descriptor;
extern const ProtobufCMessageDescriptor build_ship_result__descriptor;
extern const ProtobufCMessageDescriptor get_building_ships__descriptor;
extern const ProtobufCMessageDescriptor building_ship_define__descriptor;
extern const ProtobufCMessageDescriptor get_building_ships_result__descriptor;
extern const ProtobufCMessageDescriptor finish_building__descriptor;
extern const ProtobufCMessageDescriptor finish_building_result__descriptor;
extern const ProtobufCMessageDescriptor get_building_equipment__descriptor;
extern const ProtobufCMessageDescriptor building_equipment_define__descriptor;
extern const ProtobufCMessageDescriptor get_building_equipment_result__descriptor;
extern const ProtobufCMessageDescriptor cancel_build__descriptor;
extern const ProtobufCMessageDescriptor cancel_build_result__descriptor;
extern const ProtobufCMessageDescriptor captain_define__descriptor;
extern const ProtobufCMessageDescriptor get_fleet_and_dock_ships__descriptor;
extern const ProtobufCMessageDescriptor get_fleet_and_dock_ships_result__descriptor;
extern const ProtobufCMessageDescriptor get_reinforce_ship_list__descriptor;
extern const ProtobufCMessageDescriptor reinforce_ship_define__descriptor;
extern const ProtobufCMessageDescriptor get_reinforce_ship_list_result__descriptor;
extern const ProtobufCMessageDescriptor reinforce_ship__descriptor;
extern const ProtobufCMessageDescriptor reinforce_ship_result__descriptor;
extern const ProtobufCMessageDescriptor reroll_ship__descriptor;
extern const ProtobufCMessageDescriptor reroll_ship_result__descriptor;
extern const ProtobufCMessageDescriptor get_reinforce_equip_list__descriptor;
extern const ProtobufCMessageDescriptor reinforce_equip_define__descriptor;
extern const ProtobufCMessageDescriptor get_reinforce_equip_list_result__descriptor;
extern const ProtobufCMessageDescriptor reinforce_equip__descriptor;
extern const ProtobufCMessageDescriptor reinforce_equip_result__descriptor;
extern const ProtobufCMessageDescriptor reroll_equip__descriptor;
extern const ProtobufCMessageDescriptor reroll_equip_result__descriptor;
extern const ProtobufCMessageDescriptor equip_ship__descriptor;
extern const ProtobufCMessageDescriptor equip_ship_result__descriptor;
extern const ProtobufCMessageDescriptor get_equip_ship_info__descriptor;
extern const ProtobufCMessageDescriptor equip_detail_info__descriptor;
extern const ProtobufCMessageDescriptor equip_ship_info__descriptor;
extern const ProtobufCMessageDescriptor get_equip_ship_info_result__descriptor;
extern const ProtobufCMessageDescriptor get_equipable_items__descriptor;
extern const ProtobufCMessageDescriptor equipable_item__descriptor;
extern const ProtobufCMessageDescriptor get_equipable_items_result__descriptor;
extern const ProtobufCMessageDescriptor get_visited_cities__descriptor;
extern const ProtobufCMessageDescriptor city_define__descriptor;
extern const ProtobufCMessageDescriptor city_info__descriptor;
extern const ProtobufCMessageDescriptor get_visited_cities_result__descriptor;
extern const ProtobufCMessageDescriptor add_supply__descriptor;
extern const ProtobufCMessageDescriptor add_supply_result__descriptor;
extern const ProtobufCMessageDescriptor ship_point__descriptor;
extern const ProtobufCMessageDescriptor ship_routine__descriptor;
extern const ProtobufCMessageDescriptor get_next_map_block__descriptor;
extern const ProtobufCMessageDescriptor nearby_player__descriptor;
extern const ProtobufCMessageDescriptor get_next_map_block_ship_info__descriptor;
extern const ProtobufCMessageDescriptor get_next_map_block_result__descriptor;
extern const ProtobufCMessageDescriptor ship_bow_icon_info__descriptor;
extern const ProtobufCMessageDescriptor leave_city__descriptor;
extern const ProtobufCMessageDescriptor leave_city_result__descriptor;
extern const ProtobufCMessageDescriptor reach_city__descriptor;
extern const ProtobufCMessageDescriptor reach_city_result__descriptor;
extern const ProtobufCMessageDescriptor trigger_sea_event__descriptor;
extern const ProtobufCMessageDescriptor sea_event_loot_define__descriptor;
extern const ProtobufCMessageDescriptor sea_event_ship_status__descriptor;
extern const ProtobufCMessageDescriptor sea_event_loss_define__descriptor;
extern const ProtobufCMessageDescriptor ship_equip_info__descriptor;
extern const ProtobufCMessageDescriptor ship_equip_array__descriptor;
extern const ProtobufCMessageDescriptor out_of_durable_item_define__descriptor;
extern const ProtobufCMessageDescriptor trigger_sea_event_result__descriptor;
extern const ProtobufCMessageDescriptor finish_sea_event__descriptor;
extern const ProtobufCMessageDescriptor finish_sea_event_result__descriptor;
extern const ProtobufCMessageDescriptor get_palace_info__descriptor;
extern const ProtobufCMessageDescriptor get_palace_info_result__descriptor;
extern const ProtobufCMessageDescriptor invest_city__descriptor;
extern const ProtobufCMessageDescriptor invest_city_result__descriptor;
extern const ProtobufCMessageDescriptor get_rank_list__descriptor;
extern const ProtobufCMessageDescriptor rank_info_define__descriptor;
extern const ProtobufCMessageDescriptor get_rank_list_result__descriptor;
extern const ProtobufCMessageDescriptor get_vote_list__descriptor;
extern const ProtobufCMessageDescriptor get_vote_list_result__descriptor;
extern const ProtobufCMessageDescriptor vote_mayor__descriptor;
extern const ProtobufCMessageDescriptor vote_mayor_result__descriptor;
extern const ProtobufCMessageDescriptor change_dev_dir__descriptor;
extern const ProtobufCMessageDescriptor change_dev_dir_result__descriptor;
extern const ProtobufCMessageDescriptor get_labour_union__descriptor;
extern const ProtobufCMessageDescriptor labour_define__descriptor;
extern const ProtobufCMessageDescriptor get_labour_union_result__descriptor;
extern const ProtobufCMessageDescriptor create_labour_union__descriptor;
extern const ProtobufCMessageDescriptor create_labour_union_result__descriptor;
extern const ProtobufCMessageDescriptor delete_labour_union__descriptor;
extern const ProtobufCMessageDescriptor delete_labour_union_result__descriptor;
extern const ProtobufCMessageDescriptor invite_labour__descriptor;
extern const ProtobufCMessageDescriptor invite_labour_result__descriptor;
extern const ProtobufCMessageDescriptor apply_labour_union__descriptor;
extern const ProtobufCMessageDescriptor apply_labour_union_result__descriptor;
extern const ProtobufCMessageDescriptor quit_labour_union__descriptor;
extern const ProtobufCMessageDescriptor quit_labour_union_result__descriptor;
extern const ProtobufCMessageDescriptor kick_out_member__descriptor;
extern const ProtobufCMessageDescriptor kick_out_member_result__descriptor;
extern const ProtobufCMessageDescriptor adjust_privilege__descriptor;
extern const ProtobufCMessageDescriptor adjust_privilege_result__descriptor;
extern const ProtobufCMessageDescriptor deposit_money__descriptor;
extern const ProtobufCMessageDescriptor deposit_money_result__descriptor;
extern const ProtobufCMessageDescriptor withdraw_money__descriptor;
extern const ProtobufCMessageDescriptor withdraw_money_result__descriptor;
extern const ProtobufCMessageDescriptor deposit_item__descriptor;
extern const ProtobufCMessageDescriptor deposit_item_result__descriptor;
extern const ProtobufCMessageDescriptor withdraw_item__descriptor;
extern const ProtobufCMessageDescriptor withdraw_item_result__descriptor;
extern const ProtobufCMessageDescriptor expand_bank__descriptor;
extern const ProtobufCMessageDescriptor expand_bank_result__descriptor;
extern const ProtobufCMessageDescriptor get_bank_info__descriptor;
extern const ProtobufCMessageDescriptor bank_item_define__descriptor;
extern const ProtobufCMessageDescriptor get_bank_info_result__descriptor;
extern const ProtobufCMessageDescriptor get_bank_log__descriptor;
extern const ProtobufCMessageDescriptor get_bank_log_result__descriptor;
extern const ProtobufCMessageDescriptor set_main_task_status__descriptor;
extern const ProtobufCMessageDescriptor set_main_task_status_result__descriptor;
extern const ProtobufCMessageDescriptor props_info__descriptor;
extern const ProtobufCMessageDescriptor fight_summary__descriptor;
extern const ProtobufCMessageDescriptor fight_cannon_info__descriptor;
extern const ProtobufCMessageDescriptor battle_captain_info__descriptor;
extern const ProtobufCMessageDescriptor fight_ship_info__descriptor;
extern const ProtobufCMessageDescriptor engage_in_fight__descriptor;
extern const ProtobufCMessageDescriptor engage_in_fight_result__descriptor;
extern const ProtobufCMessageDescriptor end_fight_ship_info__descriptor;
extern const ProtobufCMessageDescriptor battle_log_item__descriptor;
extern const ProtobufCMessageDescriptor battle_log__descriptor;
extern const ProtobufCMessageDescriptor end_fight__descriptor;
extern const ProtobufCMessageDescriptor loot_define__descriptor;
extern const ProtobufCMessageDescriptor lost_goods_define__descriptor;
extern const ProtobufCMessageDescriptor sunk_ship_details__descriptor;
extern const ProtobufCMessageDescriptor survived_shipdetails__descriptor;
extern const ProtobufCMessageDescriptor captain_info__descriptor;
extern const ProtobufCMessageDescriptor end_fight_result__descriptor;
extern const ProtobufCMessageDescriptor start_auto_fight__descriptor;
extern const ProtobufCMessageDescriptor auto_fight_ship_info__descriptor;
extern const ProtobufCMessageDescriptor start_auto_fight_result__descriptor;
extern const ProtobufCMessageDescriptor get_skills_details__descriptor;
extern const ProtobufCMessageDescriptor skill_define__descriptor;
extern const ProtobufCMessageDescriptor get_skills_details_result__descriptor;
extern const ProtobufCMessageDescriptor add_skill_point__descriptor;
extern const ProtobufCMessageDescriptor add_skill_point_result__descriptor;
extern const ProtobufCMessageDescriptor reset_skill_points__descriptor;
extern const ProtobufCMessageDescriptor reset_skill_points_result__descriptor;
extern const ProtobufCMessageDescriptor notify_battle_log__descriptor;
extern const ProtobufCMessageDescriptor notify_battle_log_result__descriptor;
extern const ProtobufCMessageDescriptor get_personal_info__descriptor;
extern const ProtobufCMessageDescriptor friend_value__descriptor;
extern const ProtobufCMessageDescriptor get_personal_info_result__descriptor;
extern const ProtobufCMessageDescriptor set_bio_info__descriptor;
extern const ProtobufCMessageDescriptor set_bio_info_result__descriptor;
extern const ProtobufCMessageDescriptor cancel_fight__descriptor;
extern const ProtobufCMessageDescriptor cancel_fight_result__descriptor;
extern const ProtobufCMessageDescriptor guild_info_define__descriptor;
extern const ProtobufCMessageDescriptor get_guild_list__descriptor;
extern const ProtobufCMessageDescriptor get_guild_list_result__descriptor;
extern const ProtobufCMessageDescriptor get_my_guild_details__descriptor;
extern const ProtobufCMessageDescriptor guild_personal_info_define__descriptor;
extern const ProtobufCMessageDescriptor guild_relation_define__descriptor;
extern const ProtobufCMessageDescriptor get_my_guild_details_result__descriptor;
extern const ProtobufCMessageDescriptor get_apply_info__descriptor;
extern const ProtobufCMessageDescriptor apply_person_info_define__descriptor;
extern const ProtobufCMessageDescriptor get_apply_info_result__descriptor;
extern const ProtobufCMessageDescriptor create_new_guild__descriptor;
extern const ProtobufCMessageDescriptor create_new_guild_result__descriptor;
extern const ProtobufCMessageDescriptor join_guild_request__descriptor;
extern const ProtobufCMessageDescriptor join_guild_request_result__descriptor;
extern const ProtobufCMessageDescriptor get_guild_details__descriptor;
extern const ProtobufCMessageDescriptor get_guild_details_result__descriptor;
extern const ProtobufCMessageDescriptor change_guild_intro__descriptor;
extern const ProtobufCMessageDescriptor change_guild_intro_result__descriptor;
extern const ProtobufCMessageDescriptor expand_guild_capacity__descriptor;
extern const ProtobufCMessageDescriptor expand_guild_capacity_result__descriptor;
extern const ProtobufCMessageDescriptor guild_member_permission_define__descriptor;
extern const ProtobufCMessageDescriptor get_guild_member_permission__descriptor;
extern const ProtobufCMessageDescriptor get_guild_member_permission_result__descriptor;
extern const ProtobufCMessageDescriptor set_guild_permission_define__descriptor;
extern const ProtobufCMessageDescriptor set_guild_member_permission__descriptor;
extern const ProtobufCMessageDescriptor set_guild_member_permission_result__descriptor;
extern const ProtobufCMessageDescriptor get_hired_captains__descriptor;
extern const ProtobufCMessageDescriptor get_hired_captains_result__descriptor;
extern const ProtobufCMessageDescriptor deal_with_guild_join__descriptor;
extern const ProtobufCMessageDescriptor deal_with_guild_join_result__descriptor;
extern const ProtobufCMessageDescriptor change_guild_announcement__descriptor;
extern const ProtobufCMessageDescriptor change_guild_announcement_result__descriptor;
extern const ProtobufCMessageDescriptor remove_guild_member__descriptor;
extern const ProtobufCMessageDescriptor remove_guild_member_result__descriptor;
extern const ProtobufCMessageDescriptor exit_from_guild__descriptor;
extern const ProtobufCMessageDescriptor exit_from_guild_result__descriptor;
extern const ProtobufCMessageDescriptor dismiss_guild__descriptor;
extern const ProtobufCMessageDescriptor dismiss_guild_result__descriptor;
extern const ProtobufCMessageDescriptor get_search_guild_list__descriptor;
extern const ProtobufCMessageDescriptor get_search_guild_list_result__descriptor;
extern const ProtobufCMessageDescriptor refresh_captain_list__descriptor;
extern const ProtobufCMessageDescriptor refresh_captain_list_result__descriptor;
extern const ProtobufCMessageDescriptor get_friends_list__descriptor;
extern const ProtobufCMessageDescriptor friends_define__descriptor;
extern const ProtobufCMessageDescriptor get_friends_list_result__descriptor;
extern const ProtobufCMessageDescriptor get_black_list__descriptor;
extern const ProtobufCMessageDescriptor get_black_list_result__descriptor;
extern const ProtobufCMessageDescriptor friends_operation__descriptor;
extern const ProtobufCMessageDescriptor friends_operation_result__descriptor;
extern const ProtobufCMessageDescriptor get_friends_req_list__descriptor;
extern const ProtobufCMessageDescriptor get_friends_req_list_result__descriptor;
extern const ProtobufCMessageDescriptor fire_captain__descriptor;
extern const ProtobufCMessageDescriptor fire_captain_result__descriptor;
extern const ProtobufCMessageDescriptor destory_items__descriptor;
extern const ProtobufCMessageDescriptor destory_items_result__descriptor;
extern const ProtobufCMessageDescriptor search_user_by_name__descriptor;
extern const ProtobufCMessageDescriptor search_user_by_name_result__descriptor;
extern const ProtobufCMessageDescriptor take_all_attachment__descriptor;
extern const ProtobufCMessageDescriptor take_all_attachment_result__descriptor;
extern const ProtobufCMessageDescriptor get_items_detail_info__descriptor;
extern const ProtobufCMessageDescriptor get_items_detail_info_result__descriptor;
extern const ProtobufCMessageDescriptor get_dev_goods_info__descriptor;
extern const ProtobufCMessageDescriptor dev_goods_details__descriptor;
extern const ProtobufCMessageDescriptor get_dev_goods_info_result__descriptor;
extern const ProtobufCMessageDescriptor provide_dev_goods__descriptor;
extern const ProtobufCMessageDescriptor provide_dev_goods_result__descriptor;
extern const ProtobufCMessageDescriptor get_dev_goods_count__descriptor;
extern const ProtobufCMessageDescriptor get_dev_goods_count_result__descriptor;
extern const ProtobufCMessageDescriptor get_friend_value__descriptor;
extern const ProtobufCMessageDescriptor get_friend_value_result__descriptor;
extern const ProtobufCMessageDescriptor get_user_info_by_id__descriptor;
extern const ProtobufCMessageDescriptor get_user_info_by_id_result__descriptor;
extern const ProtobufCMessageDescriptor test_create_new_guild__descriptor;
extern const ProtobufCMessageDescriptor test_create_new_guild_result__descriptor;
extern const ProtobufCMessageDescriptor invite_user_to_guild__descriptor;
extern const ProtobufCMessageDescriptor invite_user_to_guild_result__descriptor;
extern const ProtobufCMessageDescriptor get_invitation_list__descriptor;
extern const ProtobufCMessageDescriptor invitation_define__descriptor;
extern const ProtobufCMessageDescriptor get_invitation_list_result__descriptor;
extern const ProtobufCMessageDescriptor deal_with_invitation__descriptor;
extern const ProtobufCMessageDescriptor deal_with_invitation_result__descriptor;
extern const ProtobufCMessageDescriptor get_vticket_market_items__descriptor;
extern const ProtobufCMessageDescriptor vticket_market_item_define__descriptor;
extern const ProtobufCMessageDescriptor black_market_random_ship_and_equip_define__descriptor;
extern const ProtobufCMessageDescriptor get_vticket_market_items_result__descriptor;
extern const ProtobufCMessageDescriptor buy_vticket_market_item__descriptor;
extern const ProtobufCMessageDescriptor buy_vticket_market_item_result__descriptor;
extern const ProtobufCMessageDescriptor get_current_invest_data__descriptor;
extern const ProtobufCMessageDescriptor get_current_invest_data_result__descriptor;
extern const ProtobufCMessageDescriptor get_user_tasks__descriptor;
extern const ProtobufCMessageDescriptor attack_boss_info__descriptor;
extern const ProtobufCMessageDescriptor companion_task_define__descriptor;
extern const ProtobufCMessageDescriptor get_user_tasks_result__descriptor;
extern const ProtobufCMessageDescriptor use_sudan_mask__descriptor;
extern const ProtobufCMessageDescriptor use_sudan_mask_result__descriptor;
extern const ProtobufCMessageDescriptor equip_hero__descriptor;
extern const ProtobufCMessageDescriptor equip_hero_result__descriptor;
extern const ProtobufCMessageDescriptor get_hero_equip__descriptor;
extern const ProtobufCMessageDescriptor item_id_pair__descriptor;
extern const ProtobufCMessageDescriptor get_hero_equip_result__descriptor;
extern const ProtobufCMessageDescriptor buy_city_license__descriptor;
extern const ProtobufCMessageDescriptor buy_city_license_result__descriptor;
extern const ProtobufCMessageDescriptor delete_user__descriptor;
extern const ProtobufCMessageDescriptor delete_user_result__descriptor;
extern const ProtobufCMessageDescriptor change_password__descriptor;
extern const ProtobufCMessageDescriptor change_password_result__descriptor;
extern const ProtobufCMessageDescriptor select_hero_positive_skill__descriptor;
extern const ProtobufCMessageDescriptor select_hero_positive_skill_result__descriptor;
extern const ProtobufCMessageDescriptor get_hero_positive_skill_list__descriptor;
extern const ProtobufCMessageDescriptor get_hero_positive_skill_list_result__descriptor;
extern const ProtobufCMessageDescriptor get_selected_positive_skills__descriptor;
extern const ProtobufCMessageDescriptor positive_skill__descriptor;
extern const ProtobufCMessageDescriptor get_selected_positive_skills_result__descriptor;
extern const ProtobufCMessageDescriptor get_sail_info__descriptor;
extern const ProtobufCMessageDescriptor get_sail_info_result__descriptor;
extern const ProtobufCMessageDescriptor insert_user_name__descriptor;
extern const ProtobufCMessageDescriptor insert_user_name_result__descriptor;
extern const ProtobufCMessageDescriptor get_leaderboard__descriptor;
extern const ProtobufCMessageDescriptor leaderboard_item__descriptor;
extern const ProtobufCMessageDescriptor get_leaderboard_result__descriptor;
extern const ProtobufCMessageDescriptor get_city_status__descriptor;
extern const ProtobufCMessageDescriptor get_city_status_result__descriptor;
extern const ProtobufCMessageDescriptor get_discovered_cities__descriptor;
extern const ProtobufCMessageDescriptor get_discovered_cities_result__descriptor;
extern const ProtobufCMessageDescriptor add_discovered_city__descriptor;
extern const ProtobufCMessageDescriptor add_discovered_city_result__descriptor;
extern const ProtobufCMessageDescriptor force_fight_status__descriptor;
extern const ProtobufCMessageDescriptor force_fight_status_result__descriptor;
extern const ProtobufCMessageDescriptor get_city_produces__descriptor;
extern const ProtobufCMessageDescriptor city_produce_define__descriptor;
extern const ProtobufCMessageDescriptor get_city_produces_result__descriptor;
extern const ProtobufCMessageDescriptor get_city_demands__descriptor;
extern const ProtobufCMessageDescriptor city_demands_define__descriptor;
extern const ProtobufCMessageDescriptor get_city_demands_result__descriptor;
extern const ProtobufCMessageDescriptor get_main_task__descriptor;
extern const ProtobufCMessageDescriptor get_main_task_result__descriptor;
extern const ProtobufCMessageDescriptor complete_main_task__descriptor;
extern const ProtobufCMessageDescriptor complete_main_task_result__descriptor;
extern const ProtobufCMessageDescriptor get_main_task_reward__descriptor;
extern const ProtobufCMessageDescriptor get_main_task_reward_result__descriptor;
extern const ProtobufCMessageDescriptor get_event_task_list__descriptor;
extern const ProtobufCMessageDescriptor event_task_list_define__descriptor;
extern const ProtobufCMessageDescriptor get_event_task_list_result__descriptor;
extern const ProtobufCMessageDescriptor handle_event_task__descriptor;
extern const ProtobufCMessageDescriptor handle_event_task_result__descriptor;
extern const ProtobufCMessageDescriptor get_npc_score__descriptor;
extern const ProtobufCMessageDescriptor get_npc_score_result__descriptor;
extern const ProtobufCMessageDescriptor get_server_info__descriptor;
extern const ProtobufCMessageDescriptor get_server_info_result__descriptor;
extern const ProtobufCMessageDescriptor ping_server__descriptor;
extern const ProtobufCMessageDescriptor ping_server_result__descriptor;
extern const ProtobufCMessageDescriptor expand_package_size__descriptor;
extern const ProtobufCMessageDescriptor expand_package_size_result__descriptor;
extern const ProtobufCMessageDescriptor get_pretask_items__descriptor;
extern const ProtobufCMessageDescriptor pretask_item_define__descriptor;
extern const ProtobufCMessageDescriptor get_pretask_items_result__descriptor;
extern const ProtobufCMessageDescriptor get_onsale_items__descriptor;
extern const ProtobufCMessageDescriptor onsale_item_define__descriptor;
extern const ProtobufCMessageDescriptor onsale_item_package_define__descriptor;
extern const ProtobufCMessageDescriptor get_onsale_items_result__descriptor;
extern const ProtobufCMessageDescriptor buy_onsale_items__descriptor;
extern const ProtobufCMessageDescriptor buy_onsale_items_result__descriptor;
extern const ProtobufCMessageDescriptor send_custom_service_info__descriptor;
extern const ProtobufCMessageDescriptor send_custom_service_info_result__descriptor;
extern const ProtobufCMessageDescriptor get_iabitem__descriptor;
extern const ProtobufCMessageDescriptor get_iabitem_result__descriptor;
extern const ProtobufCMessageDescriptor change_email__descriptor;
extern const ProtobufCMessageDescriptor change_email_result__descriptor;
extern const ProtobufCMessageDescriptor token_login__descriptor;
extern const ProtobufCMessageDescriptor engage_in_fight_for_task__descriptor;
extern const ProtobufCMessageDescriptor engage_in_fight_for_task_result__descriptor;
extern const ProtobufCMessageDescriptor authenticate_account__descriptor;
extern const ProtobufCMessageDescriptor authenticate_account_result__descriptor;
extern const ProtobufCMessageDescriptor salvage__descriptor;
extern const ProtobufCMessageDescriptor salvage_result__descriptor;
extern const ProtobufCMessageDescriptor get_email_verified_reward__descriptor;
extern const ProtobufCMessageDescriptor get_email_verified_reward_result__descriptor;
extern const ProtobufCMessageDescriptor start_salvage__descriptor;
extern const ProtobufCMessageDescriptor start_salvage_result__descriptor;
extern const ProtobufCMessageDescriptor get_email_verified_info__descriptor;
extern const ProtobufCMessageDescriptor get_email_verified_info_result__descriptor;
extern const ProtobufCMessageDescriptor get_salvage_condition__descriptor;
extern const ProtobufCMessageDescriptor get_salvage_condition_result__descriptor;
extern const ProtobufCMessageDescriptor get_activities_props__descriptor;
extern const ProtobufCMessageDescriptor get_activities_props_result__descriptor;
extern const ProtobufCMessageDescriptor get_activities_gift_info__descriptor;
extern const ProtobufCMessageDescriptor get_activities_gift_info_result__descriptor;
extern const ProtobufCMessageDescriptor get_activities_pray_info__descriptor;
extern const ProtobufCMessageDescriptor get_activities_pray_info_result__descriptor;
extern const ProtobufCMessageDescriptor get_pray__descriptor;
extern const ProtobufCMessageDescriptor get_pray_result__descriptor;
extern const ProtobufCMessageDescriptor send_activities_gift__descriptor;
extern const ProtobufCMessageDescriptor send_activities_gift_result__descriptor;
extern const ProtobufCMessageDescriptor get_pirate_attack_info__descriptor;
extern const ProtobufCMessageDescriptor get_pirate_attack_info_result__descriptor;
extern const ProtobufCMessageDescriptor get_attack_pirate_info__descriptor;
extern const ProtobufCMessageDescriptor get_attack_pirate_info_result__descriptor;
extern const ProtobufCMessageDescriptor get_vticket_market_activities__descriptor;
extern const ProtobufCMessageDescriptor vticket_market_activities_define__descriptor;
extern const ProtobufCMessageDescriptor get_vticket_market_activities_result__descriptor;
extern const ProtobufCMessageDescriptor buy_vticket_market_activities__descriptor;
extern const ProtobufCMessageDescriptor buy_vticket_market_activities_result__descriptor;
extern const ProtobufCMessageDescriptor final_my_exploit_score__descriptor;
extern const ProtobufCMessageDescriptor final_my_exploit_score_result__descriptor;
extern const ProtobufCMessageDescriptor find_loot_player__descriptor;
extern const ProtobufCMessageDescriptor character_info__descriptor;
extern const ProtobufCMessageDescriptor find_loot_player_result__descriptor;
extern const ProtobufCMessageDescriptor loot_player__descriptor;
extern const ProtobufCMessageDescriptor loot_player_result__descriptor;
extern const ProtobufCMessageDescriptor get_loot_player_log__descriptor;
extern const ProtobufCMessageDescriptor loot_log__descriptor;
extern const ProtobufCMessageDescriptor get_loot_player_log_result__descriptor;
extern const ProtobufCMessageDescriptor start_revenge_on_loot_player__descriptor;
extern const ProtobufCMessageDescriptor attack_pirate_data_info__descriptor;
extern const ProtobufCMessageDescriptor get_attack_pirate_rank_info__descriptor;
extern const ProtobufCMessageDescriptor get_attack_pirate_rank_info_result__descriptor;
extern const ProtobufCMessageDescriptor get_attack_pirate_boss_info__descriptor;
extern const ProtobufCMessageDescriptor get_attack_pirate_boss_info_result__descriptor;
extern const ProtobufCMessageDescriptor insurance_item__descriptor;
extern const ProtobufCMessageDescriptor insurance_item_status__descriptor;
extern const ProtobufCMessageDescriptor buy_insurance__descriptor;
extern const ProtobufCMessageDescriptor buy_insurance_result__descriptor;
extern const ProtobufCMessageDescriptor complete_dialogs__descriptor;
extern const ProtobufCMessageDescriptor complete_dialogs_result__descriptor;
extern const ProtobufCMessageDescriptor obtain_lotto_message__descriptor;
extern const ProtobufCMessageDescriptor lotto_message__descriptor;
extern const ProtobufCMessageDescriptor obtain_lotto_message_result__descriptor;
extern const ProtobufCMessageDescriptor get_invite_bonus__descriptor;
extern const ProtobufCMessageDescriptor get_invite_bonus_result__descriptor;
extern const ProtobufCMessageDescriptor company_define__descriptor;
extern const ProtobufCMessageDescriptor get_companies__descriptor;
extern const ProtobufCMessageDescriptor get_companies_result__descriptor;
extern const ProtobufCMessageDescriptor equip_company__descriptor;
extern const ProtobufCMessageDescriptor equip_company_result__descriptor;
extern const ProtobufCMessageDescriptor unlock_company__descriptor;
extern const ProtobufCMessageDescriptor unlock_company_result__descriptor;
extern const ProtobufCMessageDescriptor get_companions_status__descriptor;
extern const ProtobufCMessageDescriptor companions_status__descriptor;
extern const ProtobufCMessageDescriptor get_companions_status_result__descriptor;
extern const ProtobufCMessageDescriptor unlock_ship_cabin__descriptor;
extern const ProtobufCMessageDescriptor unlock_ship_cabin_result__descriptor;
extern const ProtobufCMessageDescriptor get_ship_companions__descriptor;
extern const ProtobufCMessageDescriptor ship_gear_detail__descriptor;
extern const ProtobufCMessageDescriptor get_ship_companions_result__descriptor;
extern const ProtobufCMessageDescriptor set_ship_companions__descriptor;
extern const ProtobufCMessageDescriptor set_ship_companions_result__descriptor;
extern const ProtobufCMessageDescriptor save_failed_fight__descriptor;
extern const ProtobufCMessageDescriptor save_failed_fight_result__descriptor;
extern const ProtobufCMessageDescriptor end_failed_fight_by_vticket__descriptor;
extern const ProtobufCMessageDescriptor end_failed_fight_by_vticket_result__descriptor;
extern const ProtobufCMessageDescriptor complete_companion_task__descriptor;
extern const ProtobufCMessageDescriptor complete_companion_task_result__descriptor;
extern const ProtobufCMessageDescriptor deduct_coins__descriptor;
extern const ProtobufCMessageDescriptor deduct_coins_result__descriptor;
extern const ProtobufCMessageDescriptor update_user_selection__descriptor;
extern const ProtobufCMessageDescriptor update_data_version__descriptor;
extern const ProtobufCMessageDescriptor update_data_version_result__descriptor;
extern const ProtobufCMessageDescriptor cal_fast_hire_crew__descriptor;
extern const ProtobufCMessageDescriptor cal_fast_hire_crew_result__descriptor;
extern const ProtobufCMessageDescriptor companion_rebirth__descriptor;
extern const ProtobufCMessageDescriptor companion_rebirth_result__descriptor;
extern const ProtobufCMessageDescriptor repair_equipment__descriptor;
extern const ProtobufCMessageDescriptor repair_equipment_result__descriptor;
extern const ProtobufCMessageDescriptor get_repair_equipment_need__descriptor;
extern const ProtobufCMessageDescriptor get_repair_equipment_need_result__descriptor;
extern const ProtobufCMessageDescriptor recent_order_define__descriptor;
extern const ProtobufCMessageDescriptor get_recent_order__descriptor;
extern const ProtobufCMessageDescriptor get_recent_order_result__descriptor;
extern const ProtobufCMessageDescriptor get_drop_increase_rate_info__descriptor;
extern const ProtobufCMessageDescriptor get_drop_increase_rate_info_result__descriptor;
extern const ProtobufCMessageDescriptor get_daily_activities_reward__descriptor;
extern const ProtobufCMessageDescriptor get_daily_activities_reward_result__descriptor;
extern const ProtobufCMessageDescriptor add_proficiency__descriptor;
extern const ProtobufCMessageDescriptor add_proficiency_result__descriptor;
extern const ProtobufCMessageDescriptor get_proficiency_values__descriptor;
extern const ProtobufCMessageDescriptor proficiency_define__descriptor;
extern const ProtobufCMessageDescriptor get_proficiency_values_result__descriptor;
extern const ProtobufCMessageDescriptor get_proficiency_book__descriptor;
extern const ProtobufCMessageDescriptor get_proficiency_book_result__descriptor;
extern const ProtobufCMessageDescriptor repair_city_defense_in_war__descriptor;
extern const ProtobufCMessageDescriptor repair_city_defense_in_war_result__descriptor;
extern const ProtobufCMessageDescriptor enhance_attack__descriptor;
extern const ProtobufCMessageDescriptor enhance_attack_result__descriptor;
extern const ProtobufCMessageDescriptor get_city_prepare_status__descriptor;
extern const ProtobufCMessageDescriptor nation_war_pair__descriptor;
extern const ProtobufCMessageDescriptor get_city_prepare_status_result__descriptor;
extern const ProtobufCMessageDescriptor start_attack_city__descriptor;
extern const ProtobufCMessageDescriptor city_status__descriptor;
extern const ProtobufCMessageDescriptor start_attack_city_result__descriptor;
extern const ProtobufCMessageDescriptor get_enemy_nation__descriptor;
extern const ProtobufCMessageDescriptor enemy_nation__descriptor;
extern const ProtobufCMessageDescriptor get_enemy_nation_result__descriptor;
extern const ProtobufCMessageDescriptor add_city_repair_pool__descriptor;
extern const ProtobufCMessageDescriptor add_city_repair_pool_result__descriptor;
extern const ProtobufCMessageDescriptor add_city_attack_pool__descriptor;
extern const ProtobufCMessageDescriptor add_city_attack_pool_result__descriptor;
extern const ProtobufCMessageDescriptor get_package_info__descriptor;
extern const ProtobufCMessageDescriptor get_package_info_result__descriptor;
extern const ProtobufCMessageDescriptor apply_state_war__descriptor;
extern const ProtobufCMessageDescriptor apply_state_war_result__descriptor;
extern const ProtobufCMessageDescriptor contribution_rank_info__descriptor;
extern const ProtobufCMessageDescriptor get_contribution_rank__descriptor;
extern const ProtobufCMessageDescriptor get_contribution_rank_result__descriptor;
extern const ProtobufCMessageDescriptor add_supply_station__descriptor;
extern const ProtobufCMessageDescriptor add_supply_station_result__descriptor;
extern const ProtobufCMessageDescriptor hire_army__descriptor;
extern const ProtobufCMessageDescriptor hire_army_result__descriptor;
extern const ProtobufCMessageDescriptor get_nation_war_entrance__descriptor;
extern const ProtobufCMessageDescriptor get_nation_war_entrance_result__descriptor;
extern const ProtobufCMessageDescriptor end_attack_city__descriptor;
extern const ProtobufCMessageDescriptor end_attack_city_result__descriptor;
extern const ProtobufCMessageDescriptor enter_depot_repair__descriptor;
extern const ProtobufCMessageDescriptor enter_depot_repair_result__descriptor;
extern const ProtobufCMessageDescriptor get_nation_war_city_lost__descriptor;
extern const ProtobufCMessageDescriptor city_lost__descriptor;
extern const ProtobufCMessageDescriptor get_nation_war_city_lost_result__descriptor;
extern const ProtobufCMessageDescriptor nation_war_character_ship__descriptor;
extern const ProtobufCMessageDescriptor nation_war_character_status__descriptor;
extern const ProtobufCMessageDescriptor nation_war_battle_turn_result__descriptor;
extern const ProtobufCMessageDescriptor reach_depot__descriptor;
extern const ProtobufCMessageDescriptor reach_depot_result__descriptor;
extern const ProtobufCMessageDescriptor reduce_in_nation_war__descriptor;
extern const ProtobufCMessageDescriptor reduce_info__descriptor;
extern const ProtobufCMessageDescriptor reduce_in_nation_war_result__descriptor;
extern const ProtobufCMessageDescriptor get_my_nation_war__descriptor;
extern const ProtobufCMessageDescriptor get_my_nation_war_result__descriptor;
extern const ProtobufCMessageDescriptor func_for_test__descriptor;
extern const ProtobufCMessageDescriptor func_for_test_result__descriptor;
extern const ProtobufCMessageDescriptor check_delete_characters_num__descriptor;
extern const ProtobufCMessageDescriptor check_delete_characters_num_result__descriptor;
extern const ProtobufCMessageDescriptor get_player_equip_ship_info__descriptor;
extern const ProtobufCMessageDescriptor get_player_equip_ship_info_result__descriptor;
extern const ProtobufCMessageDescriptor get_player_ship_list__descriptor;
extern const ProtobufCMessageDescriptor player_ship_simple_info__descriptor;
extern const ProtobufCMessageDescriptor get_player_ship_list_result__descriptor;
extern const ProtobufCMessageDescriptor fire_crew__descriptor;
extern const ProtobufCMessageDescriptor fire_crew_result__descriptor;
extern const ProtobufCMessageDescriptor get_force_city__descriptor;
extern const ProtobufCMessageDescriptor get_force_city_result__descriptor;
extern const ProtobufCMessageDescriptor save_items_to_warehouse__descriptor;
extern const ProtobufCMessageDescriptor save_items_to_warehouse_result__descriptor;
extern const ProtobufCMessageDescriptor expand_warehouse__descriptor;
extern const ProtobufCMessageDescriptor expand_warehouse_result__descriptor;
extern const ProtobufCMessageDescriptor get_change_log__descriptor;
extern const ProtobufCMessageDescriptor get_change_log_result__descriptor;
extern const ProtobufCMessageDescriptor complete_secondary_task__descriptor;
extern const ProtobufCMessageDescriptor complete_secondary_task_result__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_login_2eproto__INCLUDED */
